--
-- PostgreSQL database dump
--

-- Dumped from database version 11.5
-- Dumped by pg_dump version 11.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: heroku_4161265f41f2412; Type: SCHEMA; Schema: -; Owner: srujay
--

CREATE SCHEMA heroku_4161265f41f2412;


ALTER SCHEMA heroku_4161265f41f2412 OWNER TO srujay;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: alembic_version; Type: TABLE; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE TABLE heroku_4161265f41f2412.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE heroku_4161265f41f2412.alembic_version OWNER TO srujay;

--
-- Name: event; Type: TABLE; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE TABLE heroku_4161265f41f2412.event (
    id bigint NOT NULL,
    question_type character varying(32),
    question_name character varying(64),
    event_type character varying(32),
    current_state text,
    ts timestamp with time zone,
    user_id bigint
);


ALTER TABLE heroku_4161265f41f2412.event OWNER TO srujay;

--
-- Name: event_id_seq; Type: SEQUENCE; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE SEQUENCE heroku_4161265f41f2412.event_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE heroku_4161265f41f2412.event_id_seq OWNER TO srujay;

--
-- Name: event_id_seq; Type: SEQUENCE OWNED BY; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER SEQUENCE heroku_4161265f41f2412.event_id_seq OWNED BY heroku_4161265f41f2412.event.id;


--
-- Name: user; Type: TABLE; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE TABLE heroku_4161265f41f2412."user" (
    id bigint NOT NULL,
    sid_hash character varying(100),
    ts_created timestamp with time zone,
    consent bigint,
    treatment character varying(30)
);


ALTER TABLE heroku_4161265f41f2412."user" OWNER TO srujay;

--
-- Name: user_id_seq; Type: SEQUENCE; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE SEQUENCE heroku_4161265f41f2412.user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE heroku_4161265f41f2412.user_id_seq OWNER TO srujay;

--
-- Name: user_id_seq; Type: SEQUENCE OWNED BY; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER SEQUENCE heroku_4161265f41f2412.user_id_seq OWNED BY heroku_4161265f41f2412."user".id;


--
-- Name: event id; Type: DEFAULT; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER TABLE ONLY heroku_4161265f41f2412.event ALTER COLUMN id SET DEFAULT nextval('heroku_4161265f41f2412.event_id_seq'::regclass);


--
-- Name: user id; Type: DEFAULT; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER TABLE ONLY heroku_4161265f41f2412."user" ALTER COLUMN id SET DEFAULT nextval('heroku_4161265f41f2412.user_id_seq'::regclass);


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: heroku_4161265f41f2412; Owner: srujay
--

COPY heroku_4161265f41f2412.alembic_version (version_num) FROM stdin;
c795ee8630cd
\.


--
-- Data for Name: event; Type: TABLE DATA; Schema: heroku_4161265f41f2412; Owner: srujay
--

COPY heroku_4161265f41f2412.event (id, question_type, question_name, event_type, current_state, ts, user_id) FROM stdin;
2	\N	\N	\N	\N	2019-06-05 18:49:46-07	\N
12	\N	\N	\N	\N	2019-06-05 18:49:53-07	\N
22	coding	trie_impl	load		2019-06-05 18:54:10-07	12
32	solution	trie_impl	load		2019-06-05 18:55:45-07	12
42	coding	trie_impl	load		2019-06-05 22:03:11-07	12
52	coding	trie_impl	submit	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-05 22:03:22-07	12
62	coding	trie_impl	results	<div class="testcase error"><span class="msg">Error connecting to Redis server. Contact someone!</span></div>	2019-06-05 22:03:22-07	12
72	coding	trie_impl	submit	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-05 22:03:23-07	12
82	coding	trie_impl	results	<div class="testcase error"><span class="msg">Error connecting to Redis server. Contact someone!</span></div>	2019-06-05 22:03:23-07	12
92	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-05 22:03:41-07	12
102	solution	trie_impl	load		2019-06-05 22:03:41-07	12
112	solution	trie_impl	move_on		2019-06-05 22:03:48-07	12
122	coding	trie_list_words	load		2019-06-05 22:03:49-07	12
132	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-05 22:20:21-07	12
142	solution	trie_impl	load		2019-06-05 22:20:21-07	12
152	coding	trie_impl	load		2019-06-06 18:13:24-07	12
162	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 18:13:28-07	12
172	solution	trie_impl	load		2019-06-06 18:13:29-07	12
182	coding	trie_impl	load		2019-06-06 21:58:47-07	12
192	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 21:58:49-07	12
202	coding	trie_impl	load		2019-06-06 22:17:01-07	12
212	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 22:17:03-07	12
222	coding	trie_impl	load		2019-06-06 22:21:14-07	12
232	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 22:21:16-07	12
242	login_dedup	login_dedup	login_dedup		2019-06-06 22:45:04-07	2
252	coding	dfs_impl	load		2019-06-06 22:45:15-07	22
262	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  pass\\n"}	2019-06-06 22:45:18-07	22
272	parsons	dfs_impl	load		2019-06-06 22:45:26-07	22
282	parsons	dfs_impl	unload		2019-06-06 22:45:27-07	22
292	parsons	dfs_impl	load		2019-06-06 22:45:27-07	22
302	parsons	dfs_impl	unload		2019-06-06 22:45:33-07	22
312	coding	dfs_impl	load		2019-06-06 22:45:35-07	22
322	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  pass\\n"}	2019-06-06 22:45:47-07	22
332	parsons	dfs_impl	load		2019-06-06 22:50:27-07	22
342	coding	trie_impl	load		2019-06-06 23:01:19-07	12
352	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:01:21-07	12
362	coding	trie_impl	load		2019-06-06 23:10:09-07	12
372	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:10:11-07	12
382	coding	trie_impl	load		2019-06-06 23:35:45-07	12
392	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:35:48-07	12
402	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:37:04-07	12
412	coding	trie_impl	load		2019-06-06 23:39:35-07	12
1442	solution	trie_impl	move_on		2019-06-07 18:06:52-07	12
1452	solution	trie_impl	move_on		2019-06-07 18:06:53-07	12
1462	coding	trie_list_words	load		2019-06-07 18:06:54-07	12
1472	coding	trie_list_words	load		2019-06-07 18:06:54-07	12
422	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:39:37-07	12
432	solution	binary_search_1	load		2019-06-06 23:39:37-07	12
442	solution	binary_search_1	move_on		2019-06-06 23:40:09-07	12
452	coding	binary_search_2	load		2019-06-06 23:40:10-07	12
462	coding	binary_search_2	move_on	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-06 23:40:14-07	12
472	solution	binary_search_1	load		2019-06-06 23:40:15-07	12
482	coding	trie_impl	load		2019-06-06 23:42:08-07	12
492	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:42:10-07	12
502	solution	binary_search_1	load		2019-06-06 23:42:10-07	12
512	solution	binary_search_1	move_on		2019-06-06 23:42:16-07	12
522	coding	binary_search_2	load		2019-06-06 23:42:17-07	12
532	coding	binary_search_2	move_on	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-06 23:42:20-07	12
542	solution	binary_search_1	load		2019-06-06 23:42:20-07	12
552	solution	binary_search_1	move_on		2019-06-06 23:42:21-07	12
562	coding	binary_search_2	load		2019-06-06 23:42:23-07	12
572	coding	binary_search_2	move_on	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-06 23:42:35-07	12
582	solution	binary_search_1	load		2019-06-06 23:42:35-07	12
592	solution	binary_search_1	move_on		2019-06-06 23:42:52-07	12
602	coding	binary_search_2	load		2019-06-06 23:42:53-07	12
612	coding	binary_search_2	move_on	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-06 23:43:00-07	12
622	solution	binary_search_1	load		2019-06-06 23:43:01-07	12
632	solution	binary_search_1	move_on		2019-06-06 23:43:25-07	12
642	coding	binary_search_2	load		2019-06-06 23:43:27-07	12
652	coding	binary_search_2	unload	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-06 23:43:31-07	12
662	coding	trie_impl	load		2019-06-06 23:47:22-07	12
672	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:47:26-07	12
682	solution	binary_search_1	load		2019-06-06 23:47:27-07	12
692	coding	trie_impl	load		2019-06-06 23:48:20-07	12
702	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:48:23-07	12
712	solution	trie_impl	load		2019-06-06 23:48:23-07	12
722	solution	trie_impl	move_on		2019-06-06 23:48:36-07	12
732	coding	trie_list_words	load		2019-06-06 23:48:37-07	12
742	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-06 23:48:46-07	12
752	solution	trie_list_words	load		2019-06-06 23:48:46-07	12
762	solution	trie_list_words	move_on		2019-06-06 23:48:49-07	12
772	coding	trie_prefix_suffix	load		2019-06-06 23:48:50-07	12
782	coding	trie_prefix_suffix	unload	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-06 23:48:56-07	12
792	coding	trie_list_words	load		2019-06-06 23:54:26-07	12
802	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-06 23:54:41-07	12
812	solution	trie_list_words	load		2019-06-06 23:54:41-07	12
822	solution	trie_list_words	move_on		2019-06-06 23:54:45-07	12
832	coding	trie_prefix_suffix	load		2019-06-06 23:54:46-07	12
842	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-06 23:54:51-07	12
852	solution	trie_prefix_suffix	load		2019-06-06 23:54:51-07	12
862	solution	trie_prefix_suffix	move_on		2019-06-06 23:54:56-07	12
872	coding	huffman_impl	load		2019-06-06 23:54:58-07	12
882	coding	huffman_impl	submit	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-06 23:55:15-07	12
892	coding	huffman_impl	results	<div class="testcase error"><span class="msg">Error connecting to Redis server. Contact someone!</span></div>	2019-06-06 23:55:16-07	12
902	coding	huffman_impl	submit	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-06 23:55:17-07	12
912	coding	huffman_impl	results	<div class="testcase error"><span class="msg">Error connecting to Redis server. Contact someone!</span></div>	2019-06-06 23:55:18-07	12
922	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-06 23:55:20-07	12
932	solution	huffman_impl	load		2019-06-06 23:55:20-07	12
942	solution	huffman_impl	move_on		2019-06-06 23:55:41-07	12
952	coding	huffman_saved_bits	load		2019-06-06 23:55:42-07	12
962	coding	huffman_saved_bits	unload	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-06 23:55:54-07	12
972	coding	trie_impl	load		2019-06-06 23:57:00-07	12
1482	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:06:56-07	12
1492	solution	trie_list_words	load		2019-06-07 18:06:56-07	12
1502	solution	trie_list_words	move_on		2019-06-07 18:07:08-07	12
982	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-06 23:57:03-07	12
992	solution	trie_impl	load		2019-06-06 23:57:04-07	12
1002	solution	trie_impl	load		2019-06-06 23:57:11-07	12
1012	solution	trie_impl	load		2019-06-06 23:57:14-07	12
1022	solution	trie_impl	load		2019-06-06 23:58:48-07	12
1032	coding	trie_impl	load		2019-06-07 17:07:08-07	12
1042	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 17:07:40-07	12
1052	coding	trie_impl	unload	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 17:07:41-07	12
1062	solution	trie_impl	load		2019-06-07 17:07:41-07	12
1072	solution	trie_impl	move_on		2019-06-07 17:08:00-07	12
1082	coding	trie_list_words	load		2019-06-07 17:08:01-07	12
1092	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 17:08:42-07	12
1102	solution	trie_list_words	load		2019-06-07 17:08:43-07	12
1112	solution	trie_list_words	move_on		2019-06-07 17:08:46-07	12
1122	coding	trie_prefix_suffix	load		2019-06-07 17:08:48-07	12
1132	coding	trie_prefix_suffix	unload	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 17:09:14-07	12
1142	coding	trie_impl	load		2019-06-07 17:53:07-07	12
1152	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 17:53:09-07	12
1162	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 17:53:18-07	12
1172	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 17:54:12-07	12
1182	coding	trie_impl	load		2019-06-07 17:55:02-07	12
1192	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 17:55:04-07	12
1202	solution	trie_impl	load		2019-06-07 17:55:05-07	12
1212	parsons	dfs_impl	unload		2019-06-07 17:57:14-07	22
1222	solution	trie_impl	load		2019-06-07 17:58:08-07	12
1232	solution	trie_impl	load		2019-06-07 17:58:13-07	12
1242	solution	trie_impl	move_on		2019-06-07 17:58:24-07	12
1252	coding	trie_list_words	load		2019-06-07 17:58:25-07	12
1262	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 17:58:27-07	12
1272	solution	trie_list_words	load		2019-06-07 17:58:28-07	12
1282	solution	trie_list_words	move_on		2019-06-07 17:58:30-07	12
1292	coding	trie_prefix_suffix	load		2019-06-07 17:58:32-07	12
1302	coding	trie_impl	load		2019-06-07 17:59:43-07	12
1312	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 17:59:45-07	12
1322	solution	trie_impl	load		2019-06-07 17:59:46-07	12
1332	solution	trie_impl	move_on		2019-06-07 18:00:32-07	12
1342	coding	trie_list_words	load		2019-06-07 18:00:33-07	12
1352	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:00:35-07	12
1362	solution	trie_list_words	load		2019-06-07 18:00:36-07	12
1372	coding	trie_impl	load		2019-06-07 18:03:12-07	12
1382	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:03:16-07	12
1392	coding	trie_impl	load		2019-06-07 18:05:30-07	12
1402	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:05:32-07	12
1412	coding	trie_impl	load		2019-06-07 18:06:15-07	12
1422	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:06:18-07	12
1432	solution	trie_impl	load		2019-06-07 18:06:37-07	12
1512	coding	trie_prefix_suffix	load		2019-06-07 18:07:10-07	12
1522	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 18:07:28-07	12
1532	solution	trie_prefix_suffix	load		2019-06-07 18:07:28-07	12
1542	solution	trie_prefix_suffix	move_on		2019-06-07 18:07:31-07	12
1552	coding	huffman_impl	load		2019-06-07 18:07:32-07	12
1562	coding	trie_list_words	unload	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:07:34-07	12
1572	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 18:07:43-07	12
1582	solution	huffman_impl	load		2019-06-07 18:07:43-07	12
1592	solution	huffman_impl	move_on		2019-06-07 18:07:51-07	12
1602	coding	huffman_saved_bits	load		2019-06-07 18:07:52-07	12
1612	coding	huffman_saved_bits	move_on	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 18:07:56-07	12
1622	solution	huffman_saved_bits	load		2019-06-07 18:07:56-07	12
1632	coding	huffman_saved_bits	move_on	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 18:08:07-07	12
1642	solution	huffman_saved_bits	load		2019-06-07 18:08:08-07	12
1652	solution	huffman_saved_bits	move_on		2019-06-07 18:08:10-07	12
1662	coding	binary_search_1	load		2019-06-07 18:08:11-07	12
1672	coding	binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n    pass\\n"}	2019-06-07 18:08:14-07	12
1682	solution	binary_search_1	load		2019-06-07 18:08:14-07	12
1692	solution	binary_search_1	move_on		2019-06-07 18:08:16-07	12
1702	coding	binary_search_2	load		2019-06-07 18:08:17-07	12
1712	coding	binary_search_2	move_on	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-07 18:08:20-07	12
1722	solution	binary_search_2	load		2019-06-07 18:08:20-07	12
1732	solution	binary_search_2	move_on		2019-06-07 18:08:22-07	12
1742	multi	post_workshop_survey	load		2019-06-07 18:08:23-07	12
1752	coding	trie_impl	load		2019-06-07 18:09:39-07	12
1762	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:10:07-07	12
1772	solution	trie_impl	load		2019-06-07 18:10:08-07	12
1782	solution	trie_impl	move_on		2019-06-07 18:10:10-07	12
1792	coding	trie_list_words	load		2019-06-07 18:10:11-07	12
1802	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:10:14-07	12
1812	solution	trie_list_words	load		2019-06-07 18:10:15-07	12
1822	solution	trie_list_words	move_on		2019-06-07 18:10:16-07	12
1832	coding	trie_prefix_suffix	load		2019-06-07 18:10:17-07	12
1842	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 18:10:26-07	12
1852	solution	trie_prefix_suffix	load		2019-06-07 18:10:26-07	12
1862	solution	trie_prefix_suffix	move_on		2019-06-07 18:10:28-07	12
1872	coding	huffman_impl	load		2019-06-07 18:10:29-07	12
1882	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 18:10:43-07	12
1892	solution	huffman_impl	load		2019-06-07 18:10:43-07	12
1902	solution	huffman_impl	move_on		2019-06-07 18:10:54-07	12
1912	coding	huffman_saved_bits	load		2019-06-07 18:10:55-07	12
1922	coding	huffman_saved_bits	move_on	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 18:11:02-07	12
1932	solution	huffman_saved_bits	load		2019-06-07 18:11:03-07	12
1942	solution	huffman_saved_bits	move_on		2019-06-07 18:11:13-07	12
1952	coding	binary_search_1	load		2019-06-07 18:11:15-07	12
1962	coding	binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n    pass\\n"}	2019-06-07 18:11:26-07	12
1972	solution	binary_search_1	load		2019-06-07 18:11:26-07	12
1982	solution	binary_search_1	move_on		2019-06-07 18:11:28-07	12
1992	coding	binary_search_2	load		2019-06-07 18:11:29-07	12
2002	coding	binary_search_2	move_on	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-07 18:11:33-07	12
2012	solution	binary_search_2	load		2019-06-07 18:11:34-07	12
2022	solution	binary_search_2	move_on		2019-06-07 18:11:35-07	12
2032	multi	post_workshop_survey	load		2019-06-07 18:11:35-07	12
2042	coding	trie_impl	load		2019-06-07 18:12:58-07	12
2052	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:13:05-07	12
2062	solution	trie_impl	load		2019-06-07 18:13:06-07	12
2072	solution	trie_impl	move_on		2019-06-07 18:13:13-07	12
2082	coding	trie_list_words	load		2019-06-07 18:13:15-07	12
2092	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:13:17-07	12
2102	solution	trie_list_words	load		2019-06-07 18:13:17-07	12
2112	solution	trie_list_words	move_on		2019-06-07 18:13:23-07	12
2122	coding	trie_prefix_suffix	load		2019-06-07 18:13:24-07	12
2712	solution	trie_list_words	load		2019-06-07 18:26:06-07	12
2722	coding	trie_impl	load		2019-06-07 18:36:15-07	12
2132	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 18:13:27-07	12
2142	solution	trie_prefix_suffix	load		2019-06-07 18:13:27-07	12
2152	coding	trie_impl	load		2019-06-07 18:19:44-07	12
2162	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:19:46-07	12
2172	solution	trie_impl	load		2019-06-07 18:19:46-07	12
2182	solution	trie_impl	move_on		2019-06-07 18:19:48-07	12
2192	coding	trie_list_words	load		2019-06-07 18:19:50-07	12
2202	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:20:28-07	12
2212	solution	trie_list_words	load		2019-06-07 18:20:28-07	12
2222	solution	trie_list_words	move_on		2019-06-07 18:20:29-07	12
2232	coding	trie_prefix_suffix	load		2019-06-07 18:20:29-07	12
2242	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 18:20:32-07	12
2252	solution	trie_prefix_suffix	load		2019-06-07 18:20:32-07	12
2262	solution	trie_prefix_suffix	move_on		2019-06-07 18:20:35-07	12
2272	coding	huffman_impl	load		2019-06-07 18:20:36-07	12
2282	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 18:20:56-07	12
2292	solution	huffman_impl	load		2019-06-07 18:20:57-07	12
2302	solution	huffman_impl	move_on		2019-06-07 18:20:58-07	12
2312	coding	huffman_saved_bits	load		2019-06-07 18:20:59-07	12
2322	coding	huffman_saved_bits	move_on	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 18:21:02-07	12
2332	solution	huffman_saved_bits	load		2019-06-07 18:21:02-07	12
2342	solution	huffman_impl	move_on		2019-06-07 18:22:47-07	12
2352	coding	huffman_saved_bits	load		2019-06-07 18:22:48-07	12
2362	coding	huffman_saved_bits	move_on	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 18:22:51-07	12
2372	solution	huffman_saved_bits	load		2019-06-07 18:22:51-07	12
2382	solution	huffman_saved_bits	move_on		2019-06-07 18:22:54-07	12
2392	coding	binary_search_1	load		2019-06-07 18:22:55-07	12
2402	coding	binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n    pass\\n"}	2019-06-07 18:23:41-07	12
2412	solution	binary_search_1	load		2019-06-07 18:23:42-07	12
2422	solution	binary_search_1	move_on		2019-06-07 18:23:43-07	12
2432	coding	binary_search_2	load		2019-06-07 18:23:44-07	12
2442	coding	binary_search_2	move_on	{"code":"def find_missing(arr):\\n    pass\\n"}	2019-06-07 18:23:46-07	12
2452	solution	binary_search_2	load		2019-06-07 18:23:47-07	12
2462	solution	binary_search_2	move_on		2019-06-07 18:23:48-07	12
2472	multi	post_workshop_survey	load		2019-06-07 18:23:48-07	12
2482	coding	trie_impl	load		2019-06-07 18:24:09-07	12
2492	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:24:13-07	12
2502	solution	trie_impl	load		2019-06-07 18:24:14-07	12
2512	solution	trie_impl	move_on		2019-06-07 18:24:16-07	12
2522	coding	trie_list_words	load		2019-06-07 18:24:17-07	12
2532	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:24:27-07	12
2542	solution	trie_list_words	load		2019-06-07 18:24:28-07	12
2552	solution	trie_list_words	move_on		2019-06-07 18:24:31-07	12
2562	coding	trie_prefix_suffix	load		2019-06-07 18:24:32-07	12
2572	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 18:24:34-07	12
2582	solution	trie_prefix_suffix	load		2019-06-07 18:24:34-07	12
2592	coding	trie_impl	load		2019-06-07 18:25:19-07	12
2602	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:25:21-07	12
2612	solution	trie_impl	load		2019-06-07 18:25:22-07	12
2622	solution	trie_impl	move_on		2019-06-07 18:25:23-07	12
2632	coding	trie_list_words	load		2019-06-07 18:25:25-07	12
2642	coding	trie_list_words	unload	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:25:50-07	12
2652	coding	trie_impl	load		2019-06-07 18:25:57-07	12
2662	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:25:59-07	12
2672	solution	trie_impl	load		2019-06-07 18:25:59-07	12
2682	solution	trie_impl	move_on		2019-06-07 18:26:02-07	12
2692	coding	trie_list_words	load		2019-06-07 18:26:04-07	12
2702	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:26:06-07	12
2732	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:36:21-07	12
2742	solution	trie_impl	load		2019-06-07 18:36:21-07	12
2752	coding	trie_impl	load		2019-06-07 18:42:49-07	12
2762	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 18:42:58-07	12
2772	solution	trie_impl	load		2019-06-07 18:42:59-07	12
2782	solution	trie_impl	move_on		2019-06-07 18:43:00-07	12
2792	coding	trie_list_words	load		2019-06-07 18:43:01-07	12
2802	coding	trie_list_words	unload	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 18:43:07-07	12
2812	coding	trie_impl	load		2019-06-07 19:18:14-07	12
2822	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:18:15-07	12
2832	solution	trie_impl	load		2019-06-07 19:18:16-07	12
2842	solution	trie_impl	move_on		2019-06-07 19:18:59-07	12
2852	coding	trie_list_words	load		2019-06-07 19:19:00-07	12
2862	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 19:19:02-07	12
2872	solution	trie_list_words	load		2019-06-07 19:19:02-07	12
2882	coding	trie_impl	load		2019-06-07 19:19:27-07	12
2892	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:19:29-07	12
2902	solution	trie_impl	load		2019-06-07 19:19:30-07	12
2912	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:20:25-07	12
2922	solution	trie_impl	load		2019-06-07 19:20:26-07	12
2932	coding	trie_impl	load		2019-06-07 19:21:07-07	12
2942	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:21:10-07	12
2952	solution	trie_impl	load		2019-06-07 19:21:11-07	12
2962	coding	trie_impl	load		2019-06-07 19:23:06-07	12
2972	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:23:11-07	12
2982	coding	trie_impl	unload	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:23:11-07	12
2992	solution	trie_impl	load		2019-06-07 19:23:12-07	12
3002	coding	trie_impl	load		2019-06-07 19:26:31-07	12
3012	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:26:33-07	12
3022	solution	trie_impl	load		2019-06-07 19:26:34-07	12
3032	coding	trie_impl	load		2019-06-07 19:27:49-07	12
3042	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:27:51-07	12
3052	solution	trie_impl	load		2019-06-07 19:27:51-07	12
3062	coding	trie_impl	load		2019-06-07 19:29:31-07	12
3072	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:29:35-07	12
3082	solution	trie_impl	load		2019-06-07 19:29:35-07	12
3092	coding	trie_impl	load		2019-06-07 19:43:07-07	12
3102	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:43:09-07	12
3112	coding	trie_impl	load		2019-06-07 19:45:26-07	12
3122	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:45:28-07	12
3132	coding	trie_impl	load		2019-06-07 19:47:29-07	12
15492	parsons	dfs_impl	drag	INFO	2019-06-13 01:11:07-07	2
3142	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:47:30-07	12
3152	solution	trie_impl	load		2019-06-07 19:47:31-07	12
3162	solution	trie_impl	move_on		2019-06-07 19:47:33-07	12
3172	coding	trie_list_words	load		2019-06-07 19:47:35-07	12
3182	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 19:47:56-07	12
3192	solution	trie_list_words	load		2019-06-07 19:47:56-07	12
3202	solution	trie_list_words	move_on		2019-06-07 19:48:08-07	12
3212	coding	trie_prefix_suffix	load		2019-06-07 19:48:09-07	12
3222	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 19:48:12-07	12
3232	solution	trie_prefix_suffix	load		2019-06-07 19:48:12-07	12
3242	solution	trie_prefix_suffix	move_on		2019-06-07 19:48:19-07	12
3252	coding	huffman_impl	load		2019-06-07 19:48:20-07	12
3262	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 19:48:23-07	12
3272	solution	huffman_impl	load		2019-06-07 19:48:23-07	12
3282	coding	trie_impl	load		2019-06-07 19:51:24-07	12
3292	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:51:38-07	12
3302	solution	trie_impl	load		2019-06-07 19:51:39-07	12
3312	solution	trie_impl	move_on		2019-06-07 19:51:47-07	12
3322	coding	trie_list_words	load		2019-06-07 19:51:48-07	12
3332	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 19:51:50-07	12
3342	solution	trie_list_words	load		2019-06-07 19:51:50-07	12
3352	solution	trie_list_words	move_on		2019-06-07 19:51:52-07	12
3362	coding	trie_prefix_suffix	load		2019-06-07 19:51:53-07	12
3372	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 19:52:00-07	12
3382	solution	trie_prefix_suffix	load		2019-06-07 19:52:01-07	12
3392	solution	trie_prefix_suffix	move_on		2019-06-07 19:52:02-07	12
3402	coding	huffman_impl	load		2019-06-07 19:52:03-07	12
3412	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 19:52:06-07	12
3422	solution	huffman_impl	load		2019-06-07 19:52:06-07	12
3432	coding	trie_impl	load		2019-06-07 19:54:06-07	12
3442	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 19:54:08-07	12
3452	solution	trie_impl	load		2019-06-07 19:54:09-07	12
3462	solution	trie_impl	move_on		2019-06-07 19:54:11-07	12
3472	coding	trie_list_words	load		2019-06-07 19:54:12-07	12
3482	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 19:54:24-07	12
3492	solution	trie_list_words	load		2019-06-07 19:54:25-07	12
3502	solution	trie_list_words	move_on		2019-06-07 19:54:26-07	12
3512	coding	trie_prefix_suffix	load		2019-06-07 19:54:27-07	12
3522	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 19:54:29-07	12
3532	solution	trie_prefix_suffix	load		2019-06-07 19:54:30-07	12
3542	solution	trie_prefix_suffix	move_on		2019-06-07 19:54:31-07	12
3552	coding	huffman_impl	load		2019-06-07 19:54:32-07	12
3562	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 19:54:34-07	12
3572	solution	huffman_impl	load		2019-06-07 19:54:35-07	12
3582	coding	trie_impl	load		2019-06-07 21:10:09-07	12
3592	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:10:12-07	12
3602	solution	trie_impl	load		2019-06-07 21:10:14-07	12
3612	coding	trie_impl	load		2019-06-07 21:11:01-07	2
3622	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:11:15-07	2
3632	solution	trie_impl	load		2019-06-07 21:11:15-07	2
3642	coding	trie_impl	load		2019-06-07 21:11:33-07	2
3652	coding	trie_impl	unload	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:11:34-07	2
3662	coding	trie_impl	load		2019-06-07 21:12:49-07	12
5952	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-10 18:46:45-07	22
3672	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:12:51-07	12
3682	solution	trie_impl	load		2019-06-07 21:12:51-07	12
3692	solution	trie_impl	move_on		2019-06-07 21:12:54-07	12
3702	coding	trie_list_words	load		2019-06-07 21:12:55-07	12
3712	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:13:08-07	12
3722	solution	trie_list_words	load		2019-06-07 21:13:09-07	12
3732	solution	trie_list_words	move_on		2019-06-07 21:13:11-07	12
3742	coding	trie_prefix_suffix	load		2019-06-07 21:13:12-07	12
3752	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:13:14-07	12
3762	solution	trie_prefix_suffix	load		2019-06-07 21:13:15-07	12
3772	solution	trie_prefix_suffix	move_on		2019-06-07 21:13:17-07	12
3782	coding	huffman_impl	load		2019-06-07 21:13:18-07	12
3792	coding	trie_impl	load		2019-06-07 21:13:40-07	12
3802	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:13:42-07	12
3812	solution	trie_impl	load		2019-06-07 21:13:42-07	12
3822	solution	trie_impl	move_on		2019-06-07 21:13:44-07	12
3832	coding	trie_list_words	load		2019-06-07 21:13:46-07	12
3842	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:13:49-07	12
3852	solution	trie_list_words	load		2019-06-07 21:13:49-07	12
3862	solution	trie_list_words	move_on		2019-06-07 21:13:51-07	12
3872	coding	trie_prefix_suffix	load		2019-06-07 21:13:52-07	12
3882	coding	trie_prefix_suffix	unload	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:15:15-07	12
3892	coding	huffman_impl	unload	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 21:15:17-07	12
3902	coding	trie_impl	load		2019-06-07 21:15:25-07	12
3912	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:15:27-07	12
3922	solution	trie_impl	load		2019-06-07 21:15:28-07	12
3932	coding	trie_impl	load		2019-06-07 21:15:37-07	12
3942	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:15:38-07	12
3952	solution	trie_impl	load		2019-06-07 21:15:39-07	12
3962	coding	trie_impl	load		2019-06-07 21:15:56-07	12
3972	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:15:59-07	12
3982	solution	trie_impl	load		2019-06-07 21:15:59-07	12
3992	coding	trie_impl	load		2019-06-07 21:16:28-07	12
4002	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:16:31-07	12
4012	solution	trie_impl	load		2019-06-07 21:16:31-07	12
4022	coding	trie_impl	load		2019-06-07 21:18:39-07	32
4032	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:18:41-07	32
4042	solution	trie_impl	load		2019-06-07 21:18:42-07	32
4052	solution	trie_impl	move_on		2019-06-07 21:18:44-07	32
4062	coding	trie_list_words	load		2019-06-07 21:18:45-07	32
4072	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:18:47-07	32
4082	solution	trie_list_words	load		2019-06-07 21:18:47-07	32
4092	solution	trie_list_words	move_on		2019-06-07 21:18:50-07	32
4102	coding	trie_prefix_suffix	load		2019-06-07 21:18:52-07	32
4112	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:18:53-07	32
4122	solution	trie_prefix_suffix	load		2019-06-07 21:18:54-07	32
4132	solution	trie_prefix_suffix	move_on		2019-06-07 21:18:55-07	32
4142	coding	huffman_impl	load		2019-06-07 21:18:56-07	32
4152	coding	huffman_impl	unload	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 21:19:53-07	32
4162	coding	trie_impl	load		2019-06-07 21:20:26-07	42
5962	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:46:46-07	22
5972	\N	\N	\N	\N	2019-06-10 18:47:14-07	\N
4172	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:20:28-07	42
4182	coding	trie_impl	load		2019-06-07 21:21:27-07	42
4192	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:21:30-07	42
4202	solution	trie_impl	load		2019-06-07 21:21:30-07	42
4212	solution	trie_impl	move_on		2019-06-07 21:21:32-07	42
4222	coding	trie_list_words	load		2019-06-07 21:21:33-07	42
4232	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:21:35-07	42
4242	solution	trie_list_words	load		2019-06-07 21:21:36-07	42
4252	solution	trie_list_words	move_on		2019-06-07 21:21:37-07	42
4262	coding	trie_prefix_suffix	load		2019-06-07 21:21:38-07	42
4272	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:21:40-07	42
4282	solution	trie_prefix_suffix	load		2019-06-07 21:21:41-07	42
4292	solution	trie_prefix_suffix	move_on		2019-06-07 21:21:42-07	42
4302	coding	huffman_impl	load		2019-06-07 21:21:43-07	42
4312	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 21:21:46-07	42
4322	solution	huffman_impl	load		2019-06-07 21:21:47-07	42
4332	solution	huffman_impl	move_on		2019-06-07 21:21:50-07	42
4342	coding	huffman_saved_bits	load		2019-06-07 21:21:51-07	42
4352	coding	trie_impl	load		2019-06-07 21:22:28-07	42
4362	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:22:30-07	42
4372	solution	trie_impl	load		2019-06-07 21:22:30-07	42
4382	solution	trie_impl	move_on		2019-06-07 21:22:32-07	42
4392	coding	trie_list_words	load		2019-06-07 21:22:33-07	42
4402	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:22:36-07	42
4412	solution	trie_list_words	load		2019-06-07 21:22:36-07	42
4422	solution	trie_list_words	move_on		2019-06-07 21:22:37-07	42
4432	coding	trie_prefix_suffix	load		2019-06-07 21:22:39-07	42
4442	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:22:40-07	42
4452	solution	trie_prefix_suffix	load		2019-06-07 21:22:41-07	42
4462	solution	trie_prefix_suffix	move_on		2019-06-07 21:22:42-07	42
4472	coding	huffman_impl	load		2019-06-07 21:22:43-07	42
4482	coding	huffman_impl	unload	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 21:25:05-07	42
4492	coding	huffman_saved_bits	unload	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 21:25:06-07	42
4502	coding	trie_impl	load		2019-06-07 21:25:38-07	42
4512	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:25:42-07	42
4522	solution	trie_impl	load		2019-06-07 21:25:42-07	42
4532	solution	trie_impl	move_on		2019-06-07 21:25:44-07	42
4542	coding	trie_list_words	load		2019-06-07 21:25:45-07	42
4552	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:25:47-07	42
4562	solution	trie_list_words	load		2019-06-07 21:25:47-07	42
4572	solution	trie_list_words	move_on		2019-06-07 21:25:49-07	42
4582	coding	trie_prefix_suffix	load		2019-06-07 21:25:50-07	42
4592	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:25:52-07	42
4602	solution	trie_prefix_suffix	load		2019-06-07 21:25:52-07	42
4612	solution	trie_prefix_suffix	move_on		2019-06-07 21:25:54-07	42
4622	coding	huffman_impl	load		2019-06-07 21:25:55-07	42
4632	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 21:25:57-07	42
4642	solution	huffman_impl	load		2019-06-07 21:25:57-07	42
4652	solution	huffman_impl	move_on		2019-06-07 21:25:59-07	42
4662	coding	huffman_saved_bits	load		2019-06-07 21:26:00-07	42
4672	coding	huffman_saved_bits	move_on	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 21:26:02-07	42
4682	solution	huffman_saved_bits	load		2019-06-07 21:26:03-07	42
4692	solution	huffman_saved_bits	move_on		2019-06-07 21:26:05-07	42
4702	coding	binary_search_1	load		2019-06-07 21:26:07-07	42
4712	coding	trie_impl	load		2019-06-07 21:26:15-07	42
7152	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n   node.setExit()\n	2019-06-10 19:22:45-07	22
4722	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:26:19-07	42
4732	solution	trie_impl	load		2019-06-07 21:26:19-07	42
4742	solution	trie_impl	move_on		2019-06-07 21:26:23-07	42
4752	coding	trie_list_words	load		2019-06-07 21:26:24-07	42
4762	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:26:27-07	42
4772	solution	trie_list_words	load		2019-06-07 21:26:27-07	42
4782	solution	trie_list_words	move_on		2019-06-07 21:26:29-07	42
4792	coding	trie_prefix_suffix	load		2019-06-07 21:26:30-07	42
4802	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:26:32-07	42
4812	solution	trie_prefix_suffix	load		2019-06-07 21:26:32-07	42
4822	solution	trie_prefix_suffix	move_on		2019-06-07 21:26:34-07	42
4832	coding	huffman_impl	load		2019-06-07 21:26:35-07	42
4842	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 21:26:37-07	42
4852	solution	huffman_impl	load		2019-06-07 21:26:38-07	42
4862	solution	huffman_impl	move_on		2019-06-07 21:26:42-07	42
4872	coding	huffman_saved_bits	load		2019-06-07 21:26:43-07	42
4882	coding	huffman_saved_bits	move_on	{"code":"def huffman_bits_saved(letters_to_frequency, message):\\n    # letters_to_frequency is a dictionary of characters to integers, message is a string\\n    huffman_tree_root = NodeList().generateHuffmanTree(letters_to_frequency)\\n    pass\\n"}	2019-06-07 21:26:46-07	42
4892	solution	huffman_saved_bits	load		2019-06-07 21:26:46-07	42
4902	solution	huffman_saved_bits	move_on		2019-06-07 21:26:48-07	42
4912	coding	binary_search_1	load		2019-06-07 21:26:49-07	42
4922	coding	trie_impl	load		2019-06-07 21:30:04-07	42
4932	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:30:07-07	42
4942	coding	trie_impl	load		2019-06-07 21:30:38-07	42
4952	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:30:41-07	42
4962	solution	trie_impl	load		2019-06-07 21:30:41-07	42
4972	solution	trie_impl	move_on		2019-06-07 21:30:44-07	42
4982	coding	trie_list_words	load		2019-06-07 21:30:45-07	42
4992	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:30:47-07	42
5002	solution	trie_list_words	load		2019-06-07 21:30:47-07	42
5012	solution	trie_list_words	move_on		2019-06-07 21:30:49-07	42
5022	coding	trie_prefix_suffix	load		2019-06-07 21:30:50-07	42
5032	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:30:52-07	42
5042	solution	trie_prefix_suffix	load		2019-06-07 21:30:52-07	42
5052	solution	trie_prefix_suffix	move_on		2019-06-07 21:30:54-07	42
5062	coding	huffman_impl	load		2019-06-07 21:30:55-07	42
5072	coding	trie_impl	load		2019-06-07 21:32:56-07	12
5082	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:32:58-07	12
5092	solution	trie_impl	load		2019-06-07 21:32:58-07	12
5102	solution	trie_impl	move_on		2019-06-07 21:33:53-07	12
5112	coding	trie_list_words	load		2019-06-07 21:33:55-07	12
5122	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:33:56-07	12
5132	solution	trie_list_words	load		2019-06-07 21:33:57-07	12
5142	coding	trie_prefix_suffix	load		2019-06-07 21:36:04-07	12
5152	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:36:05-07	12
5162	solution	trie_prefix_suffix	load		2019-06-07 21:36:06-07	12
5172	parsons	trie_impl	load		2019-06-07 21:39:22-07	52
5182	parsons	trie_impl	move_on		2019-06-07 21:39:31-07	52
5192	solution	trie_impl	load		2019-06-07 21:39:32-07	52
5202	solution	trie_impl	move_on		2019-06-07 21:39:34-07	52
5212	parsons	trie_list_words	load		2019-06-07 21:39:35-07	52
5222	parsons	trie_list_words	move_on		2019-06-07 21:39:37-07	52
5232	solution	trie_list_words	load		2019-06-07 21:39:37-07	52
5242	solution	trie_list_words	move_on		2019-06-07 21:39:39-07	52
5252	parsons	trie_prefix_suffix	load		2019-06-07 21:39:39-07	52
5262	parsons	trie_prefix_suffix	move_on		2019-06-07 21:39:41-07	52
5272	solution	trie_prefix_suffix	load		2019-06-07 21:39:42-07	52
5282	solution	trie_prefix_suffix	move_on		2019-06-07 21:39:44-07	52
5292	parsons	huffman_impl	load		2019-06-07 21:39:45-07	52
5302	parsons	huffman_impl	move_on		2019-06-07 21:39:51-07	52
5312	solution	huffman_impl	load		2019-06-07 21:39:51-07	52
5322	solution	huffman_impl	move_on		2019-06-07 21:39:53-07	52
5332	parsons	huffman_saved_bits	load		2019-06-07 21:39:54-07	52
5342	coding	trie_impl	load		2019-06-07 21:48:11-07	12
8992	solution	dfs_impl_id1	move_on		2019-06-11 08:23:24-07	82
5352	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:48:13-07	12
5362	solution	trie_impl	load		2019-06-07 21:48:13-07	12
5372	solution	trie_impl	move_on		2019-06-07 21:48:33-07	12
5382	coding	trie_list_words	load		2019-06-07 21:48:34-07	12
5392	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:48:36-07	12
5402	solution	trie_list_words	load		2019-06-07 21:48:36-07	12
5412	coding	trie_impl	load		2019-06-07 21:48:46-07	12
5422	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:48:48-07	12
5432	solution	trie_impl	load		2019-06-07 21:48:49-07	12
5442	solution	trie_list_words	move_on		2019-06-07 21:49:01-07	12
5452	coding	trie_prefix_suffix	load		2019-06-07 21:49:02-07	12
5462	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:49:04-07	12
5472	solution	trie_prefix_suffix	load		2019-06-07 21:49:04-07	12
5482	solution	trie_prefix_suffix	move_on		2019-06-07 21:49:06-07	12
5492	coding	huffman_impl	load		2019-06-07 21:49:07-07	12
5502	coding	huffman_impl	move_on	{"code":"def huffman_encode(letters_to_frequency, message):\\n    node_list = NodeList()\\n"}	2019-06-07 21:49:09-07	12
5512	solution	huffman_impl	load		2019-06-07 21:49:10-07	12
5522	solution	huffman_impl	move_on		2019-06-07 21:49:11-07	12
5532	coding	huffman_saved_bits	load		2019-06-07 21:49:12-07	12
5542	coding	trie_impl	load		2019-06-07 21:49:23-07	12
5552	coding	trie_impl	move_on	{"code":"class Trie:\\n    def addWord(self, word):\\n        # Adds word to the Trie.\\n        pass\\n\\n    def isPrefix(self, str):\\n        # Returns True if this prefix exists in the Trie, False otherwise.\\n        pass\\n\\n    def isWord(self, word):\\n        # Returns True if this word exists in the Trie, False otherwise.\\n        pass\\n"}	2019-06-07 21:49:25-07	12
5562	solution	trie_impl	load		2019-06-07 21:49:25-07	12
5572	solution	trie_impl	move_on		2019-06-07 21:50:16-07	12
5582	coding	trie_list_words	load		2019-06-07 21:50:17-07	12
5592	coding	trie_list_words	move_on	{"code":"def extract_words(trie):\\n    # trie is a Trie that has already been filled with words.\\n    pass\\n"}	2019-06-07 21:50:19-07	12
5602	solution	trie_list_words	load		2019-06-07 21:50:19-07	12
5612	solution	trie_list_words	move_on		2019-06-07 21:50:21-07	12
5622	coding	trie_prefix_suffix	load		2019-06-07 21:50:22-07	12
5632	coding	trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n    # valid_words is a list of strings, prefix_query and suffix_query are both string\\n    trie = Trie()\\n    pass\\n"}	2019-06-07 21:50:24-07	12
5642	solution	trie_prefix_suffix	load		2019-06-07 21:50:24-07	12
5652	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-08 00:30:22-07	2
5662	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-08 00:31:04-07	2
5672	parsons	dfs_impl	load		2019-06-08 00:31:13-07	2
5682	parsons	dfs_impl	move_on		2019-06-08 00:31:16-07	2
5692	solution	dfs_impl	load		2019-06-08 00:31:16-07	2
5702	parsons	dfs_impl	load		2019-06-08 00:33:47-07	2
5712	parsons	dfs_impl	move_on		2019-06-08 00:33:51-07	2
5722	solution	dfs_impl	load		2019-06-08 00:33:52-07	2
5732	solution	dfs_impl	move_on		2019-06-08 00:33:57-07	2
5742	parsons	dfs_impl	load		2019-06-08 00:34:16-07	2
5752	parsons	dfs_impl	load		2019-06-08 00:34:22-07	2
5762	parsons	dfs_impl	move_on		2019-06-08 00:34:32-07	2
5772	solution	dfs_impl	load		2019-06-08 00:34:33-07	2
5782	parsons	dfs_impl	load		2019-06-08 00:47:49-07	2
5792	parsons	dfs_impl	move_on		2019-06-08 00:47:51-07	2
5802	solution	dfs_impl	load		2019-06-08 00:47:51-07	2
5812	solution	dfs_impl	move_on		2019-06-08 00:47:54-07	2
5822	parsons	dfs_impl	load		2019-06-10 18:35:25-07	12
5832	parsons	dfs_impl	move_on		2019-06-10 18:35:28-07	12
5842	solution	dfs_impl	load		2019-06-10 18:35:29-07	12
5852	parsons	dfs_impl	move_on		2019-06-10 18:36:00-07	12
5862	solution	dfs_impl	load		2019-06-10 18:36:01-07	12
5872	solution	dfs_impl	move_on		2019-06-10 18:36:03-07	12
5882	solution	dfs_impl	move_on		2019-06-10 18:36:17-07	12
5892	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 18:44:43-07	22
5902	solution	dfs_impl	move_on		2019-06-10 18:45:35-07	12
5912	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 18:45:41-07	22
5922	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 18:45:42-07	22
5932	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 18:45:46-07	22
5942	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-10 18:45:47-07	22
12552	parsons	dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-12 00:02:08-07	2
5982	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:48:15-07	22
5992	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:48:57-07	22
6002	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:48:58-07	22
6012	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:48:59-07	22
6022	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:00-07	22
6032	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:09-07	22
6042	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:10-07	22
6052	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:32-07	22
6062	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-10 18:49:34-07	22
6072	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-10 18:49:39-07	22
6082	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:40-07	22
6092	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:41-07	22
6102	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:41-07	22
6112	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:53-07	22
6122	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:54-07	22
6132	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:58-07	22
6142	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:58-07	22
6152	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:49:59-07	22
6162	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:50:00-07	22
6172	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:50:04-07	22
6182	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:50:05-07	22
6192	parsons	dfs_impl_3	unload	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:50:06-07	22
6202	parsons	dfs_impl_3	load	def dfs(graph):#0given\n  for node in graph:#1given\n    if not node.getExit():#2given\n      visit(node)#3given\ndef visit(node):#0given\n  node.setEnter()#1given\n  for neighbor in node.getNeighbors():#1given\n    if neighbor.getEnter():#2given\n      continue#3given\n    visit(neighbor)#2given\n	2019-06-10 18:50:07-07	22
6212	solution	dfs_impl	move_on		2019-06-10 18:51:36-07	12
6222	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-10 18:51:52-07	2
6232	parsons	demo	move_on	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-10 18:51:58-07	2
6242	parsons	dfs_impl	load		2019-06-10 18:52:10-07	2
6252	parsons	dfs_impl	move_on		2019-06-10 18:52:13-07	2
6262	solution	dfs_impl	load		2019-06-10 18:52:13-07	2
6272	solution	dfs_impl	move_on		2019-06-10 18:52:15-07	2
6282	parsons	dfs_impl	load		2019-06-10 18:57:39-07	2
6292	parsons	dfs_impl	move_on		2019-06-10 18:57:42-07	2
6302	solution	dfs_impl	load		2019-06-10 18:57:43-07	2
6312	solution	dfs_impl	move_on		2019-06-10 18:57:50-07	2
6322	solution	dfs_impl	move_on		2019-06-10 18:58:25-07	2
6332	solution	dfs_impl	move_on		2019-06-10 19:01:17-07	2
6342	parsons	dfs_impl_3	load	  .set()safdblanknode #blankExit\n	2019-06-10 19:04:52-07	22
6352	parsons	dfs_impl_3	unload	  .set()safdblanknode #blankExit\n	2019-06-10 19:05:09-07	22
6362	parsons	dfs_impl_3	load	  .set()safdblanknode #blankExit\n	2019-06-10 19:05:10-07	22
6372	parsons	dfs_impl_3	unload	  .set()safdblanknode #blankExit\n	2019-06-10 19:05:11-07	22
6382	parsons	dfs_impl_3	load	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n	2019-06-10 19:05:11-07	22
6392	solution	dfs_impl	move_on		2019-06-10 19:05:37-07	2
6402	solution	dfs_impl	move_on		2019-06-10 19:05:45-07	2
6412	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-10 19:06:00-07	2
6422	parsons	dfs_impl	load		2019-06-10 19:06:02-07	2
6432	parsons	dfs_impl	move_on		2019-06-10 19:06:05-07	2
6442	solution	dfs_impl	load		2019-06-10 19:06:05-07	2
6452	solution	dfs_impl	move_on		2019-06-10 19:06:09-07	2
6462	parsons	dfs_impl	load		2019-06-10 19:07:47-07	2
6472	parsons	dfs_impl	move_on		2019-06-10 19:07:49-07	2
6482	solution	dfs_impl	load		2019-06-10 19:07:49-07	2
6492	solution	dfs_impl	move_on		2019-06-10 19:07:51-07	2
6502	parsons	dfs_impl_3	load	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:08:39-07	22
6512	solution	dfs_impl	move_on		2019-06-10 19:08:57-07	2
6522	parsons	dfs_impl	load		2019-06-10 19:11:04-07	2
6532	parsons	dfs_impl	move_on		2019-06-10 19:11:05-07	2
6542	solution	dfs_impl	load		2019-06-10 19:11:06-07	2
6552	solution	dfs_impl	move_on		2019-06-10 19:11:07-07	2
6562	solution	dfs_impl	load		2019-06-10 19:11:08-07	2
6572	solution	dfs_impl	move_on		2019-06-10 19:11:11-07	2
6582	solution	dfs_impl	load		2019-06-10 19:11:12-07	2
6592	solution	dfs_impl	move_on		2019-06-10 19:11:20-07	2
6602	solution	dfs_impl	load		2019-06-10 19:11:20-07	2
6612	solution	dfs_impl	move_on		2019-06-10 19:11:48-07	2
6622	solution	dfs_impl	load		2019-06-10 19:11:48-07	2
6632	solution	dfs_impl	move_on		2019-06-10 19:11:51-07	2
6642	solution	dfs_impl	load		2019-06-10 19:11:51-07	2
6652	solution	dfs_impl	move_on		2019-06-10 19:11:53-07	2
6662	solution	dfs_impl	load		2019-06-10 19:11:54-07	2
6672	parsons	dfs_impl	load		2019-06-10 19:17:57-07	2
6682	parsons	dfs_impl	move_on		2019-06-10 19:18:00-07	2
6692	solution	dfs_impl_id1	load		2019-06-10 19:18:00-07	2
6702	solution	dfs_impl_id1	move_on		2019-06-10 19:18:02-07	2
6712	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:18:03-07	2
6722	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:18:13-07	2
6732	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:18:14-07	2
6742	parsons	dfs_impl_3	load	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:18:17-07	22
6752	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:18:26-07	2
6762	solution	dfs_impl_id2	load		2019-06-10 19:18:27-07	2
6772	solution	dfs_impl_id2	move_on		2019-06-10 19:18:33-07	2
6782	parsons	dfs_impl_3	unload	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:18:43-07	22
6792	parsons	dfs_impl_3	load	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:18:44-07	22
6802	parsons	dfs_impl	load		2019-06-10 19:19:02-07	2
6812	parsons	dfs_impl	load		2019-06-10 19:19:05-07	2
12562	solution	dfs_impl_id1	load		2019-06-12 00:02:08-07	2
6822	parsons	dfs_impl_3	unload	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:19:09-07	22
6832	parsons	dfs_impl_3	load	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:19:11-07	22
6842	parsons	dfs_impl	move_on		2019-06-10 19:19:15-07	2
6852	solution	dfs_impl_id1	load		2019-06-10 19:19:15-07	2
6862	solution	dfs_impl_id1	move_on		2019-06-10 19:19:22-07	2
6872	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:19:23-07	2
6882	parsons	dfs_impl_3	unload	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:19:24-07	22
6892	parsons	dfs_impl_3	load	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  .set()safd#blanknode #blankExit\n	2019-06-10 19:19:25-07	22
6902	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:19:32-07	2
6912	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:19:32-07	2
6922	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:19:47-07	2
6932	solution	dfs_impl_id2	load		2019-06-10 19:19:47-07	2
6942	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:20:09-07	2
6952	solution	dfs_impl_id2	load		2019-06-10 19:20:10-07	2
6962	solution	dfs_impl_id2	move_on		2019-06-10 19:20:15-07	2
6972	parsons	dfs_impl	load		2019-06-10 19:21:00-07	2
6982	parsons	dfs_impl	move_on		2019-06-10 19:21:03-07	2
6992	solution	dfs_impl_id1	load		2019-06-10 19:21:03-07	2
7002	solution	dfs_impl_id1	move_on		2019-06-10 19:21:05-07	2
7012	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:21:06-07	2
7022	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:21:09-07	2
7032	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:21:10-07	2
7042	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:21:17-07	2
7052	solution	dfs_impl_id2	load		2019-06-10 19:21:18-07	2
7062	parsons	dfs_impl_3	load	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  node .setExit()safd\n	2019-06-10 19:21:40-07	22
7072	solution	dfs_impl_id2	move_on		2019-06-10 19:21:48-07	2
7082	parsons	dfs_impl_3	unload	def dfs(graph):safd\n  for node in graph:safd\n    if not node.getExit():safd\n      visit(node)safd\ndef visit(node):safd\n  node.setEnter()safd\n  for neighbor in node.getNeighbors():safd\n    if neighbor.getEnter():safd\n      continuesafd\n    visit(neighbor)safd\n  node .setExit()safd\n	2019-06-10 19:21:50-07	22
7092	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node .setExit()\n	2019-06-10 19:21:51-07	22
7102	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node .setExit()\n	2019-06-10 19:22:04-07	22
7112	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-10 19:22:07-07	22
7122	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-10 19:22:08-07	22
7132	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-10 19:22:15-07	22
7142	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n   .setExit()\n	2019-06-10 19:22:17-07	22
12572	parsons	dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-12 00:02:18-07	2
7162	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n   node.setExit()\n	2019-06-10 19:22:59-07	22
7172	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n   node.setExit()\n	2019-06-10 19:23:12-07	22
7182	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n   node.setExit()\n	2019-06-10 19:23:38-07	22
7192	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n     node.setExit()\n	2019-06-10 19:23:53-07	22
7202	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n node.setExit()\n	2019-06-10 19:23:56-07	22
7212	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n   node.setExit()\n	2019-06-10 19:23:59-07	22
7222	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:24:53-07	22
7232	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:24:54-07	22
7242	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 19:25:02-07	22
7252	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:25:03-07	22
7262	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:25:06-07	22
7272	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n    neighbor.setExit()\n	2019-06-10 19:25:33-07	22
7282	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n    neighbor.setExit()\n	2019-06-10 19:25:49-07	22
7292	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:25:50-07	22
7302	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 19:25:53-07	22
7312	parsons	dfs_impl	load		2019-06-10 20:29:10-07	2
7322	parsons	dfs_impl	move_on		2019-06-10 20:29:12-07	2
7332	solution	dfs_impl_id1	load		2019-06-10 20:29:13-07	2
7342	solution	dfs_impl_id1	move_on		2019-06-10 20:29:19-07	2
7352	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 20:29:20-07	2
7362	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 20:29:26-07	2
7372	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 20:29:27-07	2
7382	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 20:29:28-07	2
7392	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 20:29:31-07	2
7402	solution	dfs_impl_id2	load		2019-06-10 20:29:31-07	2
7412	solution	dfs_impl_id2	move_on		2019-06-10 20:29:34-07	2
7422	parsons	dfs_impl	load		2019-06-10 22:15:42-07	2
7432	parsons	dfs_impl	move_on		2019-06-10 22:15:45-07	2
7442	solution	dfs_impl_id1	load		2019-06-10 22:15:45-07	2
7452	solution	dfs_impl_id1	move_on		2019-06-10 22:15:47-07	2
7462	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 22:15:47-07	2
7472	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 22:15:49-07	2
13132	solution	dfs_impl_id1	move_on		2019-06-12 22:08:32-07	42
14192	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  my code here \\n  \\n"}	2019-06-12 23:35:49-07	42
7482	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 22:15:50-07	2
7492	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 22:15:52-07	2
7502	solution	dfs_impl_id2	load		2019-06-10 22:15:53-07	2
7512	solution	dfs_impl_id2	move_on		2019-06-10 22:15:55-07	2
7522	solution	dfs_impl_id1	move_on		2019-06-10 22:16:10-07	2
7532	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 22:16:11-07	2
7542	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 22:16:13-07	2
7552	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 22:16:14-07	2
7562	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 22:16:16-07	2
7572	parsons	dfs_impl	load		2019-06-10 22:17:52-07	2
7582	parsons	dfs_impl	move_on		2019-06-10 22:17:54-07	2
7592	solution	dfs_impl_id1	load		2019-06-10 22:17:54-07	2
7602	solution	dfs_impl_id1	move_on		2019-06-10 22:17:56-07	2
7612	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 22:17:57-07	2
7622	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 22:18:10-07	2
7632	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 22:18:11-07	2
7642	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 22:18:14-07	2
7652	solution	dfs_impl_id2	load		2019-06-10 22:18:14-07	2
7662	parsons	dfs_impl	load		2019-06-10 22:25:04-07	2
7672	parsons	dfs_impl	move_on		2019-06-10 22:25:06-07	2
7682	solution	dfs_impl_id1	load		2019-06-10 22:25:07-07	2
7692	parsons	dfs_impl	load		2019-06-10 23:00:02-07	2
7702	parsons	dfs_impl	move_on		2019-06-10 23:00:05-07	2
7712	solution	dfs_impl_id1	load		2019-06-10 23:00:05-07	2
7722	solution	dfs_impl_id1	move_on		2019-06-10 23:00:06-07	2
7732	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 23:00:07-07	2
7742	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 23:00:09-07	2
7752	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 23:00:10-07	2
7762	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-10 23:00:12-07	2
7772	solution	dfs_impl_id2	load		2019-06-10 23:00:12-07	2
7782	solution	dfs_impl_id2	move_on		2019-06-10 23:00:15-07	2
7792	coding	dfs_impl	load		2019-06-10 23:02:00-07	22
7802	coding	dfs_impl	submit	{"code":"  def dfs(graph):\\n    for node in graph:\\n      if not node.getExit():\\n        visit(node)\\n\\n  def visit(node):\\n    node.setEnter()\\n    for neighbor in node.getNeighbors():\\n      if neighbor.getEnter():\\n        continue\\n      visit(neighbor)\\n    node.setExit()"}	2019-06-10 23:02:04-07	22
7812	coding	dfs_impl	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected indent (<string>, line 1)</span><br /></div>	2019-06-10 23:02:04-07	22
7822	coding	dfs_impl	submit	{"code":"def dfs(graph):\\n    for node in graph:\\n      if not node.getExit():\\n        visit(node)\\n\\ndef visit(node):\\n    node.setEnter()\\n    for neighbor in node.getNeighbors():\\n      if neighbor.getEnter():\\n        continue\\n      visit(neighbor)\\n    node.setExit()"}	2019-06-10 23:02:10-07	22
7832	coding	dfs_impl	results	<div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'B'], ['B', 'D'], ['A', 'C'], ['C', 'D'], ['E', 'A']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDEFG', [['A', 'D'], ['D', 'A'], ['E', 'A'], ['A', 'B'], ['B', 'F'], ['F', 'G'], ['A', 'C'], ['C', 'G']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDEFGH', [['A', 'B'], ['A', 'C'], ['B', 'D'], ['B', 'E'], ['C', 'F'], ['D', 'G'], ['D', 'H']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'B'], ['B', 'C'], ['C', 'D'], ['D', 'A'], ['D', 'E'], ['C', 'E']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'D'], ['B', 'A'], ['B', 'D'], ['A', 'C'], ['C', 'E'], ['D', 'E']])</code>.</span><br /></div>	2019-06-10 23:02:11-07	22
7842	coding	dijkstras_1	load		2019-06-10 23:04:11-07	22
14202	solution	dfs_impl_id1	load		2019-06-12 23:35:49-07	42
7852	coding	dijkstras_1	submit	{"code":"def dijkstra(graph, source):\\n    unfinished_vertices = []\\n\\n    for vertex in graph:\\n      vertex.distance = float(\\"inf\\")\\n      unfinished_vertices.append(vertex)\\n\\n    source.distance = 0\\n    source.parent = None\\n\\n    while len(unfinished_vertices) > 0:\\n      next_closest_vertex = min(unfinished_vertices, key=lambda vertex: vertex.distance)\\n      unfinished_vertices.remove(next_closest_vertex)\\n      for neighbor, neighbor_distance in next_closest_vertex.neighbors.items():\\n        new_distance = next_closest_vertex.distance + neighbor_distance\\n        if new_distance < neighbor.distance:\\n          neighbor.distance = new_distance\\n          neighbor.parent = next_closest_vertex\\n"}	2019-06-10 23:04:15-07	22
7862	coding	dijkstras_1	results	<div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('A')</code>.</span><br /><span class="msg">Expected result to be <code>[0, null]</code> , your code returned <code>[0, null]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('C')</code>.</span><br /><span class="msg">Expected result to be <code>[5, "A"]</code> , your code returned <code>[5, "A"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('B')</code>.</span><br /><span class="msg">Expected result to be <code>[2, "A"]</code> , your code returned <code>[2, "A"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('D')</code>.</span><br /><span class="msg">Expected result to be <code>[3, "A"]</code> , your code returned <code>[3, "A"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('G')</code>.</span><br /><span class="msg">Expected result to be <code>[6, "D"]</code> , your code returned <code>[6, "D"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('E')</code>.</span><br /><span class="msg">Expected result to be <code>[5, "B"]</code> , your code returned <code>[5, "B"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('F')</code>.</span><br /><span class="msg">Expected result to be <code>[6, "E"]</code> , your code returned <code>[6, "E"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('H')</code>.</span><br /><span class="msg">Expected result to be <code>[7, "E"]</code> , your code returned <code>[7, "E"]</code></span> <br /></div>	2019-06-10 23:04:16-07	22
7872	coding	dijkstras_1	unload	{"code":"def dijkstra(graph, source):\\n    unfinished_vertices = []\\n\\n    for vertex in graph:\\n      vertex.distance = float(\\"inf\\")\\n      unfinished_vertices.append(vertex)\\n\\n    source.distance = 0\\n    source.parent = None\\n\\n    while len(unfinished_vertices) > 0:\\n      next_closest_vertex = min(unfinished_vertices, key=lambda vertex: vertex.distance)\\n      unfinished_vertices.remove(next_closest_vertex)\\n      for neighbor, neighbor_distance in next_closest_vertex.neighbors.items():\\n        new_distance = next_closest_vertex.distance + neighbor_distance\\n        if new_distance < neighbor.distance:\\n          neighbor.distance = new_distance\\n          neighbor.parent = next_closest_vertex\\n"}	2019-06-10 23:09:20-07	22
7882	coding	dijkstras_1	unload	{"code":"def dijkstra(graph, source):\\n    unfinished_vertices = []\\n\\n    for vertex in graph:\\n      vertex.distance = float(\\"inf\\")\\n      unfinished_vertices.append(vertex)\\n\\n    source.distance = 0\\n    source.parent = None\\n\\n    while len(unfinished_vertices) > 0:\\n      next_closest_vertex = min(unfinished_vertices, key=lambda vertex: vertex.distance)\\n      unfinished_vertices.remove(next_closest_vertex)\\n      for neighbor, neighbor_distance in next_closest_vertex.neighbors.items():\\n        new_distance = next_closest_vertex.distance + neighbor_distance\\n        if new_distance < neighbor.distance:\\n          neighbor.distance = new_distance\\n          neighbor.parent = next_closest_vertex\\n"}	2019-06-10 23:09:20-07	22
7892	coding	dijkstras_1	load		2019-06-10 23:09:22-07	22
7902	coding	dijkstras_1	submit	{"code":"def dijkstra(graph, source):\\n    unfinished_vertices = []\\n\\n    for vertex in graph:\\n      vertex.distance = float(\\"inf\\")\\n      unfinished_vertices.append(vertex)\\n\\n    source.distance = 0\\n    source.parent = None\\n\\n    while len(unfinished_vertices) > 0:\\n      next_closest_vertex = min(unfinished_vertices, key=lambda vertex: vertex.distance)\\n      unfinished_vertices.remove(next_closest_vertex)\\n      for neighbor, neighbor_distance in next_closest_vertex.neighbors.items():\\n        new_distance = next_closest_vertex.distance + neighbor_distance\\n        if new_distance < neighbor.distance:\\n          neighbor.distance = new_distance\\n          neighbor.parent = next_closest_vertex\\n"}	2019-06-10 23:09:26-07	22
7912	coding	dijkstras_1	results	<div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('A')</code>.</span><br /><span class="msg">Expected result to be <code>[0, null]</code> , your code returned <code>[0, null]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('C')</code>.</span><br /><span class="msg">Expected result to be <code>[5, "A"]</code> , your code returned <code>[5, "A"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('B')</code>.</span><br /><span class="msg">Expected result to be <code>[2, "A"]</code> , your code returned <code>[2, "A"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('D')</code>.</span><br /><span class="msg">Expected result to be <code>[3, "A"]</code> , your code returned <code>[3, "A"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('G')</code>.</span><br /><span class="msg">Expected result to be <code>[6, "D"]</code> , your code returned <code>[6, "D"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('E')</code>.</span><br /><span class="msg">Expected result to be <code>[5, "B"]</code> , your code returned <code>[5, "B"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('F')</code>.</span><br /><span class="msg">Expected result to be <code>[6, "E"]</code> , your code returned <code>[6, "E"]</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>dijkstras_test('H')</code>.</span><br /><span class="msg">Expected result to be <code>[7, "E"]</code> , your code returned <code>[7, "E"]</code></span> <br /></div>	2019-06-10 23:09:26-07	22
7922	coding	dijkstras_1	submit	{"code":"def dijkstra(graph, source):\\n    unfinished_vertices = []\\n\\n    for vertex in graph:\\n      vertex.distance = float(\\"inf\\")\\n      unfinished_vertices.append(vertex)\\n\\n    source.distance = 0\\n    source.parent = None\\n\\n    while len(unfinished_vertices) > 0:\\n      next_closest_vertex = min(unfinished_vertices, key=lambda vertex: vertex.distance)\\n      unfinished_vertices.remove(next_closest_vertex)\\n      for neighbor, neighbor_distance in next_closest_vertex.neighbors.items():\\n        new_distance = next_closest_vertex.distance + neighbor_distance\\n        if new_distance < neighbor.distance:\\n          neighbor.distance = new_distance\\n          neighbor.parent = next_closest_vertex23\\n"}	2019-06-10 23:09:30-07	22
14212	coding	dfs_impl	load		2019-06-12 23:36:02-07	42
7932	coding	dijkstras_1	results	<div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('A')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('C')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('B')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('D')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('G')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('E')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('F')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dijkstras_test('H')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'next_closest_vertex23' is not defined, line 18</span><br /></div>	2019-06-10 23:09:30-07	22
7942	solution	dfs_impl_id1	load		2019-06-10 23:12:08-07	22
7952	coding	dfs_impl	load		2019-06-10 23:49:31-07	22
7962	parsons	dfs_impl	load		2019-06-10 23:51:19-07	22
7972	parsons	dfs_impl	unload		2019-06-10 23:51:25-07	22
7982	parsons	dfs_impl_1	load	def dfs(graph):\n  # graph is a list of Nodes\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 23:51:26-07	22
7992	parsons	dfs_impl_1	unload	def dfs(graph):\n  # graph is a list of Nodes\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-10 23:51:32-07	22
8002	coding	dfs_impl_1	load		2019-06-10 23:51:34-07	22
8012	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:02:13-07	2
8022	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:02:34-07	2
8032	parsons	dfs_impl	load		2019-06-11 08:03:17-07	62
8042	parsons	dfs_impl	load		2019-06-11 08:03:41-07	62
8052	parsons	dfs_impl	submit		2019-06-11 08:04:09-07	62
8062	parsons	dfs_impl	move_on		2019-06-11 08:04:14-07	62
8072	solution	dfs_impl_id1	load		2019-06-11 08:04:16-07	62
8082	solution	dfs_impl_id1	load		2019-06-11 08:05:20-07	62
8092	solution	dfs_impl_id1	load		2019-06-11 08:05:22-07	62
8102	solution	dfs_impl_id1	load		2019-06-11 08:05:23-07	62
8112	solution	dfs_impl_id1	load		2019-06-11 08:05:23-07	62
8122	solution	dfs_impl_id1	move_on		2019-06-11 08:06:07-07	62
8132	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:06:09-07	62
8142	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\n  node.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:06:46-07	62
8152	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\n  node.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n  visit(neighbor)\n  node.setExit()\n	2019-06-11 08:07:29-07	62
8162	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\n  node.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:07:33-07	62
8172	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n    visit(node)\n  node.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:07:35-07	62
8182	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n    visit(node)\nnode.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:07:37-07	62
8192	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n  if not node.getExit():\n    visit(node)\nnode.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:07:40-07	62
8202	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n  if not node.getExit():\n  visit(node)\nnode.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:07:43-07	62
8212	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n  if not node.getExit():\n  visit(node)\nnode.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n      continue\n  visit(neighbor)\n  node.setExit()\n	2019-06-11 08:08:04-07	62
8222	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n  if not node.getExit():\n  visit(node)\nnode.setEnter()\n    def visit(node):\n  for neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n    continue\n  visit(neighbor)\n  node.setExit()\n	2019-06-11 08:08:13-07	62
8232	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n  if not node.getExit():\n  visit(node)\nnode.setEnter()\n    def visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n    continue\n  visit(neighbor)\n  node.setExit()\n	2019-06-11 08:08:15-07	62
8242	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\nif not node.getExit():\n  visit(node)\nnode.setEnter()\n    def visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n    continue\n  visit(neighbor)\n  node.setExit()\n	2019-06-11 08:08:18-07	62
8252	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\nif not node.getExit():\n  visit(node)\nnode.setEnter()\n  def visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n    continue\n  visit(neighbor)\n  node.setExit()\n	2019-06-11 08:08:20-07	62
8262	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\nif not node.getExit():\n  visit(node)\nnode.setEnter()\n  def visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n  continue\n  visit(neighbor)\n  node.setExit()\n	2019-06-11 08:08:22-07	62
8272	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\nif not node.getExit():\n  visit(node)\nnode.setEnter()\n  def visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n  continue\nvisit(neighbor)\n  node.setExit()\n	2019-06-11 08:08:24-07	62
8282	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\nif not node.getExit():\n  visit(node)\nnode.setEnter()\n  def visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n  continue\nvisit(neighbor)\nnode.setExit()\n	2019-06-11 08:08:26-07	62
8292	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\nif not node.getExit():\n  visit(node)\nnode.setEnter()\ndef visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n  continue\nvisit(neighbor)\nnode.setExit()\n	2019-06-11 08:08:28-07	62
14072	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:49-07	2
8302	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\nif not node.getExit():\n  visit(node)\nnode.setEnter()\ndef visit(node):\nfor neighbor in node.getNeighbors():\n  if neighbor.getEnter():\n  continue\nvisit(neighbor)\nnode.setExit()\n	2019-06-11 08:08:29-07	62
8312	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:08:30-07	62
8322	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\nprint()\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:09:00-07	62
8332	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\nprint()\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:10:17-07	62
8342	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\nprint()\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:10:19-07	62
8352	solution	dfs_impl_id2	load		2019-06-11 08:10:20-07	62
8362	parsons	dfs_impl	load		2019-06-11 08:12:51-07	62
8372	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:16:29-07	2
8382	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:16:31-07	2
8392	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:16:33-07	2
8402	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:16:34-07	2
8412	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:17:26-07	2
8422	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:17:28-07	2
8432	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:17:30-07	2
8442	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:17:32-07	2
8452	parsons	dfs_impl	load		2019-06-11 08:18:14-07	62
8462	parsons	dfs_impl	load		2019-06-11 08:18:19-07	62
8472	parsons	dfs_impl	load		2019-06-11 08:18:22-07	62
8482	parsons	dfs_impl	load		2019-06-11 08:18:52-07	72
8492	parsons	dfs_impl	unload		2019-06-11 08:19:12-07	62
8502	parsons	dfs_impl	unload		2019-06-11 08:19:14-07	62
8512	parsons	dfs_impl	unload		2019-06-11 08:19:15-07	62
8522	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:19:34-07	2
8532	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:19:36-07	2
8542	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:19:38-07	2
8552	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:19:56-07	2
8562	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:19:58-07	2
8572	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 08:20:00-07	2
8582	parsons	dfs_impl	load		2019-06-11 08:20:50-07	102
8592	parsons	dfs_impl	load		2019-06-11 08:20:53-07	92
8602	parsons	dfs_impl	load		2019-06-11 08:20:55-07	82
8612	parsons	dfs_impl	submit		2019-06-11 08:21:16-07	72
8622	parsons	dfs_impl	submit		2019-06-11 08:21:19-07	102
8632	parsons	dfs_impl	submit		2019-06-11 08:21:19-07	102
8642	parsons	dfs_impl	submit		2019-06-11 08:21:32-07	82
8652	parsons	dfs_impl	submit		2019-06-11 08:21:33-07	72
8662	parsons	dfs_impl	submit		2019-06-11 08:21:34-07	72
8672	parsons	dfs_impl	submit		2019-06-11 08:21:35-07	102
8682	parsons	dfs_impl	submit		2019-06-11 08:21:35-07	102
8692	parsons	dfs_impl	submit		2019-06-11 08:21:36-07	92
8702	parsons	dfs_impl	submit		2019-06-11 08:21:37-07	92
8712	parsons	dfs_impl	submit		2019-06-11 08:21:37-07	72
8722	parsons	dfs_impl	submit		2019-06-11 08:21:38-07	72
8732	parsons	dfs_impl	submit		2019-06-11 08:21:39-07	102
8742	parsons	dfs_impl	submit		2019-06-11 08:21:39-07	102
8752	parsons	dfs_impl	submit		2019-06-11 08:21:40-07	82
8762	parsons	dfs_impl	submit		2019-06-11 08:21:40-07	82
8772	parsons	dfs_impl	submit		2019-06-11 08:21:41-07	92
8782	parsons	dfs_impl	submit		2019-06-11 08:21:42-07	92
8792	parsons	dfs_impl	submit		2019-06-11 08:22:09-07	72
8802	parsons	dfs_impl	submit		2019-06-11 08:22:11-07	82
8812	parsons	dfs_impl	submit		2019-06-11 08:22:12-07	92
8822	parsons	dfs_impl	submit		2019-06-11 08:22:13-07	102
8832	parsons	dfs_impl	submit		2019-06-11 08:22:15-07	102
8842	parsons	dfs_impl	submit		2019-06-11 08:22:16-07	92
8852	parsons	dfs_impl	submit		2019-06-11 08:22:17-07	82
8862	parsons	dfs_impl	submit		2019-06-11 08:22:18-07	72
8872	parsons	dfs_impl	submit		2019-06-11 08:22:35-07	72
8882	parsons	dfs_impl	submit		2019-06-11 08:22:35-07	82
8892	parsons	dfs_impl	move_on		2019-06-11 08:22:41-07	82
8902	solution	dfs_impl_id1	load		2019-06-11 08:22:42-07	82
8912	parsons	dfs_impl	move_on		2019-06-11 08:22:43-07	102
8922	solution	dfs_impl_id1	load		2019-06-11 08:22:43-07	102
8932	parsons	dfs_impl	submit		2019-06-11 08:22:44-07	72
8942	parsons	dfs_impl	move_on		2019-06-11 08:22:46-07	92
8952	solution	dfs_impl_id1	load		2019-06-11 08:22:47-07	92
8962	solution	dfs_impl_id1	move_on		2019-06-11 08:23:22-07	92
8972	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:23:22-07	92
8982	parsons	dfs_impl	submit		2019-06-11 08:23:23-07	72
9002	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:23:25-07	82
9012	parsons	dfs_impl	submit		2019-06-11 08:23:25-07	72
9022	solution	dfs_impl_id1	move_on		2019-06-11 08:23:26-07	102
9032	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:23:27-07	102
9042	parsons	dfs_impl	submit		2019-06-11 08:23:28-07	72
9052	parsons	dfs_impl	move_on		2019-06-11 08:23:30-07	72
9062	solution	dfs_impl_id1	load		2019-06-11 08:23:31-07	72
9072	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:47-07	82
9082	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:48-07	82
9092	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:49-07	82
9102	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:50-07	82
9112	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:50-07	82
9122	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:51-07	82
9132	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:52-07	82
9142	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:52-07	82
9152	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:53-07	82
9162	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:54-07	82
9172	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:54-07	82
9182	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:55-07	82
9192	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:55-07	82
9202	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:56-07	82
9212	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:57-07	82
9222	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:57-07	82
9232	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:58-07	82
9242	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:59-07	82
9252	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:52:59-07	82
9262	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:22-07	102
9272	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:22-07	102
14082	coding	dfs_detect_cycle	load		2019-06-12 23:28:49-07	2
14092	coding	dfs_impl	load		2019-06-12 23:34:13-07	42
14102	coding	dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  pass\\n"}	2019-06-12 23:34:20-07	42
9282	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:23-07	102
9292	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:23-07	102
9302	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:24-07	102
9312	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:25-07	102
9322	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:25-07	102
9332	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:26-07	102
9342	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:27-07	102
9352	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:27-07	102
9362	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:28-07	92
9372	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:29-07	92
9382	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:29-07	92
9392	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:30-07	92
9402	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:30-07	92
9412	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:31-07	92
9422	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:32-07	92
9432	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:32-07	92
9442	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:33-07	92
9452	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:34-07	92
9462	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:34-07	82
9472	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:35-07	82
9482	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:36-07	82
9492	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:36-07	82
9502	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:37-07	82
9512	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:37-07	82
9522	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:38-07	82
9532	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:39-07	82
9542	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:39-07	82
9552	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:53:40-07	82
9562	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:23-07	102
9572	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:23-07	102
9582	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:24-07	102
9592	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:25-07	102
9602	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:25-07	102
9612	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:26-07	102
9622	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:27-07	102
9632	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:27-07	102
9642	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:28-07	102
9652	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:28-07	102
9662	solution	dfs_impl_id1	move_on		2019-06-11 08:54:29-07	72
9672	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:30-07	72
9682	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:30-07	102
9692	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:54:31-07	102
9702	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:32-07	92
9712	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:32-07	92
9722	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:33-07	92
9732	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:34-07	92
9742	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:34-07	92
9752	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:35-07	92
9762	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:54:36-07	92
9772	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:54:36-07	82
9782	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:54:37-07	82
9792	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:29-07	72
9802	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:30-07	72
9812	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:31-07	72
9822	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:32-07	72
9832	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:32-07	72
9842	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:33-07	72
9852	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:34-07	72
9862	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:34-07	72
9872	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:35-07	72
9882	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:36-07	102
9892	solution	dfs_impl_id2	load		2019-06-11 08:56:36-07	102
9902	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 08:56:37-07	72
9912	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:38-07	72
9922	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:38-07	92
9932	solution	dfs_impl_id2	load		2019-06-11 08:56:39-07	92
9942	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:40-07	82
9952	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:40-07	82
9962	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:41-07	82
9972	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:42-07	82
9982	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:42-07	82
9992	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:56:43-07	82
10002	solution	dfs_impl_id2	load		2019-06-11 08:56:44-07	82
10012	solution	dfs_impl_id2	move_on		2019-06-11 08:57:40-07	82
10022	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:42-07	72
10032	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:42-07	72
10042	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:43-07	72
10052	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:44-07	72
10062	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:44-07	72
14112	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  pass\\n"}	2019-06-12 23:34:20-07	42
10072	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:45-07	72
10082	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:46-07	72
10092	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:46-07	72
10102	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:47-07	72
10112	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:48-07	72
10122	solution	dfs_impl_id2	move_on		2019-06-11 08:57:48-07	102
10132	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:49-07	72
10142	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:50-07	72
10152	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:50-07	72
10162	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:51-07	72
10172	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:51-07	72
10182	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:52-07	72
10192	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:53-07	72
10202	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:53-07	72
10212	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:54-07	72
10222	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:55-07	72
10232	solution	dfs_impl_id2	move_on		2019-06-11 08:57:55-07	92
10242	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 08:57:56-07	72
10252	solution	dfs_impl_id2	load		2019-06-11 08:57:57-07	72
10262	solution	dfs_impl_id2	move_on		2019-06-11 08:58:21-07	72
10272	parsons	dfs_impl	load		2019-06-11 08:58:47-07	72
10282	parsons	dfs_impl	load		2019-06-11 08:59:25-07	82
10292	parsons	dfs_impl	load		2019-06-11 08:59:30-07	92
10302	parsons	dfs_impl	load		2019-06-11 08:59:34-07	102
10312	parsons	dfs_impl	submit		2019-06-11 08:59:53-07	72
10322	parsons	dfs_impl	submit		2019-06-11 08:59:54-07	72
10332	parsons	dfs_impl	submit		2019-06-11 08:59:54-07	72
10342	parsons	dfs_impl	submit		2019-06-11 08:59:55-07	72
10352	parsons	dfs_impl	submit		2019-06-11 08:59:55-07	72
10362	parsons	dfs_impl	submit		2019-06-11 08:59:56-07	72
10372	parsons	dfs_impl	submit		2019-06-11 08:59:57-07	72
10382	parsons	dfs_impl	submit		2019-06-11 08:59:57-07	72
10392	parsons	dfs_impl	submit		2019-06-11 08:59:58-07	72
10402	parsons	dfs_impl	submit		2019-06-11 08:59:59-07	72
10412	parsons	dfs_impl	move_on		2019-06-11 08:59:59-07	82
10422	solution	dfs_impl_id1	load		2019-06-11 09:00:00-07	82
10432	parsons	dfs_impl	move_on		2019-06-11 09:00:01-07	72
10442	solution	dfs_impl_id1	load		2019-06-11 09:00:01-07	72
10452	parsons	dfs_impl	submit		2019-06-11 09:00:02-07	92
10462	parsons	dfs_impl	submit		2019-06-11 09:00:03-07	92
10472	parsons	dfs_impl	submit		2019-06-11 09:00:03-07	92
10482	parsons	dfs_impl	submit		2019-06-11 09:00:04-07	92
10492	parsons	dfs_impl	submit		2019-06-11 09:00:05-07	92
10502	parsons	dfs_impl	submit		2019-06-11 09:00:05-07	92
10512	parsons	dfs_impl	move_on		2019-06-11 09:00:06-07	102
10522	parsons	dfs_impl	submit		2019-06-11 09:00:07-07	92
10532	solution	dfs_impl_id1	load		2019-06-11 09:00:07-07	102
10542	parsons	dfs_impl	submit		2019-06-11 09:00:08-07	92
10552	parsons	dfs_impl	submit		2019-06-11 09:00:09-07	92
10562	parsons	dfs_impl	submit		2019-06-11 09:00:09-07	92
10572	parsons	dfs_impl	submit		2019-06-11 09:00:10-07	92
10582	solution	dfs_impl_id1	load		2019-06-11 09:00:11-07	92
14122	solution	dfs_impl_id1	load		2019-06-12 23:34:21-07	42
10592	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:01:18-07	92
10602	solution	dfs_impl_id1	move_on		2019-06-11 09:01:19-07	72
10612	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:01:19-07	72
10622	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:10-07	72
10632	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:10-07	72
10642	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:11-07	72
10652	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:12-07	72
10662	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:12-07	72
10672	solution	dfs_impl_id1	move_on		2019-06-11 09:02:13-07	82
10682	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:13-07	82
10692	solution	dfs_impl_id1	move_on		2019-06-11 09:02:14-07	102
10702	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:15-07	102
10712	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:16-07	92
10722	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:17-07	92
10732	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:17-07	92
10742	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:18-07	92
10752	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:20-07	92
10762	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:21-07	72
10772	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:02:22-07	72
10782	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:02:23-07	92
10792	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:02:24-07	92
10802	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:12-07	72
10812	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:14-07	72
10822	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:14-07	72
10832	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:15-07	72
10842	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:16-07	72
10852	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:16-07	72
14132	coding	dfs_impl	load		2019-06-12 23:34:27-07	42
14142	coding	dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  my code here \\n  \\n"}	2019-06-12 23:34:36-07	42
10862	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:17-07	72
10872	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:18-07	72
10882	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:18-07	72
10892	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:19-07	102
10902	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:20-07	102
10912	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:20-07	102
10922	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:21-07	102
10932	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:22-07	102
10942	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:22-07	102
10952	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:23-07	102
10962	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:24-07	92
10972	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:24-07	92
10982	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:25-07	92
10992	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:26-07	92
11002	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:26-07	92
11012	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:27-07	92
11022	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:28-07	72
11032	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:28-07	72
11042	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:29-07	72
11052	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:29-07	72
11062	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:30-07	72
11072	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:31-07	92
11082	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:31-07	72
11092	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:32-07	92
11102	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:33-07	92
14152	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  my code here \\n  \\n"}	2019-06-12 23:34:37-07	42
11112	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:33-07	92
11122	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:34-07	92
11132	solution	dfs_impl_id2	load		2019-06-11 09:05:35-07	92
11142	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:35-07	72
11152	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:36-07	82
11162	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:37-07	82
11172	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:37-07	72
11182	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:38-07	82
11192	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:38-07	82
11202	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:39-07	72
11212	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:40-07	82
11222	parsons	dfs_impl_1	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 09:05:40-07	82
11232	parsons	dfs_impl_3	submit	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:41-07	72
11242	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:42-07	72
11252	solution	dfs_impl_id2	load		2019-06-11 09:05:42-07	72
11262	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:05:43-07	82
11272	solution	dfs_impl_id2	load		2019-06-11 09:09:48-07	82
11282	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 09:09:53-07	102
11292	solution	dfs_impl_id2	load		2019-06-11 09:09:54-07	102
11302	solution	dfs_impl_id2	move_on		2019-06-11 09:09:56-07	82
11312	solution	dfs_impl_id2	move_on		2019-06-11 09:10:00-07	72
11322	solution	dfs_impl_id2	move_on		2019-06-11 09:10:01-07	102
11332	solution	dfs_impl_id2	move_on		2019-06-11 09:10:03-07	92
11342	solution	binary_search_1	load		2019-06-11 17:56:50-07	22
11352	parsons	dfs_impl	load		2019-06-11 18:22:55-07	2
11362	parsons	dfs_impl	move_on		2019-06-11 18:22:57-07	2
11372	solution	dfs_impl_id1	load		2019-06-11 18:22:58-07	2
11382	solution	dfs_impl_id1	move_on		2019-06-11 18:23:00-07	2
11392	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:23:01-07	2
11402	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:23:34-07	2
11412	parsons	dfs_impl	load		2019-06-11 18:23:41-07	2
11422	parsons	dfs_impl	move_on		2019-06-11 18:23:44-07	2
11432	parsons	dfs_impl	unload		2019-06-11 18:23:45-07	2
11442	solution	dfs_impl_id1	load		2019-06-11 18:23:45-07	2
11452	solution	dfs_impl_id1	move_on		2019-06-11 18:23:46-07	2
11462	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:23:47-07	2
11472	parsons	dfs_impl	load		2019-06-11 18:40:18-07	2
11482	parsons	dfs_impl	move_on		2019-06-11 18:40:20-07	2
11492	solution	dfs_impl_id1	load		2019-06-11 18:40:20-07	2
11502	solution	dfs_impl_id1	move_on		2019-06-11 18:40:22-07	2
11512	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:40:23-07	2
11522	solution	dfs_impl_id1	move_on		2019-06-11 18:40:45-07	2
14162	solution	dfs_impl_id1	load		2019-06-12 23:34:37-07	42
14172	coding	dfs_impl	load		2019-06-12 23:35:46-07	42
11532	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:40:45-07	2
11542	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:40:47-07	2
11552	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 18:40:48-07	2
11562	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 18:40:52-07	2
11572	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:40:53-07	2
11582	parsons	dfs_impl	load		2019-06-11 18:43:34-07	2
11592	parsons	dfs_impl	move_on		2019-06-11 18:43:36-07	2
11602	solution	dfs_impl_id1	load		2019-06-11 18:43:36-07	2
11612	solution	dfs_impl_id1	move_on		2019-06-11 18:43:38-07	2
11622	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:43:39-07	2
11632	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:43:41-07	2
11642	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 18:43:42-07	2
11652	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 18:43:44-07	2
11662	solution	dfs_impl_id2	load		2019-06-11 18:43:44-07	2
11672	solution	dfs_impl_id2	move_on		2019-06-11 18:43:46-07	2
11682	parsons	dfs_impl	load		2019-06-11 18:44:05-07	2
11692	solution	dfs_impl_id1	load		2019-06-11 18:45:53-07	2
11702	solution	dfs_impl_id1	move_on		2019-06-11 18:46:02-07	2
11712	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:46:02-07	2
11722	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 18:46:39-07	2
11732	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 18:46:40-07	2
11742	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 18:46:53-07	2
11752	solution	dfs_impl_id2	load		2019-06-11 18:46:54-07	2
11762	solution	dfs_impl_id2	move_on		2019-06-11 18:47:02-07	2
11772	parsons	dfs_impl	unload		2019-06-11 18:47:05-07	2
11782	solution	dfs_impl	load		2019-06-11 19:00:37-07	2
11792	solution	dfs_impl	move_on		2019-06-11 19:00:40-07	2
11802	solution	dfs_impl_id1	load		2019-06-11 19:00:40-07	2
11812	solution	dfs_impl_id1	move_on		2019-06-11 19:00:45-07	2
11822	parsons	dfs_impl	load		2019-06-11 19:04:55-07	2
11832	parsons	dfs_impl	move_on		2019-06-11 19:04:58-07	2
11842	solution	dfs_impl_id1	load		2019-06-11 19:04:58-07	2
11852	solution	dfs_impl_id1	move_on		2019-06-11 19:05:03-07	2
11862	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 19:05:04-07	2
11872	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 19:05:08-07	2
11882	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 19:05:09-07	2
11892	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 19:05:11-07	2
11902	solution	dfs_impl_id2	load		2019-06-11 19:05:11-07	2
11912	solution	dfs_impl_id2	move_on		2019-06-11 19:05:13-07	2
11922	parsons	dfs_impl	load		2019-06-11 21:37:17-07	2
11932	parsons	dfs_impl	move_on		2019-06-11 21:37:20-07	2
11942	solution	binary_search_1	load		2019-06-11 21:37:20-07	2
11952	parsons	dfs_impl	move_on		2019-06-11 21:37:29-07	2
11962	solution	dfs_impl_id1	load		2019-06-11 21:37:29-07	2
11972	solution	dfs_impl_id1	move_on		2019-06-11 21:37:31-07	2
11982	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 21:37:32-07	2
15472	solution	dfs_impl_id2	load		2019-06-13 01:06:27-07	2
11992	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 21:37:44-07	2
12002	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-11 21:37:50-07	2
12012	parsons	dfs_impl	load		2019-06-11 21:37:53-07	2
12022	parsons	dfs_impl	move_on		2019-06-11 21:37:55-07	2
12032	solution	dfs_impl_id1	load		2019-06-11 21:37:56-07	2
12042	solution	dfs_impl_id1	move_on		2019-06-11 21:37:58-07	2
12052	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 21:37:59-07	2
12062	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 21:38:01-07	2
12072	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 21:38:02-07	2
12082	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 21:38:04-07	2
12092	solution	dfs_impl_id2	load		2019-06-11 21:38:04-07	2
12102	solution	dfs_impl_id2	move_on		2019-06-11 21:38:06-07	2
12112	parsons	dfs_impl	load		2019-06-11 22:00:22-07	2
12122	parsons	dfs_impl	move_on		2019-06-11 22:00:24-07	2
12132	solution	binary_search_1	load		2019-06-11 22:00:24-07	2
12142	solution	binary_search_1	move_on		2019-06-11 22:00:33-07	2
12152	solution	dfs_impl_id1	load		2019-06-11 22:00:33-07	2
12162	parsons	dfs_impl	move_on		2019-06-11 22:00:42-07	2
12172	solution	dfs_impl_id1	load		2019-06-11 22:00:42-07	2
12182	parsons	dfs_impl	load		2019-06-11 22:01:43-07	2
12192	parsons	dfs_impl	move_on		2019-06-11 22:01:45-07	2
12202	solution	dfs_impl_id1	load		2019-06-11 22:01:45-07	2
12212	parsons	dfs_impl	load		2019-06-11 22:03:46-07	2
12222	parsons	dfs_impl	move_on		2019-06-11 22:03:49-07	2
12232	solution	binary_search_1	load		2019-06-11 22:03:49-07	2
12242	parsons	dfs_impl	move_on		2019-06-11 22:04:04-07	2
12252	solution	dfs_impl_id1	load		2019-06-11 22:04:05-07	2
12262	parsons	dfs_impl	load		2019-06-11 22:08:00-07	2
12272	parsons	dfs_impl	move_on		2019-06-11 22:08:02-07	2
12282	solution	dfs_impl_id1	load		2019-06-11 22:08:02-07	2
12292	solution	dfs_impl_id1	move_on		2019-06-11 22:08:04-07	2
12302	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 22:08:05-07	2
12312	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 22:08:06-07	2
12322	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 22:08:07-07	2
12332	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  .setExit()\n	2019-06-11 22:08:09-07	2
12342	solution	dfs_impl_id2	load		2019-06-11 22:08:09-07	2
12352	solution	dfs_impl_id2	move_on		2019-06-11 22:08:11-07	2
12362	parsons	dfs_impl	load		2019-06-11 23:49:43-07	2
12372	parsons	dfs_impl	move_on		2019-06-11 23:49:48-07	2
12382	solution	dfs_impl_id1	load		2019-06-11 23:49:49-07	2
12392	solution	dfs_impl_id1	move_on		2019-06-11 23:49:51-07	2
12402	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 23:49:52-07	2
12412	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-11 23:49:54-07	2
12422	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-11 23:49:55-07	2
12432	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n	2019-06-11 23:49:57-07	2
12442	solution	dfs_impl_id2	load		2019-06-11 23:49:57-07	2
12452	solution	dfs_impl_id2	move_on		2019-06-11 23:49:59-07	2
12462	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-12 00:01:34-07	2
12472	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-12 00:01:37-07	2
12482	coding	dfs_impl	load		2019-06-12 00:01:37-07	2
12492	coding	dfs_impl	move_on	{"code":"def dfs(graph):\\n\\t# graph is a list of Nodes\\n"}	2019-06-12 00:01:43-07	2
12502	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n\\t# graph is a list of Nodes\\n"}	2019-06-12 00:01:43-07	2
12512	coding	dfs_impl	load		2019-06-12 00:01:46-07	2
12522	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n\\t# graph is a list of Nodes\\n"}	2019-06-12 00:02:02-07	2
12532	parsons	dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-12 00:02:04-07	2
12542	parsons	dfs_impl	move_on	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-12 00:02:07-07	2
12582	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 00:06:47-07	2
12592	parsons	dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-12 00:08:28-07	2
12602	parsons	dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-12 00:08:32-07	2
12612	solution	dfs_impl_id1	load		2019-06-12 00:08:32-07	2
12622	coding	dfs_impl_3	load		2019-06-12 00:09:39-07	2
12632	coding	dfs_impl_3	unload	{"code":"def dfs(graph):\\n    if foo:\\n        "}	2019-06-12 00:36:43-07	2
12642	coding	dfs_impl_3	load		2019-06-12 00:36:44-07	2
12652	coding	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n    if foo:\\n        "}	2019-06-12 00:36:51-07	2
12662	coding	dfs_impl_3	unload	{"code":"def dfs(graph):\\n    if foo:\\n        "}	2019-06-12 00:36:51-07	2
12672	solution	dfs_impl_id1	load		2019-06-12 00:36:52-07	2
12682	solution	dfs_impl_id1	load		2019-06-12 00:37:01-07	2
12692	solution	dfs_impl_id1	load		2019-06-12 00:37:06-07	2
12702	solution	dfs_impl_id1	load		2019-06-12 00:37:33-07	2
12712	solution	dfs_impl_id1	load		2019-06-12 00:37:40-07	2
12722	solution	dfs_impl_id1	load		2019-06-12 00:41:55-07	2
12732	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 00:41:56-07	2
12742	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 00:53:32-07	2
12752	solution	dfs_impl_id1	load		2019-06-12 00:53:33-07	2
12762	parsons	dfs_impl	load		2019-06-12 04:40:48-07	42
12772	parsons	dfs_impl	move_on		2019-06-12 04:40:51-07	42
12782	parsons	dfs_impl	unload		2019-06-12 04:40:51-07	42
12792	solution	dfs_impl_id1	load		2019-06-12 04:40:52-07	42
12802	solution	dfs_impl_id1	move_on		2019-06-12 04:40:53-07	42
12812	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 04:40:54-07	42
12822	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 04:40:57-07	42
12832	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 04:40:57-07	42
12842	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 04:40:58-07	42
12852	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 04:41:00-07	42
12862	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 04:41:01-07	42
12872	solution	dfs_impl_id2	load		2019-06-12 04:41:02-07	42
12882	parsons	dfs_impl	load		2019-06-12 18:59:18-07	42
12892	parsons	dfs_impl	move_on		2019-06-12 18:59:21-07	42
12902	parsons	dfs_impl	unload		2019-06-12 18:59:21-07	42
12912	solution	dfs_impl_id1	load		2019-06-12 18:59:22-07	42
12922	solution	dfs_impl_id1	move_on		2019-06-12 18:59:24-07	42
12932	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 18:59:24-07	42
12942	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 18:59:27-07	42
12952	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 18:59:27-07	42
12962	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 18:59:28-07	42
12972	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 19:06:17-07	42
12982	solution	dfs_impl_id2	load		2019-06-12 19:06:18-07	42
12992	parsons	dfs_impl	load		2019-06-12 21:55:48-07	42
13002	parsons	dfs_impl	move_on		2019-06-12 21:55:49-07	42
13012	parsons	dfs_impl	unload		2019-06-12 21:55:50-07	42
13022	solution	dfs_impl_id1	load		2019-06-12 21:55:50-07	42
13032	parsons	dfs_impl	load		2019-06-12 21:58:07-07	42
13042	parsons	dfs_impl	move_on	continue\n            def visit(node):\n	2019-06-12 21:58:16-07	42
13052	parsons	dfs_impl	unload	continue\n            def visit(node):\n	2019-06-12 21:58:16-07	42
13062	solution	dfs_impl_id1	load		2019-06-12 21:58:17-07	42
13072	parsons	dfs_impl	load		2019-06-12 22:04:48-07	42
13082	parsons	dfs_impl	move_on		2019-06-12 22:04:50-07	42
13092	parsons	dfs_impl	unload		2019-06-12 22:04:51-07	42
13102	solution	dfs_impl_id1	load		2019-06-12 22:04:51-07	42
13112	solution	dfs_impl_id1	load		2019-06-12 22:07:20-07	42
13122	solution	dfs_impl_id1	load		2019-06-12 22:07:51-07	42
13142	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:08:33-07	42
13152	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:08:35-07	42
13162	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:08:36-07	42
13172	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:08:36-07	42
13182	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:08:39-07	42
13192	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:08:40-07	42
13202	solution	dfs_impl_id2	load		2019-06-12 22:08:40-07	42
13212	solution	dfs_impl_id2	move_on		2019-06-12 22:08:44-07	42
13222	solution	dfs_impl_id1	load		2019-06-12 22:15:17-07	42
13232	solution	dfs_impl_id1	load		2019-06-12 22:23:24-07	42
13242	solution	dfs_impl_id1	load		2019-06-12 22:25:31-07	42
13252	parsons	dfs_impl	load		2019-06-12 22:25:33-07	42
13262	parsons	dfs_impl	move_on		2019-06-12 22:25:35-07	42
13272	parsons	dfs_impl	unload		2019-06-12 22:25:36-07	42
13282	solution	dfs_impl_id1	load		2019-06-12 22:25:36-07	42
13292	solution	dfs_impl_id1	load		2019-06-12 22:29:20-07	42
13302	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:35:13-07	42
13312	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:35:15-07	42
13322	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:35:16-07	42
13332	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:35:16-07	42
13342	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:35:19-07	42
13352	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 22:35:19-07	42
13362	solution	dfs_impl_id2	load		2019-06-12 22:35:20-07	42
13372	parsons	dfs_impl	load		2019-06-12 22:38:20-07	42
13382	parsons	dfs_impl	unload		2019-06-12 22:38:24-07	42
13392	parsons	dfs_impl	load		2019-06-12 22:38:26-07	42
13402	parsons	dfs_impl	move_on		2019-06-12 22:38:29-07	42
13412	parsons	dfs_impl	unload		2019-06-12 22:38:29-07	42
13422	solution	dfs_impl_id1	load		2019-06-12 22:42:46-07	42
13432	solution	dfs_impl_id1	load		2019-06-12 22:59:39-07	42
13442	parsons	dfs_impl	load		2019-06-12 22:59:53-07	42
13452	parsons	dfs_impl	move_on	def dfs(graph):\nfor neighbor in node.getNeighbors():\n  if not node.getExit():\n	2019-06-12 23:00:02-07	42
13462	parsons	dfs_impl	unload	def dfs(graph):\nfor neighbor in node.getNeighbors():\n  if not node.getExit():\n	2019-06-12 23:00:02-07	42
13472	solution	dfs_impl_id1	load		2019-06-12 23:00:03-07	42
13482	solution	dfs_impl_id1	load		2019-06-12 23:00:37-07	42
13492	parsons	dfs_impl	load		2019-06-12 23:02:00-07	42
13502	parsons	dfs_impl	unload		2019-06-12 23:02:00-07	42
13512	parsons	dfs_impl	load		2019-06-12 23:02:05-07	42
13522	parsons	dfs_impl	move_on	def dfs(graph):\nfor neighbor in node.getNeighbors():\nif neighbor.getEnter():\n    continue\n	2019-06-12 23:02:14-07	42
13532	parsons	dfs_impl	unload	def dfs(graph):\nfor neighbor in node.getNeighbors():\nif neighbor.getEnter():\n    continue\n	2019-06-12 23:02:15-07	42
13542	solution	dfs_impl_id1	load		2019-06-12 23:02:15-07	42
13552	solution	dfs_impl_id1	move_on		2019-06-12 23:02:24-07	42
13562	parsons	dfs_impl_1	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:02:25-07	42
13572	parsons	dfs_impl_1	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n  node.setExit()\n  visit(neighbor)\n  print(hello)\n	2019-06-12 23:02:41-07	42
13582	parsons	dfs_impl_1	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n  node.setExit()\n  visit(neighbor)\n  print(hello)\n	2019-06-12 23:02:41-07	42
13592	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:02:42-07	42
14182	coding	dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  my code here \\n  \\n"}	2019-06-12 23:35:48-07	42
13602	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:02:50-07	42
13612	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:02:50-07	42
13622	solution	dfs_impl_id2	load		2019-06-12 23:02:51-07	42
13632	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:02:57-07	42
13642	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  hello.setExit()\n	2019-06-12 23:03:03-07	42
13652	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  hello.setExit()\n	2019-06-12 23:03:03-07	42
13662	solution	dfs_impl_id2	load		2019-06-12 23:03:04-07	42
13672	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:06:43-07	42
13682	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  hello.setExit()\n	2019-06-12 23:06:53-07	42
13692	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  hello.setExit()\n	2019-06-12 23:06:54-07	42
13702	most_recent_code	dfs_impl_id2	load		2019-06-12 23:06:54-07	42
13712	solution	dfs_impl_id2	load		2019-06-12 23:06:55-07	42
13722	parsons	dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:07:07-07	42
13732	parsons	dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:09:55-07	42
13742	parsons	dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-12 23:09:55-07	42
13752	solution	dfs_impl_id2	load		2019-06-12 23:09:56-07	42
13762	parsons	dfs_impl	load		2019-06-12 23:23:36-07	42
13772	parsons	dfs_impl	unload		2019-06-12 23:23:43-07	42
13782	coding	dfs_detect_cycle	load		2019-06-12 23:27:46-07	2
13792	coding	dfs_detect_cycle	move_on	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:46-07	2
13802	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:47-07	2
13812	coding	dfs_detect_cycle	load		2019-06-12 23:27:51-07	2
13822	coding	dfs_detect_cycle	move_on	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:52-07	2
13832	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:52-07	2
13842	coding	dfs_detect_cycle	load		2019-06-12 23:27:53-07	2
13852	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:53-07	2
13862	coding	dfs_detect_cycle	load		2019-06-12 23:27:54-07	2
13872	coding	dfs_detect_cycle	move_on	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:54-07	2
13882	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:55-07	2
13892	coding	dfs_detect_cycle	load		2019-06-12 23:27:56-07	2
13902	coding	dfs_detect_cycle	move_on	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:57-07	2
13912	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:27:57-07	2
13922	coding	dfs_detect_cycle	load		2019-06-12 23:28:09-07	2
13932	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:09-07	2
13942	coding	dfs_detect_cycle	load		2019-06-12 23:28:10-07	2
13952	coding	dfs_detect_cycle	move_on	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:10-07	2
13962	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:11-07	2
13972	coding	dfs_detect_cycle	load		2019-06-12 23:28:16-07	2
13982	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:17-07	2
13992	coding	dfs_detect_cycle	load		2019-06-12 23:28:17-07	2
14002	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:18-07	2
14012	coding	dfs_detect_cycle	load		2019-06-12 23:28:18-07	2
14022	coding	dfs_detect_cycle	move_on	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:19-07	2
14032	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:19-07	2
14042	coding	dfs_detect_cycle	load		2019-06-12 23:28:48-07	2
14052	coding	dfs_detect_cycle	unload	{"approach":"","code":"def detect_cycle(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-12 23:28:48-07	2
14062	coding	dfs_detect_cycle	load		2019-06-12 23:28:48-07	2
15482	parsons	dfs_impl	load		2019-06-13 01:11:04-07	2
14222	coding	dfs_impl	submit	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  my code here \\n  \\n"}	2019-06-12 23:36:05-07	42
14232	coding	dfs_impl	results	<div class="testcase error"><span class="msg">Error connecting to Redis server. Contact someone!</span></div>	2019-06-12 23:36:05-07	42
14242	coding	dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  my code here \\n  \\n"}	2019-06-12 23:36:09-07	42
14252	coding	dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  my code here \\n  \\n"}	2019-06-12 23:36:09-07	42
14262	solution	dfs_impl_id1	load		2019-06-12 23:36:10-07	42
14272	parsons	dfs_impl	load	{"code":""}	2019-06-12 23:46:09-07	42
14282	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\nfor neighbor in node.getNeighbors():\\n"}	2019-06-12 23:46:15-07	42
14292	parsons	dfs_impl	unload	{"code":"def dfs(graph):\\nfor neighbor in node.getNeighbors():\\n"}	2019-06-12 23:46:15-07	42
14302	solution	dfs_impl_id1	load		2019-06-12 23:46:16-07	42
14312	solution	dfs_impl_id1	move_on		2019-06-12 23:46:29-07	42
14322	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-12 23:46:30-07	42
14332	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-12 23:46:32-07	42
14342	parsons	dfs_impl_1	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-12 23:46:33-07	42
14352	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-12 23:46:33-07	42
14362	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  nodee.setExit()\\n"}	2019-06-12 23:46:39-07	42
14372	parsons	dfs_impl_3	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  nodee.setExit()\\n"}	2019-06-12 23:46:40-07	42
14382	solution	dfs_impl_id2	load		2019-06-12 23:46:41-07	42
14392	coding	fizz_buzz	load		2019-06-12 23:48:08-07	42
14402	coding	fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n    fizz_buzz"}	2019-06-12 23:48:15-07	42
14412	coding	fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n    fizz_buzz"}	2019-06-12 23:48:16-07	42
14422	solution	dfs_impl_id1	load		2019-06-12 23:48:16-07	42
14432	parsons	dfs_impl	load	{"code":""}	2019-06-12 23:51:14-07	42
14442	parsons	dfs_impl	move_on	{"code":""}	2019-06-12 23:53:11-07	42
14452	parsons	dfs_impl	unload	{"code":""}	2019-06-12 23:53:12-07	42
14462	solution	dfs_impl_id1	load		2019-06-12 23:53:12-07	42
14472	solution	dfs_impl_id1	move_on		2019-06-12 23:56:26-07	42
14482	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-12 23:56:27-07	42
14492	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\nif not graph[node].getExit():\\n"}	2019-06-12 23:56:38-07	42
14502	parsons	dfs_impl_1	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\nif not graph[node].getExit():\\n"}	2019-06-12 23:56:39-07	42
14512	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-12 23:56:39-07	42
14522	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\nvisit(neighbor)\\n"}	2019-06-12 23:56:51-07	42
14532	parsons	dfs_impl_3	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\nvisit(neighbor)\\n"}	2019-06-12 23:56:51-07	42
14542	solution	dfs_impl_id2	load		2019-06-12 23:56:52-07	42
14552	parsons	dfs_impl	load	{"code":""}	2019-06-12 23:58:28-07	42
14562	parsons	dfs_impl	move_on	{"code":"def visit(node):\\n"}	2019-06-12 23:58:33-07	42
14572	parsons	dfs_impl	unload	{"code":"def visit(node):\\n"}	2019-06-12 23:58:34-07	42
14582	solution	dfs_impl_id1	load		2019-06-12 23:58:34-07	42
14592	coding	dfs_impl	load		2019-06-13 00:09:56-07	42
14602	coding	dfs_impl	drag	INFO	2019-06-13 00:10:00-07	42
14612	coding	dfs_impl	drag	INFO	2019-06-13 00:10:03-07	42
14622	coding	dfs_impl	move_on	{"code":"def dfs(graph):\\nfor node in graph:\\n"}	2019-06-13 00:10:05-07	42
14632	coding	dfs_impl	unload		2019-06-13 00:10:05-07	42
14642	solution	dfs_impl_id1	load		2019-06-13 00:10:06-07	42
14652	coding	dfs_impl	load		2019-06-13 00:22:28-07	12
14662	coding	dfs_impl	drag	INFO	2019-06-13 00:22:31-07	12
14672	coding	dfs_impl	drag	INFO	2019-06-13 00:22:33-07	12
14682	coding	dfs_impl	drag	INFO	2019-06-13 00:22:35-07	12
14692	coding	dfs_impl	drag	INFO	2019-06-13 00:22:37-07	12
14702	coding	dfs_impl	drag	INFO	2019-06-13 00:22:42-07	12
14712	coding	dfs_impl	move_on	{"code":"def dfs(graph):\\n  if neighbor.getEnter():\\n    node.setEnter()\\n"}	2019-06-13 00:22:44-07	12
14722	solution	dfs_impl_id1	load		2019-06-13 00:22:45-07	12
14732	parsons	demo	load		2019-06-13 00:23:51-07	2
14742	parsons	demo	move_on	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-13 00:23:56-07	2
14752	parsons	dfs_impl	load		2019-06-13 00:24:03-07	2
14762	parsons	dfs_impl	drag	INFO	2019-06-13 00:24:07-07	2
14772	parsons	dfs_impl	drag	INFO	2019-06-13 00:24:09-07	2
14782	parsons	dfs_impl	drag	INFO	2019-06-13 00:24:15-07	2
14792	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  for neighbor in node.getNeighbors():\\n    visit(node)\\n"}	2019-06-13 00:24:19-07	2
14802	solution	dfs_impl_id1	load		2019-06-13 00:24:20-07	2
14812	parsons	dfs_impl	load		2019-06-13 00:30:00-07	2
14822	parsons	dfs_impl	drag	INFO	2019-06-13 00:30:03-07	2
14832	parsons	dfs_impl	drag	INFO	2019-06-13 00:30:06-07	2
14842	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  print(hello)\\n"}	2019-06-13 00:30:12-07	2
14852	solution	dfs_impl_id1	load		2019-06-13 00:30:13-07	2
14862	parsons	dfs_impl	load		2019-06-13 00:31:12-07	2
14872	parsons	dfs_impl	drag	INFO	2019-06-13 00:31:16-07	2
14882	parsons	dfs_impl	drag	INFO	2019-06-13 00:31:19-07	2
14892	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  node.setEnter()\\n"}	2019-06-13 00:31:23-07	2
14902	parsons	dfs_impl	load		2019-06-13 00:33:35-07	2
14912	parsons	dfs_impl	drag	INFO	2019-06-13 00:33:39-07	2
14922	parsons	dfs_impl	drag	INFO	2019-06-13 00:33:41-07	2
14932	parsons	dfs_impl	drag	INFO	2019-06-13 00:33:45-07	2
14942	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n"}	2019-06-13 00:33:48-07	2
14952	solution	dfs_impl_id1	load		2019-06-13 00:33:49-07	2
14962	solution	dfs_impl_id1	move_on		2019-06-13 00:34:00-07	2
14972	parsons	dfs_impl_1	load		2019-06-13 00:34:01-07	2
14982	parsons	dfs_impl_1	drag	INFO	2019-06-13 00:34:04-07	2
14992	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n"}	2019-06-13 00:34:07-07	2
15002	parsons	dfs_impl_3	load		2019-06-13 00:34:08-07	2
15012	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  hello.setExit()\\n"}	2019-06-13 00:34:16-07	2
15022	solution	dfs_impl_id2	load		2019-06-13 00:34:17-07	2
15032	solution	dfs_impl_id2	move_on		2019-06-13 00:34:19-07	2
15042	parsons	demo	load		2019-06-13 00:35:10-07	2
15052	parsons	dfs_impl	load		2019-06-13 00:35:15-07	2
15062	parsons	dfs_impl	drag	INFO	2019-06-13 00:35:18-07	2
15072	parsons	dfs_impl	drag	INFO	2019-06-13 00:35:22-07	2
15082	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  print(hi)\\n"}	2019-06-13 00:35:27-07	2
15092	parsons	dfs_impl	load		2019-06-13 00:40:27-07	2
15102	parsons	dfs_impl	drag	INFO	2019-06-13 00:40:32-07	2
15112	parsons	dfs_impl	drag	INFO	2019-06-13 00:40:35-07	2
15122	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  print(testing)\\n"}	2019-06-13 00:40:40-07	2
15132	parsons	dfs_impl	load		2019-06-13 00:43:38-07	2
15142	parsons	dfs_impl	drag	INFO	2019-06-13 00:43:41-07	2
15152	parsons	dfs_impl	drag	INFO	2019-06-13 00:43:45-07	2
15162	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  continue\\n"}	2019-06-13 00:43:47-07	2
15172	parsons	demo	load		2019-06-13 00:46:22-07	2
15182	parsons	dfs_impl	load		2019-06-13 00:46:25-07	2
15192	parsons	dfs_impl	drag	INFO	2019-06-13 00:46:28-07	2
15202	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 00:46:30-07	2
15212	parsons	dfs_impl	unload	{"code":"def dfs(graph):\\n"}	2019-06-13 00:46:30-07	2
15222	parsons	dfs_impl	load		2019-06-13 00:48:24-07	2
15232	parsons	dfs_impl	drag	INFO	2019-06-13 00:48:28-07	2
15242	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 00:48:29-07	2
15252	parsons	dfs_impl	unload	{"code":"def dfs(graph):\\n"}	2019-06-13 00:48:30-07	2
15262	parsons	dfs_impl	load		2019-06-13 00:49:35-07	2
15272	parsons	dfs_impl	drag	INFO	2019-06-13 00:49:38-07	2
15282	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 00:49:40-07	2
15292	solution	dfs_impl_id1	load		2019-06-13 00:49:41-07	2
15302	solution	dfs_impl_id1	move_on		2019-06-13 00:49:53-07	2
15312	parsons	dfs_impl_1	load		2019-06-13 00:49:54-07	2
15322	parsons	dfs_impl_1	drag	INFO	2019-06-13 00:49:57-07	2
15332	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n"}	2019-06-13 00:49:59-07	2
15342	parsons	dfs_impl_3	load		2019-06-13 00:50:00-07	2
15352	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-13 00:50:02-07	2
15362	solution	dfs_impl_id2	load		2019-06-13 00:50:03-07	2
15372	parsons	dfs_impl	load		2019-06-13 00:50:50-07	2
15382	parsons	dfs_impl	drag	INFO	2019-06-13 00:50:52-07	2
15392	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 00:50:53-07	2
15402	solution	dfs_impl_id1	load		2019-06-13 01:06:10-07	2
15412	solution	dfs_impl_id1	move_on		2019-06-13 01:06:15-07	2
15422	parsons	dfs_impl_1	load		2019-06-13 01:06:16-07	2
15432	parsons	dfs_impl_1	drag	INFO	2019-06-13 01:06:20-07	2
15442	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n"}	2019-06-13 01:06:21-07	2
15452	parsons	dfs_impl_3	load		2019-06-13 01:06:23-07	2
15462	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-13 01:06:26-07	2
15502	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 01:11:08-07	2
15512	solution	dfs_impl_id1	load		2019-06-13 01:11:09-07	2
15522	parsons	dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-13 01:19:30-07	2
15532	parsons	dfs_impl	move_on	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-13 01:19:31-07	2
15542	parsons	dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-13 01:19:32-07	2
15552	solution	dfs_impl_id1	load		2019-06-13 01:19:32-07	2
15562	solution	dfs_impl_id1	load		2019-06-13 01:19:34-07	2
15572	solution	dfs_impl_id1	load		2019-06-13 01:19:41-07	2
15582	solution	dfs_impl_id1	load		2019-06-13 01:20:27-07	2
15592	solution	dfs_impl_id1	load		2019-06-13 01:20:27-07	2
15602	solution	dfs_impl_id1	load		2019-06-13 01:20:33-07	2
15612	solution	dfs_impl_id1	load		2019-06-13 01:20:35-07	2
15622	solution	dfs_impl_id1	load		2019-06-13 01:20:35-07	2
15632	solution	dfs_impl_id1	load		2019-06-13 01:20:36-07	2
15642	solution	dfs_impl_id1	load		2019-06-13 01:20:37-07	2
15652	solution	dfs_impl_id1	load		2019-06-13 01:21:30-07	2
15662	parsons	dfs_impl	load		2019-06-13 01:24:08-07	2
15672	parsons	dfs_impl	drag	INFO	2019-06-13 01:24:11-07	2
15682	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 01:24:16-07	2
15692	solution	dfs_impl_id1	load		2019-06-13 01:24:17-07	2
15702	parsons	dfs_impl	load		2019-06-13 01:25:06-07	2
15712	parsons	dfs_impl	drag	INFO	2019-06-13 01:25:09-07	2
15722	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 01:25:12-07	2
15732	parsons	dfs_impl	load		2019-06-13 01:38:25-07	2
15742	parsons	dfs_impl	load		2019-06-13 01:38:30-07	2
15752	parsons	dfs_impl	move_on	{"code":""}	2019-06-13 01:38:32-07	2
15762	parsons	dfs_impl	load		2019-06-13 01:41:23-07	2
15772	parsons	dfs_impl	move_on	{"code":""}	2019-06-13 01:41:25-07	2
15782	solution	dfs_impl	load		2019-06-13 01:41:26-07	2
15792	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-13 01:44:58-07	2
15802	solution	dfs_impl	load		2019-06-13 01:44:58-07	2
15812	parsons	dfs_impl	load	{"code":""}	2019-06-13 18:51:07-07	12
15822	parsons	dfs_impl	move_on	{"code":""}	2019-06-13 18:51:15-07	12
15832	solution	dfs_impl	load		2019-06-13 18:51:16-07	12
15842	solution	dfs_impl	move_on		2019-06-13 18:52:03-07	12
15852	parsons	dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-13 18:59:24-07	2
15862	parsons	dfs_impl	load	{"code":""}	2019-06-13 19:09:56-07	42
15872	parsons	dfs_impl	move_on	{"code":""}	2019-06-13 19:10:00-07	42
15882	parsons	dfs_impl	unload	{"code":""}	2019-06-13 19:10:01-07	42
15892	solution	dfs_impl	load		2019-06-13 19:10:01-07	42
15902	solution	dfs_impl	load		2019-06-13 21:05:20-07	42
15912	solution	dfs_impl	load		2019-06-13 21:06:41-07	42
15922	solution	dfs_impl	load		2019-06-13 21:13:32-07	42
15932	solution	dfs_impl	load		2019-06-13 21:15:25-07	42
15942	solution	dfs_impl	load		2019-06-13 21:15:30-07	42
15952	solution	dfs_impl	load		2019-06-13 21:17:42-07	42
15962	solution	dfs_impl	load		2019-06-13 21:18:26-07	42
15972	solution	dfs_impl	load		2019-06-13 21:19:20-07	42
15982	solution	dfs_impl	load		2019-06-13 21:20:36-07	42
15992	solution	dfs_impl	load		2019-06-13 21:21:08-07	42
16002	solution	dfs_impl	load		2019-06-13 21:23:06-07	42
16012	solution	dfs_impl	load		2019-06-13 21:25:46-07	42
16022	solution	dfs_impl	load		2019-06-13 21:33:16-07	42
16032	solution	dfs_impl	load		2019-06-13 21:33:43-07	42
16042	solution	dfs_impl	load		2019-06-13 21:35:48-07	42
16052	solution	dfs_impl	load		2019-06-13 21:36:41-07	42
16062	solution	dfs_impl	move_on		2019-06-13 23:00:40-07	42
16072	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-13 23:00:41-07	42
16082	parsons	dfs_impl_1	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-13 23:00:42-07	42
16092	solution	dfs_impl	load		2019-06-13 23:05:57-07	42
16102	solution	dfs_impl	load		2019-06-13 23:07:24-07	42
16112	solution	dfs_impl	load		2019-06-13 23:09:08-07	42
16122	solution	dfs_impl	load		2019-06-13 23:10:29-07	42
16132	solution	dfs_impl	load		2019-06-13 23:12:11-07	42
16142	solution	dfs_impl	load		2019-06-13 23:38:07-07	42
16152	solution	dfs_impl	load		2019-06-13 23:38:38-07	42
16162	solution	dfs_impl	load		2019-06-13 23:39:53-07	42
16172	solution	dfs_impl	load		2019-06-13 23:41:03-07	42
16182	parsons	dfs_impl	load	{"code":""}	2019-06-17 17:55:17-07	2
16192	parsons	dfs_impl	move_on	{"code":""}	2019-06-17 17:55:19-07	2
16202	solution	dfs_impl	load		2019-06-17 17:55:20-07	2
16212	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-17 22:25:43-07	2
16222	parsons	demo	move_on	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-17 22:25:45-07	2
16232	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-17 22:25:46-07	2
16242	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-17 22:25:48-07	2
16252	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-17 22:25:50-07	2
16262	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-17 22:28:03-07	2
16272	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-17 22:28:11-07	2
16282	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-17 22:28:23-07	2
16292	parsons	dfs_impl	load	{"code":""}	2019-06-17 22:29:08-07	12
16302	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  def visit(node):\\n    continue\\n"}	2019-06-17 22:29:23-07	12
16312	parsons	dfs_impl	load	{"code":""}	2019-06-17 22:31:44-07	2
17382	parsons	dfs_impl	load		2019-06-18 08:09:18-07	2
16322	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  node.setEnter()\\nprint(testing)\\n"}	2019-06-17 22:31:59-07	2
16332	solution	dfs_impl	load		2019-06-17 22:32:00-07	2
16342	solution	dfs_impl	move_on		2019-06-17 22:32:56-07	2
16352	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 22:34:10-07	2
16362	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n# testing\\n"}	2019-06-17 22:34:20-07	2
16372	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 22:34:21-07	2
16382	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  nodes.setExit()\\n"}	2019-06-17 22:34:27-07	2
16392	parsons	dfs_impl	load	{"code":""}	2019-06-17 22:36:54-07	2
16402	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  continue\\n"}	2019-06-17 22:37:03-07	2
16412	solution	dfs_impl	load		2019-06-17 22:37:03-07	2
16422	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 22:38:11-07	2
16432	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\nnode.setExit()\\n"}	2019-06-17 22:38:17-07	2
16442	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 22:38:18-07	2
16452	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  nodes.setExit()\\n"}	2019-06-17 22:38:22-07	2
16462	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 23:10:22-07	2
16472	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 23:10:25-07	2
16482	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 23:10:26-07	2
16492	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-17 23:10:28-07	2
16502	parsons	dfs_impl	load	{"code":""}	2019-06-17 23:18:30-07	2
16512	parsons	dfs_impl	move_on	{"code":""}	2019-06-17 23:18:32-07	2
16522	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:06:43-07	2
16532	parsons	demo	load	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 02:06:49-07	2
16542	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:06:54-07	2
16552	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  continue\\n"}	2019-06-18 02:07:07-07	2
16562	solution	dfs_impl	load		2019-06-18 02:07:08-07	2
16572	solution	dfs_impl	move_on		2019-06-18 02:07:17-07	2
16582	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:07:18-07	2
16592	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\nprint(test)\\n"}	2019-06-18 02:07:31-07	2
16602	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:07:31-07	2
16612	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  test.setExit()\\n"}	2019-06-18 02:07:39-07	2
16622	solution	dfs_impl_id2	load		2019-06-18 02:07:40-07	2
16632	solution	dfs_impl_id2	load		2019-06-18 02:08:00-07	2
16642	solution	dfs_impl_id2	move_on		2019-06-18 02:08:03-07	2
16652	parsons	demo	load	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 02:08:12-07	2
16662	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:08:16-07	2
16672	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  print(testing)\\n"}	2019-06-18 02:08:31-07	2
16682	solution	dfs_impl	load		2019-06-18 02:08:32-07	2
16692	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:12:55-07	2
16702	parsons	dfs_impl	move_on	{"code":"print(testing)\\n"}	2019-06-18 02:13:07-07	2
16712	solution	dfs_impl	load		2019-06-18 02:13:07-07	2
16722	solution	dfs_impl	move_on		2019-06-18 02:13:33-07	2
17392	parsons	dfs_impl	load		2019-06-18 08:24:12-07	2
17402	coding	dfs_impl	load		2019-06-18 08:24:13-07	2
16732	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:13:34-07	2
16742	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:13:38-07	2
16752	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:13:39-07	2
16762	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:13:42-07	2
16772	solution	dfs_impl_id2	load		2019-06-18 02:13:42-07	2
16782	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:16:41-07	2
16792	parsons	dfs_impl	move_on	{"code":"visit(node)\\n"}	2019-06-18 02:16:48-07	2
16802	solution	dfs_impl	load		2019-06-18 02:16:49-07	2
16812	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:18:33-07	2
16822	parsons	dfs_impl	move_on	{"code":"visit(neighbor)\\n"}	2019-06-18 02:18:41-07	2
16832	solution	dfs_impl	load		2019-06-18 02:18:42-07	2
16842	solution	dfs_impl	move_on		2019-06-18 02:18:58-07	2
16852	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:20:16-07	2
16862	parsons	dfs_impl	move_on	{"code":"print(hello this is a test)\\n"}	2019-06-18 02:20:33-07	2
16872	solution	dfs_impl	load		2019-06-18 02:20:33-07	2
16882	solution	dfs_impl	move_on		2019-06-18 02:21:11-07	2
16892	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:21:12-07	2
16902	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:21:15-07	2
16912	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:21:16-07	2
16922	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 02:21:18-07	2
16932	solution	dfs_impl_id2	load		2019-06-18 02:21:19-07	2
16942	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:25:55-07	2
16952	parsons	dfs_impl	move_on	{"code":"for neighbor in node.getNeighbors():\\n"}	2019-06-18 02:26:01-07	2
16962	solution	dfs_impl	load		2019-06-18 02:26:01-07	2
16972	parsons	demo	load	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 02:37:54-07	2
16982	parsons	dfs_impl	load	{"code":""}	2019-06-18 02:37:58-07	2
16992	parsons	dfs_impl	move_on	{"code":"node.setExit()\\n"}	2019-06-18 02:38:04-07	2
17002	solution	dfs_impl	load		2019-06-18 02:38:06-07	2
17012	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:55:52-07	2
17022	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:56:01-07	2
17032	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:56:48-07	2
17042	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:56:50-07	2
17052	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:57:36-07	2
17062	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:58:19-07	2
17072	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:58:25-07	2
17082	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-18 07:58:59-07	2
17092	parsons	dfs_impl	load		2019-06-18 07:59:07-07	2
17102	coding	dfs_impl	load		2019-06-18 08:08:53-07	2
17112	solution	dfs_impl	load		2019-06-18 08:08:54-07	2
17122	coding	dfs_impl	load		2019-06-18 08:08:54-07	2
17132	coding	dfs_impl	load		2019-06-18 08:08:55-07	2
17142	solution	dfs_impl	load		2019-06-18 08:08:56-07	2
17152	coding	dfs_impl	load		2019-06-18 08:08:57-07	2
17162	parsons	dfs_impl	load		2019-06-18 08:08:58-07	2
17172	solution	dfs_impl	load		2019-06-18 08:08:59-07	2
17182	solution	dfs_impl	load		2019-06-18 08:08:59-07	2
17192	solution	dfs_impl	load		2019-06-18 08:09:00-07	2
17202	coding	dfs_impl	load		2019-06-18 08:09:01-07	2
17212	parsons	dfs_impl	load		2019-06-18 08:09:03-07	2
17222	solution	dfs_impl	load		2019-06-18 08:09:04-07	2
17232	solution	dfs_impl	load		2019-06-18 08:09:05-07	2
17242	coding	dfs_impl	load		2019-06-18 08:09:06-07	2
17252	solution	dfs_impl	load		2019-06-18 08:09:07-07	2
17262	solution	dfs_impl	load		2019-06-18 08:09:08-07	2
17272	solution	dfs_impl	load		2019-06-18 08:09:09-07	2
17282	parsons	dfs_impl	load		2019-06-18 08:09:09-07	2
17292	parsons	dfs_impl	load		2019-06-18 08:09:10-07	2
17302	parsons	dfs_impl	load		2019-06-18 08:09:11-07	2
17312	parsons	dfs_impl	load		2019-06-18 08:09:12-07	2
17322	coding	dfs_impl	load		2019-06-18 08:09:13-07	2
17332	coding	dfs_impl	load		2019-06-18 08:09:14-07	2
17342	coding	dfs_impl	load		2019-06-18 08:09:14-07	2
17352	coding	dfs_impl	load		2019-06-18 08:09:15-07	2
17362	solution	dfs_impl	load		2019-06-18 08:09:16-07	2
17372	parsons	dfs_impl	load		2019-06-18 08:09:17-07	2
17412	solution	dfs_impl	load		2019-06-18 08:24:14-07	2
17422	coding	dfs_impl	load		2019-06-18 08:24:15-07	2
17432	parsons	dfs_impl	load		2019-06-18 08:24:16-07	2
17442	coding	dfs_impl	load		2019-06-18 08:24:17-07	2
17452	coding	dfs_impl	load		2019-06-18 08:24:18-07	2
17462	coding	dfs_impl	load		2019-06-18 08:24:18-07	2
17472	coding	dfs_impl	load		2019-06-18 08:24:19-07	2
17482	solution	dfs_impl	load		2019-06-18 08:24:20-07	2
17492	parsons	dfs_impl	load		2019-06-18 08:24:21-07	2
17502	solution	dfs_impl	load		2019-06-18 08:24:22-07	2
17512	parsons	dfs_impl	load		2019-06-18 08:24:23-07	2
17522	parsons	dfs_impl	load		2019-06-18 08:24:23-07	2
17532	solution	dfs_impl	load		2019-06-18 08:24:24-07	2
17542	parsons	dfs_impl	load		2019-06-18 08:24:25-07	2
17552	parsons	dfs_impl	load		2019-06-18 08:24:26-07	2
17562	solution	dfs_impl	load		2019-06-18 08:24:27-07	2
17572	coding	dfs_impl	load		2019-06-18 08:24:28-07	2
17582	coding	dfs_impl	load		2019-06-18 08:24:28-07	2
17592	parsons	dfs_impl	load		2019-06-18 08:24:29-07	2
17602	coding	dfs_impl	load		2019-06-18 08:24:30-07	2
17612	parsons	dfs_impl	load		2019-06-18 08:24:31-07	2
17622	parsons	dfs_impl	load		2019-06-18 08:24:32-07	2
17632	coding	dfs_impl	load		2019-06-18 08:24:33-07	2
17642	parsons	dfs_impl	load		2019-06-18 08:24:33-07	2
17652	coding	dfs_impl	load		2019-06-18 08:24:34-07	2
17662	coding	dfs_impl	load		2019-06-18 08:24:35-07	2
17672	solution	dfs_impl	load		2019-06-18 08:24:36-07	2
17682	parsons	dfs_impl	load		2019-06-18 08:24:37-07	2
17692	solution	dfs_impl	load		2019-06-18 08:24:38-07	2
17702	parsons	dfs_impl	load		2019-06-18 08:24:39-07	2
17712	solution	dfs_impl	load		2019-06-18 08:24:39-07	2
17722	solution	dfs_impl	load		2019-06-18 08:24:40-07	2
17732	coding	dfs_impl	load		2019-06-18 08:24:41-07	2
17742	coding	dfs_impl	load		2019-06-18 08:24:42-07	2
17752	parsons	dfs_impl	load		2019-06-18 08:24:43-07	2
17762	parsons	dfs_impl	load		2019-06-18 08:24:44-07	2
17772	parsons	dfs_impl	load		2019-06-18 08:24:44-07	2
17782	coding	dfs_impl	load		2019-06-18 08:24:45-07	2
17792	coding	dfs_impl	load		2019-06-18 08:24:46-07	2
17802	solution	dfs_impl	load		2019-06-18 08:24:47-07	2
17812	coding	dfs_impl	load		2019-06-18 08:24:48-07	2
17822	coding	dfs_impl	load		2019-06-18 08:24:49-07	2
17832	solution	dfs_impl	load		2019-06-18 08:24:49-07	2
17842	solution	dfs_impl	load		2019-06-18 08:24:50-07	2
17852	parsons	dfs_impl	load		2019-06-18 08:24:51-07	2
17862	parsons	dfs_impl	load		2019-06-18 08:24:52-07	2
17872	parsons	dfs_impl	load		2019-06-18 08:24:53-07	2
17882	coding	dfs_impl	load		2019-06-18 08:24:54-07	2
17892	solution	dfs_impl	load		2019-06-18 08:24:54-07	2
17902	solution	dfs_impl	load		2019-06-18 08:24:55-07	2
17912	coding	dfs_impl	load		2019-06-18 08:24:56-07	2
17922	parsons	dfs_impl	load		2019-06-18 08:24:57-07	2
17932	solution	dfs_impl	load		2019-06-18 08:24:58-07	2
17942	solution	dfs_impl	load		2019-06-18 08:24:59-07	2
17952	coding	dfs_impl	load		2019-06-18 08:24:59-07	2
17962	coding	dfs_impl	load		2019-06-18 08:25:00-07	2
17972	parsons	dfs_impl	load		2019-06-18 08:25:01-07	2
17982	coding	dfs_impl	load		2019-06-18 08:25:02-07	2
17992	coding	dfs_impl	load		2019-06-18 08:25:03-07	2
18002	coding	dfs_impl	load		2019-06-18 08:25:04-07	2
18012	parsons	dfs_impl	load		2019-06-18 08:25:05-07	2
18022	coding	dfs_impl	load		2019-06-18 08:25:05-07	2
18032	coding	dfs_impl	load		2019-06-18 08:25:06-07	2
18042	parsons	dfs_impl	load		2019-06-18 08:25:07-07	2
18052	parsons	dfs_impl	load		2019-06-18 08:25:08-07	2
18062	solution	dfs_impl	load		2019-06-18 08:25:09-07	2
18072	parsons	dfs_impl	load		2019-06-18 08:25:09-07	2
18082	parsons	dfs_impl	load		2019-06-18 08:25:10-07	2
18092	parsons	dfs_impl	load		2019-06-18 08:25:11-07	2
18102	solution	dfs_impl	load		2019-06-18 08:25:13-07	2
18112	coding	dfs_impl	load		2019-06-18 08:25:14-07	2
18122	coding	dfs_impl	load		2019-06-18 08:25:15-07	2
18132	solution	dfs_impl	load		2019-06-18 08:25:16-07	2
18142	parsons	dfs_impl	load		2019-06-18 08:25:17-07	2
18152	parsons	dfs_impl	load		2019-06-18 08:25:17-07	2
18162	parsons	dfs_impl	load		2019-06-18 08:25:18-07	2
18172	coding	dfs_impl	load		2019-06-18 08:25:19-07	2
18182	parsons	dfs_impl	load		2019-06-18 08:25:20-07	2
18192	parsons	dfs_impl	load		2019-06-18 08:25:21-07	2
18202	coding	dfs_impl	load		2019-06-18 08:25:22-07	2
18212	solution	dfs_impl	load		2019-06-18 08:25:22-07	2
18222	parsons	dfs_impl	load		2019-06-18 08:25:23-07	2
18232	parsons	dfs_impl	load		2019-06-18 08:25:24-07	2
18242	coding	dfs_impl	load		2019-06-18 08:25:25-07	2
18252	solution	dfs_impl	load		2019-06-18 08:25:26-07	2
18262	solution	dfs_impl	load		2019-06-18 08:25:27-07	2
18272	parsons	dfs_impl	load		2019-06-18 08:25:27-07	2
18282	solution	dfs_impl	load		2019-06-18 08:25:28-07	2
18292	coding	dfs_impl	load		2019-06-18 08:25:29-07	2
18302	parsons	dfs_impl	load		2019-06-18 08:25:30-07	2
18312	parsons	dfs_impl	load		2019-06-18 08:25:31-07	2
18322	coding	dfs_impl	load		2019-06-18 08:25:32-07	2
18332	solution	dfs_impl	load		2019-06-18 08:25:32-07	2
18342	coding	dfs_impl	load		2019-06-18 08:25:33-07	2
18352	parsons	dfs_impl	load		2019-06-18 08:25:34-07	2
18362	parsons	dfs_impl	load		2019-06-18 08:25:35-07	2
18372	coding	dfs_impl	load		2019-06-18 08:25:36-07	2
18382	coding	dfs_impl	load		2019-06-18 08:25:37-07	2
18392	parsons	dfs_impl	load		2019-06-18 08:25:37-07	2
18402	solution	dfs_impl	load		2019-06-18 08:25:38-07	2
18412	solution	dfs_impl	load		2019-06-18 08:25:39-07	2
18422	coding	dfs_impl	load		2019-06-18 08:25:40-07	2
18432	solution	dfs_impl	load		2019-06-18 08:25:41-07	2
18442	solution	dfs_impl	load		2019-06-18 08:25:41-07	2
18452	coding	dfs_impl	load		2019-06-18 08:25:42-07	2
18462	coding	dfs_impl	load		2019-06-18 08:25:43-07	2
18472	coding	dfs_impl	load		2019-06-18 08:25:44-07	2
18482	solution	dfs_impl	load		2019-06-18 08:25:45-07	2
18492	solution	dfs_impl	load		2019-06-18 08:25:46-07	2
18502	solution	dfs_impl	load		2019-06-18 08:25:46-07	2
18512	solution	dfs_impl	load		2019-06-18 08:25:47-07	2
18522	solution	dfs_impl	load		2019-06-18 08:25:48-07	2
18532	coding	dfs_impl	load		2019-06-18 08:25:49-07	2
18542	solution	dfs_impl	load		2019-06-18 08:25:50-07	2
18552	solution	dfs_impl	load		2019-06-18 08:25:51-07	2
18562	coding	dfs_impl	load		2019-06-18 08:25:51-07	2
18572	parsons	dfs_impl	load		2019-06-18 08:25:52-07	2
18582	solution	dfs_impl	load		2019-06-18 08:25:53-07	2
18592	parsons	dfs_impl	load		2019-06-18 08:25:54-07	2
18602	parsons	dfs_impl	load		2019-06-18 08:25:55-07	2
18612	coding	dfs_impl	load		2019-06-18 08:25:56-07	2
18622	coding	dfs_impl	load		2019-06-18 08:25:56-07	2
18632	parsons	dfs_impl	load		2019-06-18 08:25:57-07	2
18642	solution	dfs_impl	load		2019-06-18 08:25:58-07	2
18652	parsons	dfs_impl	load		2019-06-18 08:25:59-07	2
18662	parsons	dfs_impl	load		2019-06-18 08:26:00-07	2
18672	parsons	dfs_impl	load		2019-06-18 08:26:01-07	2
18682	solution	dfs_impl	load		2019-06-18 08:26:01-07	2
18692	parsons	dfs_impl	load		2019-06-18 08:26:02-07	2
18702	coding	dfs_impl	load		2019-06-18 08:26:03-07	2
18712	parsons	dfs_impl	load		2019-06-18 08:26:04-07	2
18722	parsons	dfs_impl	load		2019-06-18 08:26:05-07	2
18732	parsons	dfs_impl	load		2019-06-18 08:26:05-07	2
18742	solution	dfs_impl	load		2019-06-18 08:26:06-07	2
18752	solution	dfs_impl	load		2019-06-18 08:26:07-07	2
18762	parsons	dfs_impl	load		2019-06-18 08:26:08-07	2
18772	coding	dfs_impl	load		2019-06-18 08:26:09-07	2
18782	coding	dfs_impl	load		2019-06-18 08:26:10-07	2
18792	coding	dfs_impl	load		2019-06-18 08:26:10-07	2
18802	parsons	dfs_impl	load		2019-06-18 08:26:11-07	2
18812	coding	dfs_impl	load		2019-06-18 08:26:13-07	2
18822	parsons	dfs_impl	load		2019-06-18 08:26:14-07	2
18832	coding	dfs_impl	load		2019-06-18 08:26:15-07	2
18842	solution	dfs_impl	load		2019-06-18 08:26:16-07	2
18852	coding	dfs_impl	load		2019-06-18 08:26:17-07	2
18862	parsons	dfs_impl	load		2019-06-18 08:26:18-07	2
18872	solution	dfs_impl	load		2019-06-18 08:26:19-07	2
18882	parsons	dfs_impl	load		2019-06-18 08:26:20-07	2
18892	solution	dfs_impl	load		2019-06-18 08:26:20-07	2
18902	solution	dfs_impl	load		2019-06-18 08:26:21-07	2
18912	coding	dfs_impl	load		2019-06-18 08:26:22-07	2
18922	solution	dfs_impl	load		2019-06-18 08:26:23-07	2
18932	parsons	dfs_impl	load		2019-06-18 08:26:24-07	2
18942	solution	dfs_impl	load		2019-06-18 08:26:24-07	2
18952	parsons	dfs_impl	load		2019-06-18 08:26:25-07	2
18962	parsons	dfs_impl	load		2019-06-18 08:26:26-07	2
18972	solution	dfs_impl	load		2019-06-18 08:26:27-07	2
18982	solution	dfs_impl	load		2019-06-18 08:26:28-07	2
18992	solution	dfs_impl	load		2019-06-18 08:26:29-07	2
19002	coding	dfs_impl	load		2019-06-18 08:26:29-07	2
19012	solution	dfs_impl	load		2019-06-18 08:26:30-07	2
19022	solution	dfs_impl	load		2019-06-18 08:26:31-07	2
19032	coding	dfs_impl	load		2019-06-18 08:26:32-07	2
19042	solution	dfs_impl	load		2019-06-18 08:26:33-07	2
19052	coding	dfs_impl	load		2019-06-18 08:26:34-07	2
19062	solution	dfs_impl	load		2019-06-18 08:26:34-07	2
19072	parsons	dfs_impl	load		2019-06-18 08:26:35-07	2
19082	coding	dfs_impl	load		2019-06-18 08:26:36-07	2
19092	coding	dfs_impl	load		2019-06-18 08:26:37-07	2
19102	parsons	dfs_impl	load		2019-06-18 08:26:38-07	2
19112	coding	dfs_impl	load		2019-06-18 08:26:39-07	2
19122	coding	dfs_impl	load		2019-06-18 08:26:40-07	2
19132	coding	dfs_impl	load		2019-06-18 08:26:40-07	2
19142	coding	dfs_impl	load		2019-06-18 08:26:41-07	2
19152	coding	dfs_impl	load		2019-06-18 08:26:42-07	2
19162	solution	dfs_impl	load		2019-06-18 08:26:43-07	2
19172	solution	dfs_impl	load		2019-06-18 08:26:44-07	2
19182	parsons	dfs_impl	load		2019-06-18 08:26:45-07	2
19192	solution	dfs_impl	load		2019-06-18 08:26:45-07	2
19202	parsons	dfs_impl	load		2019-06-18 08:26:46-07	2
19212	solution	dfs_impl	load		2019-06-18 08:26:47-07	2
19222	parsons	dfs_impl	load		2019-06-18 08:26:48-07	2
19232	parsons	dfs_impl	load		2019-06-18 08:26:49-07	2
19242	solution	dfs_impl	load		2019-06-18 08:26:50-07	2
19252	solution	dfs_impl	load		2019-06-18 08:26:51-07	2
19262	parsons	dfs_impl	load		2019-06-18 08:26:52-07	2
19272	solution	dfs_impl	load		2019-06-18 08:26:52-07	2
19282	coding	dfs_impl	load		2019-06-18 08:26:53-07	2
19292	coding	dfs_impl	load		2019-06-18 08:26:54-07	2
19302	coding	dfs_impl	load		2019-06-18 08:26:55-07	2
19312	coding	dfs_impl	load		2019-06-18 08:26:55-07	2
19322	coding	dfs_impl	load		2019-06-18 08:26:56-07	2
19332	coding	dfs_impl	load		2019-06-18 08:26:57-07	2
19342	parsons	dfs_impl	load		2019-06-18 08:26:58-07	2
19352	coding	dfs_impl	load		2019-06-18 08:26:59-07	2
19362	coding	dfs_impl	load		2019-06-18 08:26:59-07	2
19372	coding	dfs_impl	load		2019-06-18 08:27:00-07	2
19382	solution	dfs_impl	load		2019-06-18 08:28:27-07	2
19392	solution	dfs_impl	load		2019-06-18 08:28:28-07	2
19402	coding	dfs_impl	load		2019-06-18 08:28:29-07	2
19412	coding	dfs_impl	load		2019-06-18 08:28:30-07	2
19422	solution	dfs_impl	load		2019-06-18 08:28:31-07	2
19432	solution	dfs_impl	load		2019-06-18 08:28:31-07	2
19442	solution	dfs_impl	load		2019-06-18 08:28:32-07	2
19452	parsons	dfs_impl	load		2019-06-18 08:28:33-07	2
19462	coding	dfs_impl	load		2019-06-18 08:28:34-07	2
19472	coding	dfs_impl	load		2019-06-18 08:28:35-07	2
19482	coding	dfs_impl	load		2019-06-18 08:28:35-07	2
19492	coding	dfs_impl	load		2019-06-18 08:28:36-07	2
19502	solution	dfs_impl	load		2019-06-18 08:28:37-07	2
19512	solution	dfs_impl	load		2019-06-18 08:28:38-07	2
19522	parsons	dfs_impl	load		2019-06-18 08:28:39-07	2
19532	parsons	dfs_impl	load		2019-06-18 08:28:39-07	2
19542	parsons	dfs_impl	load		2019-06-18 08:28:40-07	2
19552	solution	dfs_impl	load		2019-06-18 08:28:41-07	2
19562	coding	dfs_impl	load		2019-06-18 08:28:42-07	2
19572	coding	dfs_impl	load		2019-06-18 08:28:43-07	2
19582	parsons	dfs_impl	load		2019-06-18 08:28:43-07	2
19592	parsons	dfs_impl	load		2019-06-18 08:28:44-07	2
19602	coding	dfs_impl	load		2019-06-18 08:28:45-07	2
19612	solution	dfs_impl	load		2019-06-18 08:28:46-07	2
19622	coding	dfs_impl	load		2019-06-18 08:28:47-07	2
19632	parsons	dfs_impl	load		2019-06-18 08:28:48-07	2
19642	solution	dfs_impl	load		2019-06-18 08:28:48-07	2
19652	solution	dfs_impl	load		2019-06-18 08:28:49-07	2
19662	parsons	dfs_impl	load		2019-06-18 08:28:50-07	2
19672	solution	dfs_impl	load		2019-06-18 08:28:51-07	2
19682	parsons	dfs_impl	load		2019-06-18 08:28:52-07	2
19692	parsons	dfs_impl	load		2019-06-18 08:28:53-07	2
19702	parsons	dfs_impl	load		2019-06-18 08:28:53-07	2
19712	coding	dfs_impl	load		2019-06-18 08:28:54-07	2
19722	parsons	dfs_impl	load		2019-06-18 08:28:55-07	2
19732	coding	dfs_impl	load		2019-06-18 08:28:56-07	2
19742	parsons	dfs_impl	load		2019-06-18 08:28:57-07	2
19752	coding	dfs_impl	load		2019-06-18 08:28:57-07	2
19762	parsons	dfs_impl	load		2019-06-18 08:28:58-07	2
19772	solution	dfs_impl	load		2019-06-18 08:28:59-07	2
19782	solution	dfs_impl	load		2019-06-18 08:29:00-07	2
19792	solution	dfs_impl	load		2019-06-18 08:29:01-07	2
19802	solution	dfs_impl	load		2019-06-18 08:29:01-07	2
19812	solution	dfs_impl	load		2019-06-18 08:29:02-07	2
19822	coding	dfs_impl	load		2019-06-18 08:29:03-07	2
19832	coding	dfs_impl	load		2019-06-18 08:29:04-07	2
19842	parsons	dfs_impl	load		2019-06-18 08:29:04-07	2
19852	coding	dfs_impl	load		2019-06-18 08:29:05-07	2
19862	coding	dfs_impl	load		2019-06-18 08:29:06-07	2
19872	coding	dfs_impl	load		2019-06-18 08:29:07-07	2
19882	coding	dfs_impl	load		2019-06-18 08:29:08-07	2
19892	solution	dfs_impl	load		2019-06-18 08:29:09-07	2
19902	solution	dfs_impl	load		2019-06-18 08:29:09-07	2
19912	parsons	dfs_impl	load		2019-06-18 08:29:10-07	2
19922	coding	dfs_impl	load		2019-06-18 08:29:11-07	2
19932	coding	dfs_impl	load		2019-06-18 08:29:12-07	2
19942	coding	dfs_impl	load		2019-06-18 08:29:13-07	2
19952	coding	dfs_impl	load		2019-06-18 08:29:14-07	2
19962	coding	dfs_impl	load		2019-06-18 08:29:15-07	2
19972	solution	dfs_impl	load		2019-06-18 08:29:53-07	2
19982	solution	dfs_impl	load		2019-06-18 08:29:54-07	2
19992	coding	dfs_impl	load		2019-06-18 08:29:55-07	2
20002	coding	dfs_impl	load		2019-06-18 08:29:56-07	2
20012	coding	dfs_impl	load		2019-06-18 08:29:57-07	2
20022	parsons	dfs_impl	load		2019-06-18 08:29:57-07	2
20032	parsons	dfs_impl	load		2019-06-18 08:29:58-07	2
20042	parsons	dfs_impl	load		2019-06-18 08:29:59-07	2
20052	parsons	dfs_impl	load		2019-06-18 08:30:00-07	2
20062	parsons	dfs_impl	load		2019-06-18 08:30:01-07	2
20072	coding	dfs_impl	load		2019-06-18 08:30:02-07	2
20082	solution	dfs_impl	load		2019-06-18 08:30:02-07	2
20092	solution	dfs_impl	load		2019-06-18 08:30:03-07	2
20102	parsons	dfs_impl	load		2019-06-18 08:30:04-07	2
20112	coding	dfs_impl	load		2019-06-18 08:30:05-07	2
20122	coding	dfs_impl	load		2019-06-18 08:30:06-07	2
20132	parsons	dfs_impl	load		2019-06-18 08:30:06-07	2
20142	solution	dfs_impl	load		2019-06-18 08:30:07-07	2
20152	parsons	dfs_impl	load		2019-06-18 08:30:08-07	2
20162	solution	dfs_impl	load		2019-06-18 08:30:09-07	2
20172	coding	dfs_impl	load		2019-06-18 08:30:10-07	2
20182	parsons	dfs_impl	load		2019-06-18 08:30:11-07	2
20192	parsons	dfs_impl	load		2019-06-18 08:30:11-07	2
20202	solution	dfs_impl	load		2019-06-18 08:30:12-07	2
20212	coding	dfs_impl	load		2019-06-18 08:30:49-07	2
20222	solution	dfs_impl	load		2019-06-18 08:30:50-07	2
20232	parsons	dfs_impl	load		2019-06-18 08:30:50-07	2
20242	parsons	dfs_impl	load		2019-06-18 08:30:51-07	2
20252	parsons	dfs_impl	load		2019-06-18 08:30:52-07	2
20262	parsons	dfs_impl	load		2019-06-18 08:30:53-07	2
20272	solution	dfs_impl	load		2019-06-18 08:30:54-07	2
20282	parsons	dfs_impl	load		2019-06-18 08:30:54-07	2
20292	solution	dfs_impl	load		2019-06-18 08:30:55-07	2
20302	parsons	dfs_impl	load		2019-06-18 08:30:56-07	2
20312	coding	dfs_impl	load		2019-06-18 08:30:57-07	2
20322	coding	dfs_impl	load		2019-06-18 08:30:58-07	2
20332	parsons	dfs_impl	load		2019-06-18 08:30:59-07	2
20342	parsons	dfs_impl	load		2019-06-18 08:30:59-07	2
20352	parsons	dfs_impl	load		2019-06-18 08:31:00-07	2
20362	parsons	dfs_impl	load		2019-06-18 08:31:01-07	2
20372	parsons	dfs_impl	load		2019-06-18 08:31:02-07	2
20382	solution	dfs_impl	load		2019-06-18 08:31:03-07	2
20392	solution	dfs_impl	load		2019-06-18 08:31:03-07	2
20402	parsons	dfs_impl	load		2019-06-18 08:31:04-07	2
20412	parsons	dfs_impl	load		2019-06-18 08:31:05-07	2
20422	solution	dfs_impl	load		2019-06-18 08:31:06-07	2
20432	solution	dfs_impl	load		2019-06-18 08:31:07-07	2
20442	solution	dfs_impl	load		2019-06-18 08:31:08-07	2
20452	parsons	dfs_impl	load		2019-06-18 08:31:09-07	2
20462	parsons	dfs_impl	load		2019-06-18 08:31:09-07	2
20472	coding	dfs_impl	load		2019-06-18 08:31:10-07	2
20482	coding	dfs_impl	load		2019-06-18 08:31:11-07	2
20492	parsons	dfs_impl	load		2019-06-18 08:31:12-07	2
20502	parsons	dfs_impl	load		2019-06-18 08:31:13-07	2
20512	solution	dfs_impl	load		2019-06-18 08:31:13-07	2
20522	solution	dfs_impl	load		2019-06-18 08:31:14-07	2
20532	coding	dfs_impl	load		2019-06-18 08:31:16-07	2
20542	solution	dfs_impl	load		2019-06-18 08:31:17-07	2
20552	parsons	dfs_impl	load		2019-06-18 08:31:19-07	2
20562	solution	dfs_impl	load		2019-06-18 08:31:19-07	2
20572	solution	dfs_impl	load		2019-06-18 08:31:20-07	2
20582	solution	dfs_impl	load		2019-06-18 08:31:21-07	2
20592	parsons	dfs_impl	load		2019-06-18 08:31:22-07	2
20602	solution	dfs_impl	load		2019-06-18 08:31:23-07	2
20612	coding	dfs_impl	load		2019-06-18 08:31:23-07	2
20622	solution	dfs_impl	load		2019-06-18 08:31:24-07	2
20632	parsons	dfs_impl	load		2019-06-18 08:31:25-07	2
20642	parsons	dfs_impl	load		2019-06-18 08:31:26-07	2
20652	solution	dfs_impl	load		2019-06-18 08:31:27-07	2
20662	coding	dfs_impl	load		2019-06-18 08:31:27-07	2
20672	solution	dfs_impl	load		2019-06-18 08:31:28-07	2
20682	parsons	dfs_impl	load		2019-06-18 08:31:29-07	2
20692	parsons	dfs_impl	load		2019-06-18 08:31:30-07	2
20702	parsons	dfs_impl	load		2019-06-18 08:31:31-07	2
20712	solution	dfs_impl	load		2019-06-18 08:31:32-07	2
20722	parsons	dfs_impl	load		2019-06-18 08:31:33-07	2
20732	coding	dfs_impl	load		2019-06-18 08:31:33-07	2
20742	parsons	dfs_impl	load		2019-06-18 08:31:34-07	2
20752	coding	dfs_impl	load		2019-06-18 08:31:35-07	2
20762	coding	dfs_impl	load		2019-06-18 08:31:36-07	2
20772	coding	dfs_impl	load		2019-06-18 08:31:36-07	2
20782	coding	dfs_impl	load		2019-06-18 08:31:37-07	2
20792	solution	dfs_impl	load		2019-06-18 08:31:38-07	2
20802	coding	dfs_impl	load		2019-06-18 08:31:39-07	2
20812	parsons	dfs_impl	load		2019-06-18 08:31:40-07	2
20822	coding	dfs_impl	load		2019-06-18 08:31:40-07	2
20832	parsons	dfs_impl	load		2019-06-18 08:31:41-07	2
20842	solution	dfs_impl	load		2019-06-18 08:31:42-07	2
20852	coding	dfs_impl	load		2019-06-18 08:31:43-07	2
20862	coding	dfs_impl	load		2019-06-18 08:31:44-07	2
20872	coding	dfs_impl	load		2019-06-18 08:31:44-07	2
20882	coding	dfs_impl	load		2019-06-18 08:31:45-07	2
20892	parsons	dfs_impl	load		2019-06-18 08:31:46-07	2
20902	parsons	dfs_impl	load		2019-06-18 08:31:47-07	2
20912	parsons	dfs_impl	load		2019-06-18 08:31:48-07	2
20922	solution	dfs_impl	load		2019-06-18 08:31:49-07	2
20932	solution	dfs_impl	load		2019-06-18 08:31:49-07	2
20942	coding	dfs_impl	load		2019-06-18 08:31:50-07	2
20952	parsons	dfs_impl	load		2019-06-18 08:31:51-07	2
20962	solution	dfs_impl	load		2019-06-18 08:31:52-07	2
20972	parsons	dfs_impl	load		2019-06-18 08:31:53-07	2
20982	coding	dfs_impl	load		2019-06-18 08:31:53-07	2
20992	parsons	dfs_impl	load		2019-06-18 08:31:54-07	2
21002	coding	dfs_impl	load		2019-06-18 08:31:55-07	2
21012	solution	dfs_impl	load		2019-06-18 08:31:56-07	2
21022	solution	dfs_impl	load		2019-06-18 08:31:58-07	2
21032	solution	dfs_impl	load		2019-06-18 08:31:59-07	2
21042	coding	dfs_impl	load		2019-06-18 08:32:00-07	2
21052	coding	dfs_impl	load		2019-06-18 08:32:01-07	2
21062	parsons	dfs_impl	load		2019-06-18 08:32:02-07	2
21072	solution	dfs_impl	load		2019-06-18 08:32:02-07	2
21082	coding	dfs_impl	load		2019-06-18 08:32:03-07	2
21092	coding	dfs_impl	load		2019-06-18 08:32:04-07	2
21102	solution	dfs_impl	load		2019-06-18 08:32:05-07	2
21112	parsons	dfs_impl	load		2019-06-18 08:32:05-07	2
21122	parsons	dfs_impl	load		2019-06-18 08:32:06-07	2
21132	solution	dfs_impl	load		2019-06-18 08:32:08-07	2
21142	parsons	dfs_impl	load		2019-06-18 08:32:09-07	2
21152	solution	dfs_impl	load		2019-06-18 08:32:09-07	2
21162	solution	dfs_impl	load		2019-06-18 08:32:10-07	2
21172	solution	dfs_impl	load		2019-06-18 08:32:11-07	2
21182	parsons	dfs_impl	load		2019-06-18 08:32:12-07	2
21192	coding	dfs_impl	load		2019-06-18 08:32:13-07	2
21202	solution	dfs_impl	load		2019-06-18 08:32:13-07	2
21212	coding	dfs_impl	load		2019-06-18 08:32:14-07	2
21222	solution	dfs_impl	load		2019-06-18 08:32:15-07	2
21232	solution	dfs_impl	load		2019-06-18 08:32:17-07	2
21242	solution	dfs_impl	load		2019-06-18 08:32:18-07	2
21252	solution	dfs_impl	load		2019-06-18 08:32:19-07	2
21262	parsons	dfs_impl	load		2019-06-18 08:32:20-07	2
21272	coding	dfs_impl	load		2019-06-18 08:32:21-07	2
21282	solution	dfs_impl	load		2019-06-18 08:32:22-07	2
21292	solution	dfs_impl	load		2019-06-18 08:32:23-07	2
21302	parsons	dfs_impl	load		2019-06-18 08:32:24-07	2
21312	coding	dfs_impl	load		2019-06-18 08:32:25-07	2
21322	coding	dfs_impl	load		2019-06-18 08:32:26-07	2
21332	parsons	dfs_impl	load		2019-06-18 08:32:27-07	2
21342	coding	dfs_impl	load		2019-06-18 08:32:27-07	2
21352	coding	dfs_impl	load		2019-06-18 08:32:28-07	2
21362	solution	dfs_impl	load		2019-06-18 08:32:29-07	2
21372	parsons	dfs_impl	load		2019-06-18 08:32:30-07	2
21382	coding	dfs_impl	load		2019-06-18 08:32:30-07	2
21392	parsons	dfs_impl	load		2019-06-18 08:32:31-07	2
21402	parsons	dfs_impl	load		2019-06-18 08:32:32-07	2
21412	coding	dfs_impl	load		2019-06-18 08:32:33-07	2
21422	parsons	dfs_impl	load		2019-06-18 08:32:34-07	2
21432	parsons	dfs_impl	load		2019-06-18 08:32:35-07	2
21442	parsons	dfs_impl	load		2019-06-18 08:32:35-07	2
21452	coding	dfs_impl	load		2019-06-18 08:32:36-07	2
21462	parsons	dfs_impl	load		2019-06-18 08:32:37-07	2
21472	coding	dfs_impl	load		2019-06-18 08:32:38-07	2
21482	parsons	dfs_impl	load		2019-06-18 08:32:39-07	2
21492	solution	dfs_impl	load		2019-06-18 08:32:39-07	2
21502	solution	dfs_impl	load		2019-06-18 08:32:40-07	2
21512	parsons	dfs_impl	load		2019-06-18 08:32:41-07	2
21522	solution	dfs_impl	load		2019-06-18 08:32:42-07	2
21532	parsons	dfs_impl	load		2019-06-18 08:32:43-07	2
21542	solution	dfs_impl	load		2019-06-18 08:32:43-07	2
21552	coding	dfs_impl	load		2019-06-18 08:32:44-07	2
21562	parsons	dfs_impl	load		2019-06-18 08:32:45-07	2
21572	parsons	dfs_impl	load		2019-06-18 08:32:46-07	2
21582	parsons	dfs_impl	load		2019-06-18 08:32:47-07	2
21592	solution	dfs_impl	load		2019-06-18 08:32:47-07	2
21602	coding	dfs_impl	load		2019-06-18 08:32:48-07	2
21612	solution	dfs_impl	load		2019-06-18 08:32:49-07	2
21622	parsons	dfs_impl	load		2019-06-18 08:32:50-07	2
21632	solution	dfs_impl	load		2019-06-18 08:32:51-07	2
21642	parsons	dfs_impl	load		2019-06-18 08:32:51-07	2
21652	parsons	dfs_impl	load		2019-06-18 08:32:52-07	2
21662	parsons	dfs_impl	load		2019-06-18 08:32:53-07	2
21672	solution	dfs_impl	load		2019-06-18 08:32:54-07	2
21682	parsons	dfs_impl	load		2019-06-18 08:32:55-07	2
21692	coding	dfs_impl	load		2019-06-18 08:32:55-07	2
21702	parsons	dfs_impl	load		2019-06-18 08:32:56-07	2
21712	parsons	dfs_impl	load		2019-06-18 08:32:57-07	2
21722	coding	dfs_impl	load		2019-06-18 08:32:58-07	2
21732	solution	dfs_impl	load		2019-06-18 08:32:59-07	2
21742	solution	dfs_impl	load		2019-06-18 08:32:59-07	2
21752	parsons	dfs_impl	load		2019-06-18 08:33:00-07	2
21762	parsons	dfs_impl	load		2019-06-18 08:33:01-07	2
21772	parsons	dfs_impl	load		2019-06-18 08:33:02-07	2
21782	solution	dfs_impl	load		2019-06-18 08:33:03-07	2
21792	parsons	dfs_impl	load		2019-06-18 08:33:03-07	2
21802	solution	dfs_impl	load		2019-06-18 08:33:04-07	2
21812	coding	dfs_impl	load		2019-06-18 08:33:05-07	2
21822	parsons	dfs_impl	load		2019-06-18 08:33:06-07	2
21832	solution	dfs_impl	load		2019-06-18 08:33:07-07	2
21842	parsons	dfs_impl	load	{"code":""}	2019-06-18 17:40:44-07	12
21852	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 17:40:51-07	12
21862	solution	dfs_impl	load		2019-06-18 17:40:52-07	12
21872	parsons	dfs_impl	load	{"code":""}	2019-06-18 17:54:59-07	12
21882	parsons	dfs_impl	load	{"code":""}	2019-06-18 17:55:39-07	12
21892	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:33:22-07	2
21902	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  continue\\n"}	2019-06-18 18:33:29-07	2
21912	solution	dfs_impl	load		2019-06-18 18:33:29-07	2
21922	solution	dfs_impl	move_on		2019-06-18 18:33:49-07	2
21932	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 18:33:50-07	2
21942	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 18:33:53-07	2
21952	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 18:33:53-07	2
21962	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 18:33:55-07	2
21972	solution	dfs_impl_id2	load		2019-06-18 18:33:56-07	2
21982	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:41:51-07	2
21992	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 18:42:11-07	2
22002	solution	dfs_impl	load		2019-06-18 18:42:11-07	2
22012	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:44:55-07	2
22022	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 18:45:16-07	2
22032	solution	dfs_impl	load		2019-06-18 18:45:16-07	2
22042	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:49:13-07	2
22052	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 18:49:20-07	2
22062	solution	dfs_impl	load		2019-06-18 18:49:20-07	2
22072	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:54:10-07	2
22082	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 18:54:26-07	2
22092	solution	dfs_impl	load		2019-06-18 18:54:26-07	2
22102	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:55:36-07	2
22112	parsons	dfs_impl	move_on	{"code":"continue\\n"}	2019-06-18 18:55:52-07	2
22122	solution	dfs_impl	load		2019-06-18 18:55:52-07	2
22132	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:58:26-07	2
22142	parsons	dfs_impl	move_on	{"code":"node.setEnter()\\n"}	2019-06-18 18:58:34-07	2
22152	solution	dfs_impl	load		2019-06-18 18:58:35-07	2
22162	parsons	dfs_impl	load	{"code":""}	2019-06-18 18:59:04-07	2
22172	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    node.setEnter()\\n      visit(node)\\n  print(testing)\\n"}	2019-06-18 18:59:35-07	2
22182	solution	dfs_impl	load		2019-06-18 18:59:35-07	2
22192	parsons	dfs_impl	load	{"code":""}	2019-06-18 19:03:08-07	2
22202	parsons	19s_early_pilots/binary_search_1_blanks	load	def binary_search(target, arr):\n	2019-06-18 21:01:40-07	2
22212	parsons	dfs_impl	unload	{"code":""}	2019-06-18 21:09:27-07	2
22222	parsons	demo	load	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 21:09:36-07	2
22232	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:09:38-07	2
22242	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\nvisit(node)\\n"}	2019-06-18 21:09:48-07	2
22252	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:09:55-07	2
22262	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:09:59-07	2
22272	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:10:00-07	2
22282	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:10:02-07	2
22292	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:12:10-07	2
22302	parsons	dfs_impl	move_on	{"code":"node.setEnter()\\n"}	2019-06-18 21:12:14-07	2
22312	solution	dfs_impl	load		2019-06-18 21:12:15-07	2
22322	solution	dfs_impl	move_on		2019-06-18 21:12:24-07	2
22962	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 23:06:58-07	2
23452	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:32:04-07	2
22332	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:12:24-07	2
22342	solution	dfs_impl	move_on		2019-06-18 21:12:43-07	2
22352	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:12:43-07	2
22362	parsons	dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:12:46-07	2
22372	parsons	dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:12:46-07	2
22382	parsons	dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:12:51-07	2
22392	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:13:10-07	2
22402	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n  for neighbor in node.getNeighbors():\\n    node.setEnter()\\n      visit(neighbor)\\nprint(success)\\n"}	2019-06-18 21:13:27-07	2
22412	solution	dfs_impl	load		2019-06-18 21:13:28-07	2
22422	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:15:07-07	2
22432	parsons	dfs_impl	unload	{"code":""}	2019-06-18 21:15:10-07	2
22442	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:21:45-07	2
22452	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 21:22:11-07	2
22462	solution	dfs_impl	load		2019-06-18 21:22:11-07	2
22472	parsons	demo	load	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 21:22:22-07	2
22482	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:22:24-07	2
22492	parsons	dfs_impl	unload	{"code":"for node in graph:\\n"}	2019-06-18 21:22:30-07	2
22502	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:22:34-07	2
22512	parsons	dfs_impl	move_on	{"code":"for neighbor in node.getNeighbors():\\n"}	2019-06-18 21:23:07-07	2
22522	solution	dfs_impl	load		2019-06-18 21:23:08-07	2
22532	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:23:21-07	2
22542	parsons	dfs_impl	move_on	{"code":"continue\\n"}	2019-06-18 21:23:39-07	2
22552	solution	dfs_impl	load		2019-06-18 21:23:40-07	2
22562	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:29:45-07	2
22572	parsons	dfs_impl	move_on	{"code":"if neighbor.getEnter():\\n"}	2019-06-18 21:29:57-07	2
22582	solution	dfs_impl	load		2019-06-18 21:29:57-07	2
22592	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:31:44-07	2
22602	parsons	dfs_impl	move_on	{"code":"continue\\n"}	2019-06-18 21:32:32-07	2
22612	solution	dfs_impl	load		2019-06-18 21:32:33-07	2
22622	solution	dfs_impl	move_on		2019-06-18 21:32:54-07	2
22632	parsons	dfs_impl_1	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:32:55-07	2
22642	parsons	dfs_impl_1	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 21:33:05-07	2
22652	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:35:40-07	2
22662	parsons	dfs_impl	move_on	{"code":"def visit(node):\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      node.setEnter()\\n  visit(node)\\nprint(test)\\n"}	2019-06-18 21:35:58-07	2
22672	solution	dfs_impl	load		2019-06-18 21:35:58-07	2
22682	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:36:46-07	2
22692	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 21:36:50-07	2
22702	solution	dfs_impl	load		2019-06-18 21:36:51-07	2
22712	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:40:09-07	2
22722	parsons	dfs_impl	move_on	{"code":"def visit(node):\\n"}	2019-06-18 21:40:13-07	2
22732	solution	dfs_impl	load		2019-06-18 21:40:14-07	2
22742	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:44:32-07	2
22752	parsons	dfs_impl	move_on	{"code":"if neighbor.getEnter():\\n"}	2019-06-18 21:44:36-07	2
22762	parsons	demo	load	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 21:45:29-07	2
22772	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:45:34-07	2
22782	parsons	dfs_impl	move_on	{"code":""}	2019-06-18 21:45:35-07	2
22792	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:47:59-07	2
22802	parsons	dfs_impl	move_on	{"code":""}	2019-06-18 21:48:03-07	2
22812	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:48:35-07	2
22822	parsons	dfs_impl	move_on	{"code":""}	2019-06-18 21:48:36-07	2
22832	parsons	demo	load	{"code":"def return_three():\\n  #You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-18 21:48:51-07	2
22842	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:48:53-07	2
22852	parsons	dfs_impl	move_on	{"code":""}	2019-06-18 21:48:56-07	2
22862	solution	dfs_impl	load		2019-06-18 21:48:56-07	2
22872	parsons	dfs_impl	load	{"code":""}	2019-06-18 21:57:52-07	2
22882	parsons	dfs_impl	move_on	{"code":""}	2019-06-18 21:57:54-07	2
22892	parsons	dfs_impl	load	{"code":""}	2019-06-18 22:19:14-07	2
22902	parsons	dfs_impl	move_on	{"code":"continue\\n"}	2019-06-18 22:19:19-07	2
22912	solution	dfs_impl	load		2019-06-18 22:19:38-07	2
22922	parsons	dfs_impl	load	{"code":""}	2019-06-18 22:21:51-07	2
22932	parsons	dfs_impl	move_on	{"code":"def dfs(graph):\\n"}	2019-06-18 22:21:56-07	2
22942	solution	dfs_impl	load		2019-06-18 22:21:56-07	2
22952	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:06:52-07	2
22972	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:08:03-07	2
22982	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nnode.setExit()\\n"}	2019-06-18 23:08:14-07	2
22992	parsons	19s_early_pilots/dfs_impl_1	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 23:08:18-07	2
23002	parsons	19s_early_pilots/dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n# testing\\n"}	2019-06-18 23:08:26-07	2
23012	parsons	19s_early_pilots/dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 23:08:27-07	2
23022	parsons	19s_early_pilots/dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  nodes.setExit()\\n"}	2019-06-18 23:08:30-07	2
23032	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:29:48-07	2
23042	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:29:51-07	2
23052	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:37:54-07	2
23062	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:37:56-07	2
23072	parsons	19s_early_pilots/dfs_impl_1	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 23:38:05-07	2
23082	parsons	19s_early_pilots/dfs_impl_1	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 23:38:07-07	2
23092	parsons	19s_early_pilots/dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 23:38:07-07	2
23102	parsons	19s_early_pilots/dfs_impl_3	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-18 23:38:09-07	2
23112	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:45:19-07	2
23122	parsons	19s_algo_study/dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:45:22-07	2
23132	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:45:44-07	2
23142	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nvisit(node)\\n"}	2019-06-18 23:45:51-07	2
23152	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:46:59-07	2
23162	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nif not node.getExit():\\n"}	2019-06-18 23:47:04-07	2
23172	solution	19s_algo_study/dfs_impl	load		2019-06-18 23:47:05-07	2
23182	solution	19s_algo_study/dfs_impl	load		2019-06-18 23:47:09-07	2
23192	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-18 23:57:23-07	2
23202	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nvisit(node)\\nprint(test)\\n"}	2019-06-18 23:57:35-07	2
23212	solution	19s_algo_study/dfs_impl	load		2019-06-18 23:57:36-07	2
23222	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nvisit(node)\\nprint(test)\\n"}	2019-06-19 00:01:48-07	2
23232	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:01:48-07	2
23242	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:01:58-07	2
23252	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:04:17-07	2
23262	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:07:51-07	2
23272	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nvisit(node)\\nprint(node)\\n"}	2019-06-19 00:08:15-07	2
23282	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:08:16-07	2
23292	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 00:12:19-07	2
23302	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 00:12:21-07	2
23312	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:12:22-07	2
23322	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:12:59-07	2
23332	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:14:32-07	2
23342	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:15:25-07	2
23352	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:18:11-07	2
23362	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:19:53-07	2
23372	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:23:00-07	2
23382	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nprint(test)\\n"}	2019-06-19 00:23:12-07	2
23392	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:23:13-07	2
23402	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nprint(test)\\n"}	2019-06-19 00:24:09-07	2
23412	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:24:10-07	2
23422	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\nprint(test)\\n"}	2019-06-19 00:25:07-07	2
23432	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:25:08-07	2
23442	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:30:11-07	2
23462	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:32:26-07	2
23472	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:32:49-07	2
23482	solution	19s_algo_study/dfs_impl	load		2019-06-19 00:37:06-07	2
23492	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 00:52:43-07	2
23502	parsons	19s_algo_study/dfs_impl	move_on	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 00:52:45-07	2
23512	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 00:52:45-07	2
23522	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 00:52:46-07	2
23532	parsons	dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:02:45-07	2
23542	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:29:35-07	2
23552	parsons	19s_algo_study/dfs_impl	move_on	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:29:39-07	2
23562	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:29:40-07	2
23572	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 01:29:40-07	2
23582	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:34:06-07	122
23592	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:34:24-07	122
23602	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:34:34-07	122
23612	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 01:34:48-07	122
23622	coding	19s_early_pilots/binary_search_1_blanks	load		2019-06-19 01:49:46-07	132
23632	coding	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 01:49:54-07	132
23642	coding	19s_early_pilots/binary_search_1_blanks	load		2019-06-19 01:49:56-07	132
23652	coding	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 01:50:00-07	132
23662	coding	19s_early_pilots/binary_search_1_blanks	load		2019-06-19 01:50:01-07	132
23672	coding	19s_early_pilots/binary_search_1_blanks	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 01:50:03-07	132
23682	coding	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 01:50:03-07	132
23692	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 01:50:04-07	132
23702	coding	19s_early_pilots/binary_search_1_blanks	load		2019-06-19 01:50:11-07	132
23712	coding	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 01:50:12-07	132
23722	coding	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 01:50:12-07	132
23732	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 01:50:13-07	132
23742	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 01:50:26-07	132
23752	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 01:50:33-07	132
23762	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:03:18-07	2
23772	parsons	demo	unload	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:03:23-07	2
23782	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:03:28-07	2
23792	parsons	demo	move_on	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:03:31-07	2
23802	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:04:19-07	2
23812	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:07:04-07	2
23822	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:07:25-07	2
23832	parsons	dfs_impl	load		2019-06-19 06:07:31-07	2
23842	parsons	dfs_impl	unload	continue\n	2019-06-19 06:08:08-07	2
23852	parsons	demo	load	def return_three():\n  #You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:08:25-07	2
23862	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:15:32-07	2
23872	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:15:40-07	2
23882	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:25:56-07	2
23892	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:26:42-07	2
23902	parsons	demo	move_on	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:26:54-07	2
23912	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:26:54-07	2
23922	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:27:10-07	2
23932	parsons	19s_algo_study/dfs_impl	submit	def dfs(graph):\n  # graph is a list of Nodes\n  print()\n	2019-06-19 06:27:38-07	2
23942	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:37:19-07	2
23952	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:38:13-07	2
23962	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:38:23-07	2
23972	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 06:40:24-07	2
23982	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:40:30-07	2
23992	parsons	19s_algo_study/dfs_impl	move_on	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:40:41-07	2
24002	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:40:42-07	2
24012	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 06:40:43-07	2
24022	solution	19s_early_pilots/dfs_impl_id1	move_on		2019-06-19 06:40:49-07	2
24032	parsons	19s_early_pilots/dfs_impl_1	load	def dfs(graph):\n  # graph is a list of Nodes\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-19 06:40:50-07	2
24642	parsons	demo	load		2019-06-19 08:50:50-07	2
24042	parsons	19s_early_pilots/dfs_impl_1	move_on	def dfs(graph):\n  # graph is a list of Nodes\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-19 06:41:05-07	2
24052	parsons	19s_early_pilots/dfs_impl_1	unload	def dfs(graph):\n  # graph is a list of Nodes\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-19 06:41:06-07	2
24062	parsons	19s_early_pilots/dfs_impl_3	load	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-19 06:41:06-07	2
24072	parsons	19s_early_pilots/dfs_impl_3	move_on	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-19 06:41:11-07	2
24082	parsons	19s_early_pilots/dfs_impl_3	unload	def dfs(graph):\n  for node in graph:\n    if not node.getExit():\n      visit(node)\ndef visit(node):\n  node.setEnter()\n  for neighbor in node.getNeighbors():\n    if neighbor.getEnter():\n      continue\n    visit(neighbor)\n  node.setExit()\n	2019-06-19 06:41:13-07	2
24092	solution	19s_early_pilots/dfs_impl_id2	load		2019-06-19 06:41:13-07	2
24102	solution	19s_early_pilots/dfs_impl_id2	move_on		2019-06-19 06:41:15-07	2
24112	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:41:49-07	2
24122	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:41:51-07	2
24132	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:41:52-07	2
24142	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:42:16-07	2
24152	parsons	dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:42:17-07	2
24162	parsons	dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:42:27-07	2
24172	parsons	dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 06:42:32-07	2
24182	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:47:47-07	2
24192	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:47:51-07	2
24202	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:47:53-07	2
24212	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:47:55-07	2
24222	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:47:56-07	2
24232	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:47:58-07	2
24242	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:48:01-07	2
24252	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:48:02-07	2
24262	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:48:04-07	2
24272	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:48:06-07	2
24282	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:48:07-07	2
24292	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:48:09-07	2
24302	\N	\N	\N	\N	2019-06-19 07:49:24-07	\N
24312	\N	\N	\N	\N	2019-06-19 07:49:26-07	\N
24322	\N	\N	\N	\N	2019-06-19 07:49:28-07	\N
24332	\N	\N	\N	\N	2019-06-19 07:49:29-07	\N
24342	\N	\N	\N	\N	2019-06-19 07:49:32-07	\N
24352	\N	\N	\N	\N	2019-06-19 07:49:34-07	\N
24362	\N	\N	\N	\N	2019-06-19 07:49:37-07	\N
24372	\N	\N	\N	\N	2019-06-19 07:49:38-07	\N
24382	\N	\N	\N	\N	2019-06-19 07:49:41-07	\N
24392	\N	\N	\N	\N	2019-06-19 07:49:42-07	\N
24402	\N	\N	\N	\N	2019-06-19 07:49:44-07	\N
24412	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 07:58:13-07	2
24422	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:00:07-07	2
24432	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:00:46-07	2
24442	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 08:01:14-07	2
24452	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:01:32-07	2
24462	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:01:51-07	2
24472	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 08:02:35-07	2
24482	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:03:29-07	2
24492	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:04:04-07	2
24502	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:05:17-07	2
24512	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:08:36-07	2
24522	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:09:04-07	2
24532	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:17:59-07	2
24542	coding	demo	load		2019-06-19 08:18:48-07	2
24552	parsons	demo	load		2019-06-19 08:21:26-07	2
24562	parsons	demo	load		2019-06-19 08:21:38-07	2
24572	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:46:10-07	2
24582	parsons	demo	load		2019-06-19 08:46:28-07	2
24592	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 08:48:07-07	2
24602	parsons	demo	load		2019-06-19 08:48:47-07	2
24612	parsons	demo	load		2019-06-19 08:49:18-07	2
24622	parsons	demo	load		2019-06-19 08:49:48-07	2
24632	parsons	demo	load		2019-06-19 08:50:19-07	2
24652	parsons	demo	load		2019-06-19 08:51:20-07	2
24662	parsons	demo	load		2019-06-19 08:51:51-07	2
24672	parsons	demo	load		2019-06-19 08:52:22-07	2
24682	parsons	demo	load		2019-06-19 08:52:52-07	2
24692	parsons	demo	load		2019-06-19 08:53:23-07	2
24702	parsons	demo	load		2019-06-19 08:53:54-07	2
24712	parsons	demo	load		2019-06-19 08:54:24-07	2
24722	parsons	demo	load		2019-06-19 10:14:50-07	2
24732	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:15:21-07	2
24742	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:15:51-07	2
24752	coding	demo	load		2019-06-19 10:16:22-07	2
24762	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:22:40-07	2
24772	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:27:49-07	2
24782	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:28:04-07	2
24792	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:28:20-07	2
24802	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:28:34-07	2
24812	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:28:51-07	2
24822	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:35:20-07	2
24832	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:35:50-07	2
24842	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:36:21-07	2
24852	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:36:51-07	2
24862	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:10-07	2
24872	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:22-07	2
24882	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:23-07	2
24892	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:24-07	2
24902	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:26-07	2
24912	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:27-07	2
24922	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:29-07	2
24932	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:30-07	2
24942	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:32-07	2
24952	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:37:53-07	2
24962	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:38:24-07	2
24972	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:38:54-07	2
24982	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:39:25-07	2
24992	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:39:56-07	2
25002	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:26-07	2
25012	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:41-07	2
25022	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:44-07	2
25032	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:46-07	2
25042	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:47-07	2
25052	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:47-07	2
25062	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:51-07	2
25072	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:55-07	2
25082	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:40:57-07	2
25092	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:41:27-07	2
25102	parsons	demo	move_on	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:41:58-07	2
25112	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:42:00-07	2
25122	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:42:29-07	2
25132	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:42:59-07	2
25142	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:43:30-07	2
25152	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:45:04-07	2
25162	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:45:34-07	2
25172	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:45:41-07	2
25182	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:45:43-07	2
25192	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:45:49-07	2
25202	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:45:55-07	2
26492	solution	19s_algo_study/trie_impl	load		2019-06-19 20:49:33-07	2
25212	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:45:59-07	2
25222	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:46:39-07	2
25232	coding	demo	load		2019-06-19 10:47:10-07	2
25242	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:48:39-07	2
25252	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:52:20-07	2
25262	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:52:27-07	2
25272	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:52:30-07	2
25282	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:52:32-07	2
25292	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:52:33-07	2
25302	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:52:36-07	2
25312	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:53:04-07	2
25322	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:53:08-07	2
25332	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:53:10-07	2
25342	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:53:31-07	2
25352	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:54:02-07	2
25362	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:55:45-07	2
25372	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:55:51-07	2
25382	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:55:58-07	2
25392	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:55:59-07	2
25402	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:56:04-07	2
25412	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:56:05-07	2
25422	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:56:07-07	2
25432	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 10:56:14-07	2
25442	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:01:22-07	2
25452	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:01:52-07	2
25462	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:03:30-07	2
25472	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:03:34-07	2
25482	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:03:37-07	2
25492	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:03:39-07	2
25502	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:03:42-07	2
25512	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:03:44-07	2
25522	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 11:03:47-07	2
25532	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 17:10:01-07	132
25542	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 17:14:13-07	132
25552	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 17:14:44-07	202
25562	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:28:32-07	2
25572	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:29:00-07	2
25582	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:29:01-07	2
25592	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:29:02-07	2
25602	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:29:03-07	2
25612	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:29:03-07	2
25622	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 18:29:03-07	12
25632	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:29:04-07	2
25642	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 18:29:06-07	12
25652	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 18:29:06-07	12
25662	\N	\N	\N	\N	2019-06-19 18:29:50-07	\N
25672	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 18:35:23-07	12
25682	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:36:29-07	2
25692	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:36:51-07	2
25702	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:36:55-07	2
25712	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:36:56-07	2
25722	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:36:57-07	2
25732	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:37:23-07	2
25742	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:37:24-07	2
27502	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 17:27:51-07	2
25752	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:37:26-07	2
25762	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 18:37:27-07	2
25772	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 18:38:04-07	12
25782	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 18:38:06-07	12
25792	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 18:38:07-07	12
25802	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 19:00:17-07	2
25812	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 19:00:23-07	2
25822	parsons	19s_algo_study/dfs_impl	move_on	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 19:00:24-07	2
25832	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 19:00:25-07	2
25842	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 19:00:25-07	2
25852	coding	19s_algo_study/trie_impl	load		2019-06-19 19:11:32-07	12
25862	coding	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n\\tdef addWord(self, word):\\n\\t\\t# Adds word to the Trie.\\n\\n\\tdef isPrefix(self, str):\\n\\t\\t# Returns True if this prefix exists in the Trie, False otherwise.\\n\\n\\tdef isWord(self, word):\\n\\t\\t# Returns True if this word exists in the Trie, False otherwise.\\ntesting "}	2019-06-19 19:11:39-07	12
25872	solution	19s_algo_study/trie_impl	load		2019-06-19 19:11:39-07	12
25882	solution	19s_algo_study/trie_impl	move_on		2019-06-19 19:12:16-07	12
25892	coding	19s_algo_study/trie_list_words	load		2019-06-19 19:12:17-07	12
25902	coding	19s_algo_study/trie_list_words	move_on	{"code":"def extract_words(trie):\\n\\t# trie is a Trie that has already been filled with words.\\ntesting again"}	2019-06-19 19:12:25-07	12
25912	solution	19s_algo_study/trie_list_words	load		2019-06-19 19:12:25-07	12
25922	coding	19s_algo_study/trie_list_words	load		2019-06-19 19:12:37-07	12
25932	coding	19s_algo_study/trie_list_words	move_on	{"code":"def extract_words(trie):\\n\\t# trie is a Trie that has already been filled with words.\\ntesting again 2"}	2019-06-19 19:13:11-07	12
25942	solution	19s_algo_study/trie_list_words	load		2019-06-19 19:13:12-07	12
25952	solution	19s_algo_study/trie_list_words	move_on		2019-06-19 19:13:15-07	12
25962	coding	19s_algo_study/trie_prefix_suffix	load		2019-06-19 19:13:17-07	12
25972	coding	19s_algo_study/trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n\\t# valid_words is a list of strings, prefix_query and suffix_query are both string\\n\\ttrie = Trie()\\ntrie testing"}	2019-06-19 19:13:29-07	12
25982	solution	19s_algo_study/trie_prefix_suffix	load		2019-06-19 19:13:29-07	12
25992	solution	19s_algo_study/trie_prefix_suffix	move_on		2019-06-19 19:13:50-07	12
26002	coding	19s_algo_study/huffman_impl	load		2019-06-19 19:13:51-07	12
26012	coding	19s_algo_study/huffman_impl	unload	{"code":"def huffman_encode(letters_to_frequency, message):\\n\\tnode_list = NodeList()\\n"}	2019-06-19 19:13:57-07	12
26022	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 19:14:39-07	2
26032	parsons	19s_algo_study/dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 19:15:10-07	2
26042	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 19:15:13-07	2
26052	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\nprint(testing)\\n"}	2019-06-19 19:16:05-07	2
26062	solution	19s_algo_study/trie_impl	load		2019-06-19 19:16:06-07	2
26072	solution	19s_algo_study/trie_impl	move_on		2019-06-19 19:16:58-07	2
26082	parsons	19s_algo_study/trie_list_words	load	{"code":"def extract_words(trie):\\n  # trie is a Trie that has already been filled with words.\\n"}	2019-06-19 19:16:58-07	2
26092	parsons	19s_algo_study/trie_list_words	move_on	{"code":"def extract_words(trie):\\n  # trie is a Trie that has already been filled with words.\\nreturn words\\n"}	2019-06-19 19:17:05-07	2
26102	solution	19s_algo_study/trie_list_words	load		2019-06-19 19:17:05-07	2
26112	solution	19s_algo_study/trie_list_words	load		2019-06-19 19:17:09-07	2
26122	solution	19s_algo_study/trie_list_words	move_on		2019-06-19 19:17:17-07	2
26132	parsons	19s_algo_study/trie_prefix_suffix	load	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n  # valid_words is a list of strings, prefix_query and suffix_query are both string\\n  trie = Trie()\\n"}	2019-06-19 19:17:17-07	2
26142	parsons	19s_algo_study/trie_prefix_suffix	move_on	{"code":"def prefix_suffix_lookup(valid_words, prefix_query, suffix_query):\\n  # valid_words is a list of strings, prefix_query and suffix_query are both string\\ntrie = Trie()\\n"}	2019-06-19 19:17:23-07	2
26152	solution	19s_algo_study/trie_prefix_suffix	load		2019-06-19 19:17:24-07	2
26162	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 19:19:02-07	2
26172	parsons	19s_algo_study/trie_impl	unload	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 19:19:04-07	2
26182	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-19 19:23:24-07	2
26192	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:33:43-07	2
26502	parsons	19s_algo_study/trie_list_words	load	{"code":"def extract_words(trie):\\n  # trie is a Trie that has already been filled with words.\\n"}	2019-06-19 20:50:38-07	2
26202	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:33:48-07	2
26212	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 20:35:54-07	2
26222	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:37:17-07	2
26232	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:37:18-07	2
26242	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:41:16-07	2
26252	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:41:18-07	2
26262	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 20:42:35-07	2
26272	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:42:39-07	2
26282	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:42:49-07	2
26292	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:42:50-07	2
26302	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:44:16-07	2
26312	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:44:18-07	2
26322	solution	19s_algo_study/trie_impl	load		2019-06-19 20:44:42-07	2
26332	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 20:46:07-07	2
26342	solution	19s_algo_study/trie_impl	load		2019-06-19 20:48:07-07	2
26352	parsons	19s_algo_study/dfs_impl	submit	def dfs(graph):\n  # graph is a list of Nodes\n  if neighbor.getEnter():\n  if not node.getExit():\n  for node in graph:\n  node.setEnter()\n	2019-06-19 20:48:11-07	2
26362	solution	19s_algo_study/trie_impl	load		2019-06-19 20:48:11-07	2
26372	parsons	19s_algo_study/dfs_impl	submit	def dfs(graph):\n  # graph is a list of Nodes\n  if neighbor.getEnter():\n  if not node.getExit():\n  for node in graph:\n  node.setEnter()\n	2019-06-19 20:48:14-07	2
26382	parsons	19s_algo_study/dfs_impl	submit	def dfs(graph):\n  # graph is a list of Nodes\n  if neighbor.getEnter():\n  if not node.getExit():\n  for node in graph:\n  node.setEnter()\n	2019-06-19 20:48:16-07	2
26392	parsons	19s_algo_study/dfs_impl	submit	def dfs(graph):\n  # graph is a list of Nodes\n  if neighbor.getEnter():\n  if not node.getExit():\n  for node in graph:\n  node.setEnter()\n	2019-06-19 20:48:17-07	2
26402	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-19 20:48:18-07	2
26412	parsons	19s_algo_study/dfs_impl	submit	def dfs(graph):\n  # graph is a list of Nodes\n  if neighbor.getEnter():\n  if not node.getExit():\n  for node in graph:\n  node.setEnter()\n	2019-06-19 20:48:18-07	2
26422	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:48:20-07	2
26432	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:48:22-07	2
26442	solution	19s_algo_study/trie_impl	load		2019-06-19 20:48:22-07	2
26452	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:49:05-07	2
26462	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:49:07-07	2
26472	parsons	19s_algo_study/trie_impl	load	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:49:30-07	2
26482	parsons	19s_algo_study/trie_impl	move_on	{"code":"class Trie:\\n  def addWord(self, word):\\n    # Adds word to the Trie.\\n  def isPrefix(self, str):\\n    # Returns True if this prefix exists in the Trie, False otherwise.\\n  def isWord(self, word):\\n    # Returns True if this word exists in the Trie, False otherwise.\\n"}	2019-06-19 20:49:33-07	2
26512	parsons	19s_algo_study/trie_list_words	move_on	{"code":"def extract_words(trie):\\n  # trie is a Trie that has already been filled with words.\\n"}	2019-06-19 20:50:40-07	2
26522	solution	19s_algo_study/trie_list_words	load		2019-06-19 20:50:41-07	2
26532	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n  if neighbor.getEnter():\n  if not node.getExit():\n  for node in graph:\n  node.setEnter()\n	2019-06-19 20:50:59-07	2
26542	parsons	19s_algo_study/dfs_impl	load	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 20:50:59-07	2
26552	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-19 20:51:05-07	2
26562	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 20:52:17-07	2
26572	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 20:52:19-07	2
26582	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 20:52:19-07	2
26592	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 20:53:57-07	2
26602	parsons	19s_algo_study/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 20:53:59-07	2
26612	solution	19s_early_pilots/dfs_impl_id1	load		2019-06-19 20:54:00-07	2
26622	parsons	19s_early_pilots/binary_search_1_blanks	load	def binary_search(target, arr):\n	2019-06-19 20:55:27-07	2
26632	parsons	19s_early_pilots/binary_search_1_blanks	unload	def binary_search(target, arr):\n	2019-06-19 20:55:34-07	2
26642	parsons	19s_early_pilots/binary_search_1_blanks	load	def binary_search(target, arr):\n	2019-06-19 20:55:35-07	2
26652	parsons	19s_early_pilots/binary_search_1_blanks	unload	def binary_search(target, arr):\n	2019-06-19 20:55:37-07	2
26662	parsons	19s_early_pilots/binary_search_1_blanks	load	def binary_search(target, arr):\n	2019-06-19 20:55:38-07	2
26672	parsons	19s_early_pilots/binary_search_1_blanks	unload	def binary_search(target, arr):\n	2019-06-19 21:01:22-07	2
26682	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 21:08:14-07	2
26692	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n"}	2019-06-19 21:08:21-07	2
26702	solution	19s_algo_study/binary_search_1	load		2019-06-19 21:08:22-07	2
26712	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 21:08:22-07	2
26722	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 21:08:33-07	2
26732	solution	19s_algo_study/binary_search_1	move_on		2019-06-19 21:08:35-07	2
26742	coding	19s_algo_study/dfs_all_paths	load		2019-06-19 21:08:37-07	2
26752	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntesting "}	2019-06-19 21:08:53-07	2
26762	solution	19s_algo_study/dfs_all_paths	load		2019-06-19 21:08:54-07	2
26772	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 21:09:18-07	2
26782	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntesting "}	2019-06-19 21:09:21-07	2
26792	solution	19s_algo_study/dfs_all_paths	load		2019-06-19 21:09:21-07	2
26802	solution	19s_algo_study/dfs_all_paths	move_on		2019-06-19 21:09:24-07	2
26812	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-19 21:09:35-07	2
26822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 21:13:23-07	2
26832	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 21:13:27-07	2
26842	solution	19s_algo_study/binary_search_1	load		2019-06-19 21:13:28-07	2
26852	solution	19s_algo_study/binary_search_1	move_on		2019-06-19 21:13:37-07	2
26862	coding	19s_algo_study/dfs_all_paths	load		2019-06-19 21:13:38-07	2
26872	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntest"}	2019-06-19 21:13:44-07	2
26882	solution	19s_algo_study/dfs_all_paths	load		2019-06-19 21:13:45-07	2
26892	parsons	19s_early_pilots/binary_search_comprehension	submit	0	2019-06-19 21:52:02-07	2
26902	parsons	19s_early_pilots/binary_search_comprehension	submit	1	2019-06-19 21:52:05-07	2
26912	parsons	19s_early_pilots/binary_search_comprehension	move_on	1	2019-06-19 21:52:06-07	2
26922	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 21:52:07-07	2
26932	parsons	19sum_blank_pilots/binary_search_impl	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 21:52:14-07	2
26942	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 21:52:15-07	2
26952	solution	19sum_blank_pilots/binary_search_impl	load		2019-06-19 21:52:15-07	2
26962	solution	19sum_blank_pilots/binary_search_impl	move_on		2019-06-19 21:52:18-07	2
26972	parsons	19sum_blank_pilots/binary_search_rotate	load	{"code":"def binary_search_pivot():\\n"}	2019-06-19 21:52:18-07	2
26982	parsons	19sum_blank_pilots/binary_search_rotate	move_on	{"code":"def binary_search_pivot():\\n"}	2019-06-19 21:52:29-07	2
26992	parsons	19sum_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot():\\n"}	2019-06-19 21:52:29-07	2
27002	solution	19sum_blank_pilots/binary_search_rotate	load		2019-06-19 21:52:29-07	2
27012	solution	19sum_blank_pilots/binary_search_rotate	move_on		2019-06-19 21:52:31-07	2
27022	parsons	19sum_blank_pilots/binary_search_one_miss	load	{"code":"def find_missing(arr):\\n"}	2019-06-19 21:52:32-07	2
27032	parsons	19sum_blank_pilots/binary_search_one_miss	move_on	{"code":"def find_missing(arr):\\n"}	2019-06-19 21:52:35-07	2
27042	parsons	19sum_blank_pilots/binary_search_one_miss	unload	{"code":"def find_missing(arr):\\n"}	2019-06-19 21:52:36-07	2
27052	solution	19sum_blank_pilots/binary_search_one_miss	load		2019-06-19 21:52:36-07	2
27062	solution	19sum_blank_pilots/binary_search_one_miss	move_on		2019-06-19 21:52:37-07	2
27072	multi	19s_algo_study/pre_test_comp	load		2019-06-19 21:52:38-07	2
27482	parsons	19sum_blank_pilots/binary_search_impl	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:27:50-07	2
27492	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:27:51-07	2
27082	multi	19s_algo_study/pre_test_comp	submit	[{"id":"dfs_a_enter","input":""},{"id":"dfs_a_exit","input":""},{"id":"dfs_b_enter","input":""},{"id":"dfs_b_exit","input":""},{"id":"dfs_c_enter","input":""},{"id":"dfs_c_exit","input":""},{"id":"dfs_d_enter","input":""},{"id":"dfs_d_exit","input":""},{"id":"dfs_e_enter","input":""},{"id":"dfs_e_exit","input":""},{"id":"dfs_f_enter","input":""},{"id":"dfs_f_exit","input":""},{"id":"dfs_g_enter","input":""},{"id":"dfs_g_exit","input":""},{"id":"bfs_a","input":""},{"id":"bfs_b","input":""},{"id":"bfs_c","input":""},{"id":"bfs_d","input":""},{"id":"bfs_e","input":""},{"id":"bfs_f","input":""},{"id":"bfs_g","input":""},{"id":"top_sort","input":""},{"id":"num_children_trie","input":""},{"id":"num_children_huffman","input":""}]	2019-06-19 21:52:40-07	2
27092	parsons	19sum_blank_pilots/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 21:52:41-07	2
27102	parsons	19sum_blank_pilots/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 21:52:45-07	2
27112	parsons	19sum_blank_pilots/dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-19 21:52:45-07	2
27122	solution	19sum_blank_pilots/dfs_impl	load		2019-06-19 21:52:46-07	2
27132	solution	19sum_blank_pilots/dfs_impl	move_on		2019-06-19 21:52:47-07	2
27142	parsons	19sum_blank_pilots/dfs_num_islands	load	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:52:48-07	2
27152	parsons	19sum_blank_pilots/dfs_num_islands	move_on	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:52:59-07	2
27162	parsons	19sum_blank_pilots/dfs_num_islands	unload	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:00-07	2
27172	solution	19sum_blank_pilots/dfs_num_islands	load		2019-06-19 21:53:00-07	2
27182	solution	19sum_blank_pilots/dfs_num_islands	move_on		2019-06-19 21:53:02-07	2
27192	parsons	19sum_blank_pilots/dfs_num_islands_blanks	load	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:03-07	2
27202	parsons	19sum_blank_pilots/dfs_num_islands_blanks	move_on	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:12-07	2
27212	parsons	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:13-07	2
27222	coding	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-19 21:53:13-07	2
27232	coding	19sum_blank_pilots/dfs_num_islands_blanks	move_on	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:15-07	2
27242	coding	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:15-07	2
27252	solution	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-19 21:53:16-07	2
27262	parsons	19sum_blank_pilots/dfs_num_islands_blanks	load	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:21-07	2
27272	parsons	19sum_blank_pilots/dfs_num_islands_blanks	move_on	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:23-07	2
27282	parsons	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:24-07	2
27292	coding	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-19 21:53:25-07	2
27302	coding	19sum_blank_pilots/dfs_num_islands_blanks	move_on	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:28-07	2
27312	coding	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-19 21:53:29-07	2
27322	solution	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-19 21:53:29-07	2
27332	solution	19sum_blank_pilots/dfs_num_islands_blanks	move_on		2019-06-19 21:53:33-07	2
27342	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-19 23:39:46-07	12
27352	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\nif arr[mid] > target:\\n  print(testing)\\n"}	2019-06-19 23:40:20-07	12
27362	solution	19s_algo_study/binary_search_1	load		2019-06-19 23:40:21-07	12
27372	solution	19s_algo_study/binary_search_1	load		2019-06-19 23:41:51-07	12
27382	solution	19s_algo_study/binary_search_1	move_on		2019-06-19 23:42:32-07	12
27392	coding	19s_algo_study/dfs_all_paths	load		2019-06-19 23:42:33-07	12
27402	coding	19s_algo_study/dfs_all_paths	unload	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntest"}	2019-06-19 23:42:52-07	12
27412	solution	19s_algo_study/binary_search_1	move_on		2019-06-19 23:43:04-07	12
27422	coding	19s_algo_study/dfs_all_paths	load		2019-06-19 23:43:05-07	12
27432	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntest"}	2019-06-19 23:43:24-07	12
27442	solution	19s_algo_study/dfs_all_paths	load		2019-06-19 23:43:24-07	12
27452	parsons	19s_early_pilots/binary_search_comprehension	submit	1	2019-06-20 17:27:48-07	2
27462	parsons	19s_early_pilots/binary_search_comprehension	move_on	1	2019-06-20 17:27:48-07	2
27472	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:27:49-07	2
27512	multi	19sum_blank_pilots/cog_load_survey	submit	[]	2019-06-20 17:27:54-07	2
27522	solution	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-20 17:27:55-07	2
27532	solution	19sum_blank_pilots/dfs_num_islands_blanks	move_on		2019-06-20 17:27:57-07	2
27542	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-20 17:28:07-07	2
27552	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-20 17:28:17-07	2
27562	parsons	19s_early_pilots/binary_search_comprehension	submit	1	2019-06-20 17:28:23-07	2
27572	parsons	19s_early_pilots/binary_search_comprehension	move_on	1	2019-06-20 17:28:24-07	2
27582	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:28:25-07	2
27592	parsons	19sum_blank_pilots/binary_search_impl	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:28:27-07	2
27602	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:28:28-07	2
27612	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 17:28:28-07	2
27622	multi	19sum_blank_pilots/cog_load_survey	submit	[]	2019-06-20 17:28:29-07	2
27632	solution	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-20 17:28:30-07	2
27642	solution	19sum_blank_pilots/dfs_num_islands_blanks	move_on		2019-06-20 17:28:33-07	2
27652	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 17:28:47-07	2
27662	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 17:28:49-07	2
27672	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 17:29:00-07	2
27682	parsons	19s_early_pilots/binary_search_comprehension	submit	1	2019-06-20 17:29:09-07	2
27692	parsons	19s_early_pilots/binary_search_comprehension	move_on	1	2019-06-20 17:29:10-07	2
27702	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:29:10-07	2
27712	parsons	19sum_blank_pilots/binary_search_impl	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:29:14-07	2
27722	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:29:15-07	2
27732	solution	19sum_blank_pilots/binary_search_impl	load		2019-06-20 17:29:15-07	2
27742	solution	19sum_blank_pilots/binary_search_impl	move_on		2019-06-20 17:29:17-07	2
27752	parsons	19sum_blank_pilots/binary_search_rotate	load	{"code":"def binary_search_pivot():\\n"}	2019-06-20 17:29:18-07	2
27762	parsons	19sum_blank_pilots/binary_search_rotate	move_on	{"code":"def binary_search_pivot():\\n"}	2019-06-20 17:29:20-07	2
27772	parsons	19sum_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot():\\n"}	2019-06-20 17:29:20-07	2
27782	solution	19sum_blank_pilots/binary_search_rotate	load		2019-06-20 17:29:20-07	2
27792	solution	19sum_blank_pilots/binary_search_rotate	move_on		2019-06-20 17:29:21-07	2
27802	parsons	19sum_blank_pilots/binary_search_one_miss	load	{"code":"def find_missing(arr):\\n"}	2019-06-20 17:29:22-07	2
27812	parsons	19sum_blank_pilots/binary_search_one_miss	move_on	{"code":"def find_missing(arr):\\n"}	2019-06-20 17:29:24-07	2
27822	parsons	19sum_blank_pilots/binary_search_one_miss	unload	{"code":"def find_missing(arr):\\n"}	2019-06-20 17:29:24-07	2
27832	solution	19sum_blank_pilots/binary_search_one_miss	load		2019-06-20 17:29:25-07	2
27842	solution	19sum_blank_pilots/binary_search_one_miss	move_on		2019-06-20 17:29:29-07	2
27852	multi	19s_algo_study/pre_test_comp	load		2019-06-20 17:29:29-07	2
27862	multi	19s_algo_study/pre_test_comp	submit	[{"id":"dfs_a_enter","input":""},{"id":"dfs_a_exit","input":""},{"id":"dfs_b_enter","input":""},{"id":"dfs_b_exit","input":""},{"id":"dfs_c_enter","input":""},{"id":"dfs_c_exit","input":""},{"id":"dfs_d_enter","input":""},{"id":"dfs_d_exit","input":""},{"id":"dfs_e_enter","input":""},{"id":"dfs_e_exit","input":""},{"id":"dfs_f_enter","input":""},{"id":"dfs_f_exit","input":""},{"id":"dfs_g_enter","input":""},{"id":"dfs_g_exit","input":""},{"id":"bfs_a","input":""},{"id":"bfs_b","input":""},{"id":"bfs_c","input":""},{"id":"bfs_d","input":""},{"id":"bfs_e","input":""},{"id":"bfs_f","input":""},{"id":"bfs_g","input":""},{"id":"top_sort","input":""},{"id":"num_children_trie","input":""},{"id":"num_children_huffman","input":""}]	2019-06-20 17:29:31-07	2
27872	parsons	19sum_blank_pilots/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-20 17:29:32-07	2
27882	parsons	19sum_blank_pilots/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-20 17:29:34-07	2
27892	parsons	19sum_blank_pilots/dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-20 17:29:34-07	2
27902	solution	19sum_blank_pilots/dfs_impl	load		2019-06-20 17:29:35-07	2
27912	solution	19sum_blank_pilots/dfs_impl	move_on		2019-06-20 17:29:36-07	2
27922	parsons	19sum_blank_pilots/dfs_num_islands	load	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:37-07	2
27932	parsons	19sum_blank_pilots/dfs_num_islands	move_on	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:38-07	2
27942	parsons	19sum_blank_pilots/dfs_num_islands	unload	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:39-07	2
27952	solution	19sum_blank_pilots/dfs_num_islands	load		2019-06-20 17:29:39-07	2
27962	solution	19sum_blank_pilots/dfs_num_islands	move_on		2019-06-20 17:29:40-07	2
27972	parsons	19sum_blank_pilots/dfs_num_islands_blanks	load	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:41-07	2
27982	parsons	19sum_blank_pilots/dfs_num_islands_blanks	move_on	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:42-07	2
27992	parsons	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:43-07	2
28002	coding	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-20 17:29:44-07	2
28012	coding	19sum_blank_pilots/dfs_num_islands_blanks	submit	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:45-07	2
28022	coding	19sum_blank_pilots/dfs_num_islands_blanks	results	<div class="testcase error"><span class="msg">Calling function <code>num_islands('LL\\nLO')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">num_islands() takes 0 positional arguments but 1 was given, line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>num_islands('LOL\\nOOL\\nLOL')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">num_islands() takes 0 positional arguments but 1 was given, line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>num_islands('LO\\nOL')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">num_islands() takes 0 positional arguments but 1 was given, line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>num_islands('LLOOO\\nOLOOL\\nLOOLL\\nOOOOO\\nLOLOL\\nOOOLO')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">num_islands() takes 0 positional arguments but 1 was given, line 95</span><br /></div>	2019-06-20 17:29:45-07	2
28032	coding	19sum_blank_pilots/dfs_num_islands_blanks	move_on	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:46-07	2
28042	coding	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:47-07	2
28052	solution	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-20 17:29:47-07	2
28062	solution	19sum_blank_pilots/dfs_num_islands_blanks	move_on		2019-06-20 17:29:49-07	2
28072	coding	19sum_blank_pilots/dfs_num_islands_blanks	load		2019-06-20 17:29:55-07	2
28082	parsons	19sum_blank_pilots/dfs_num_islands	load	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:29:58-07	2
28092	coding	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands(plot):\\n\\t# plot is a String.\\n\\t# This creates a list of lists the same dimensions of plot filled with 0s\\n\\tvisited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:30:04-07	2
28102	parsons	19sum_blank_pilots/dfs_num_islands_blanks	load	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:30:05-07	2
28112	parsons	19sum_blank_pilots/dfs_num_islands_blanks	unload	{"code":"def num_islands():\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:30:05-07	2
28122	parsons	19sum_blank_pilots/dfs_num_islands	unload	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-20 17:30:06-07	2
28132	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 17:30:18-07	2
28142	parsons	19s_early_pilots/binary_search_comprehension	submit	0	2019-06-20 17:34:26-07	2
28152	parsons	19s_early_pilots/binary_search_comprehension	submit	1	2019-06-20 17:34:29-07	2
28162	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:36:42-07	2
28172	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:42:48-07	2
28182	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:43:16-07	2
28192	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:43:49-07	2
28202	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:44:10-07	2
28212	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:44:11-07	2
28222	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n"}	2019-06-20 17:44:20-07	2
28232	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n"}	2019-06-20 17:44:51-07	2
28242	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:44:52-07	2
28252	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:44:53-07	2
28262	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 17:46:08-07	2
28272	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-06-20 17:46:13-07	2
28282	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:46:50-07	2
28292	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n  return mid\\n"}	2019-06-20 17:46:54-07	2
32502	16	test	test	foo	2019-07-08 13:41:54-07	2
28302	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:47:16-07	2
28312	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n      print(mid)\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:49:27-07	2
28322	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n      print(high)\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:50:06-07	2
28332	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n      print(low)\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:50:26-07	2
28342	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n      print(low, mid, high)\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:50:47-07	2
28352	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n      print(low, mid,high)\\n    elif arr[mid] < target:\\n      low = mid + 1\\n      print(low, mid, high)\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:53:09-07	2
28362	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    print(low, mid, high)\\n    return mid\\n"}	2019-06-20 17:53:44-07	2
28372	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  mid = (low+high) // 2\\n  while low <= high:\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    print(low, mid, high)\\n  return mid\\n"}	2019-06-20 17:54:07-07	2
28382	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    if arr[mid] > target:\\n      high = mid - 1\\n      print(low, mid,high)\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:55:53-07	2
28392	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    if arr[mid] > target:\\n      low = mid + 1\\n      print(low, mid,high)\\n    elif arr[mid] < target:\\n      high = mid - 1\\n    else:\\n      return -1\\n    return mid\\n"}	2019-06-20 17:56:47-07	2
28402	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n  return mid\\n"}	2019-06-20 17:58:16-07	2
28412	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n  return mid\\n"}	2019-06-20 17:59:49-07	2
28422	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n      print(low, mid, high)\\n    else:\\n      return -1\\n  return mid\\n"}	2019-06-20 18:00:25-07	2
28432	parsons	19sum_blank_pilots/binary_search_impl	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    print(low, mid, high)\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return -1\\n  return mid\\n"}	2019-06-20 18:02:29-07	2
28442	multi	19sum_blank_pilots/cog_load_survey	submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(Not_at_all_ineffective)"},{"id":"understanding_topic","id-input":"understanding_topic-4"}]	2019-06-20 18:06:30-07	2
28452	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 18:06:30-07	2
28462	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 18:06:33-07	2
28472	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 18:06:33-07	2
28482	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 18:06:34-07	2
28492	parsons	19sum_blank_pilots/binary_search_impl	move_on	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    print(low, mid, high)\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return mid\\n  return -1\\n"}	2019-06-20 18:06:37-07	2
28502	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low+high) // 2\\n    print(low, mid, high)\\n    if arr[mid] > target:\\n      high = mid - 1\\n    elif arr[mid] < target:\\n      low = mid + 1\\n    else:\\n      return mid\\n  return -1\\n"}	2019-06-20 18:06:38-07	2
28512	solution	19sum_blank_pilots/binary_search_impl	load		2019-06-20 18:06:38-07	2
28522	parsons	19sum_blank_pilots/binary_search_rotate	load	{"code":"def binary_search_pivot():\\n"}	2019-06-20 18:09:27-07	2
28532	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[low + 1]:\\n      return low\\n    elif arr[mid] > arr[low]:\\n      high = high - 1\\n    elif arr[mid] < arr[high]:\\n      low = low + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:30:55-07	2
31052	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-26 22:09:45-07	2
28542	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[low + 1]:\\n      return low\\n    elif arr[mid] > arr[low]:\\n      high = high - 1\\n    elif arr[mid] < arr[high]:\\n      low = low + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:34:27-07	2
28552	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[low + 1]:\\n      return high\\n    elif arr[mid] > arr[low]:\\n      high = high - 1\\n    elif arr[mid] < arr[high]:\\n      low = low + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:35:42-07	2
28562	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[low + 1]:\\n      return low\\n    elif arr[mid] > arr[low]:\\n      high = high - 1\\n    elif arr[mid] < arr[high]:\\n      low = low + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:35:47-07	2
28572	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    print('low',low,'mid',mid,'high',high)\\n    if arr[mid] > arr[low + 1]:\\n      return low\\n    elif arr[mid] > arr[low]:\\n      high = high - 1\\n    elif arr[mid] < arr[high]:\\n      low = low + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:36:13-07	2
28582	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    print('low',low,'mid',mid,'high',high)\\n    if arr[mid] > arr[low + 1]:\\n      return low\\n    elif arr[mid] > arr[low]:\\n      high = mid - 1\\n    elif arr[mid] < arr[high]:\\n      low = mid + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:39:01-07	2
28592	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    print('low',low,'mid',mid,'high',high)\\n    if arr[mid] > arr[low + 1]:\\n      return low\\n    elif arr[mid] > arr[low]:\\n      high = mid - 1\\n    elif arr[mid] < arr[high]:\\n      low = mid + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:39:41-07	2
28602	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[low + 1]:\\n      return low\\n    elif arr[mid] > arr[low]:\\n      high = mid - 1\\n    elif arr[mid] < arr[high]:\\n      low = mid + 1\\n  return len(arr) - 1\\n"}	2019-06-20 18:39:58-07	2
28612	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[mid + 1]:\\n      return mid\\n    elif arr[low] > arr[mid]:\\n      high = mid - 1\\n    elif arr[high] < arr[mid]:\\n      low = mid + 1\\n    elif arr[high] > arr[low]:\\n      return len(arr) - 1\\n"}	2019-06-20 18:47:59-07	2
28622	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[mid + 1]:\\n      return mid\\n    elif arr[low] > arr[mid]:\\n      high = mid - 1\\n    elif arr[high] < arr[mid]:\\n      low = mid + 1\\n    elif arr[high] > arr[mid]:\\n      return len(arr) - 1\\n"}	2019-06-20 18:48:17-07	2
28632	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[mid + 1]:\\n      return mid\\n    elif arr[low] > arr[mid]:\\n      high = mid - 1\\n    elif arr[high] < arr[mid]:\\n      low = mid + 1\\n    elif arr[high] > arr[mid]:\\n      print('low',low,'mid',mid,'high',high)\\n      return len(arr) - 1\\n"}	2019-06-20 18:48:42-07	2
28642	parsons	19sum_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[mid + 1]:\\n      return mid\\n    elif arr[low] > arr[mid]:\\n      high = mid - 1\\n    elif arr[high] < arr[mid]:\\n      low = mid + 1\\n    elif arr[high] > arr[mid]:\\n      return high\\n"}	2019-06-20 18:51:25-07	2
28652	multi	19sum_blank_pilots/cog_load_survey	submit	[{"id":"complex","id-input":"complex-3"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(Not_at_all_ineffective)"},{"id":"understanding_topic","id-input":"understanding_topic-4"}]	2019-06-20 18:52:11-07	2
28662	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 18:52:12-07	2
28672	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 18:52:14-07	2
28682	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 18:52:14-07	2
28692	multi	19sum_blank_pilots/cog_load_survey	load		2019-06-20 18:52:16-07	2
28702	parsons	19sum_blank_pilots/binary_search_rotate	move_on	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[mid + 1]:\\n      return mid\\n    elif arr[low] > arr[mid]:\\n      high = mid - 1\\n    elif arr[high] < arr[mid]:\\n      low = mid + 1\\n    elif arr[high] > arr[mid]:\\n      return high\\n"}	2019-06-20 18:52:22-07	2
28712	parsons	19sum_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high)//2\\n    if arr[mid] > arr[mid + 1]:\\n      return mid\\n    elif arr[low] > arr[mid]:\\n      high = mid - 1\\n    elif arr[high] < arr[mid]:\\n      low = mid + 1\\n    elif arr[high] > arr[mid]:\\n      return high\\n"}	2019-06-20 18:52:22-07	2
28722	solution	19sum_blank_pilots/binary_search_rotate	load		2019-06-20 18:52:23-07	2
28732	parsons	19sum_blank_pilots/binary_search_one_miss	load	{"code":"def find_missing(arr):\\n"}	2019-06-20 18:54:19-07	2
28742	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n    else:\\n      return arr[mid] - 1\\n"}	2019-06-20 19:07:54-07	2
28752	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      return arr[mid] + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      low = mid + 1\\n    else:\\n      return arr[mid] - 1\\n"}	2019-06-20 19:08:21-07	2
29612	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-21 22:25:47-07	2
29622	multi	19s_algo_study/pre_test_comp	load		2019-06-21 22:25:50-07	2
28762	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n    else:\\n      return arr[mid] - 1\\n"}	2019-06-20 19:08:27-07	2
28772	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n    else:\\n      return arr[mid] - 1\\n    print(low, mid, high)\\n"}	2019-06-20 19:09:08-07	2
28782	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    print(low, mid, high)\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n    else:\\n      return arr[mid] - 1\\n"}	2019-06-20 19:09:23-07	2
28792	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    print(low, mid, high)\\n    if arr[mid] - arr[mid-1] > 1:\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n    else:\\n      return arr[mid] - 1\\n"}	2019-06-20 19:09:49-07	2
28802	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      low = mid + 1\\n    print(low, mid, high)\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n    else:\\n      return arr[mid] - 1\\n"}	2019-06-20 19:10:02-07	2
28812	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    if arr[mid] - arr[low] > mid - low:\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n    print(low, mid, high)\\n    else:\\n      return arr[mid] - 1\\n"}	2019-06-20 19:10:10-07	2
28822	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    print(low, mid, high)\\n    if arr[mid] - arr[low] > mid - low:\\n      print('if 1')\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      print('if 2')\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      print('if 3')\\n      return arr[mid] + 1\\n    else:\\n      print('else 3')\\n      return arr[mid] - 1\\n"}	2019-06-20 19:10:43-07	2
28832	parsons	19sum_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    print(low, mid, high)\\n    if arr[mid] - arr[low] > mid - low:\\n      print('if 1')\\n      high = mid - 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      print('if 2')\\n      low = mid + 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      print('if 3')\\n      return arr[mid] + 1\\n    else:\\n      print('else 3')\\n      return arr[mid] - 1\\n"}	2019-06-20 19:19:54-07	2
28842	multi	19sum_blank_pilots/cog_load_survey	submit	[{"id":"complex","id-input":"complex-3"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(Not_at_all_ineffective)"},{"id":"understanding_topic","id-input":"understanding_topic-3"}]	2019-06-20 19:21:38-07	2
28852	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 19:21:39-07	2
28862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 19:51:00-07	12
28872	solution	19s_algo_study/binary_search_1	load		2019-06-20 19:53:48-07	12
28882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 19:54:16-07	12
28892	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n    if arr[mid] > target:\\n"}	2019-06-20 19:54:27-07	12
28902	solution	19s_algo_study/binary_search_1	load		2019-06-20 19:54:28-07	12
28912	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-20 20:40:05-07	2
28922	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-20 21:23:17-07	2
28932	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-20 21:23:20-07	2
28942	parsons	19s_early_pilots/binary_search_comprehension	submit	1	2019-06-20 21:23:32-07	2
28952	parsons	19s_early_pilots/binary_search_comprehension	move_on	1	2019-06-20 21:23:41-07	2
28962	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 21:23:42-07	2
28972	parsons	19sum_blank_pilots/binary_search_impl	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 21:23:48-07	2
28982	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 21:23:49-07	2
28992	solution	19sum_blank_pilots/binary_search_impl	load		2019-06-20 21:23:49-07	2
29002	solution	19sum_blank_pilots/binary_search_impl	move_on		2019-06-20 21:23:53-07	2
29012	parsons	19sum_blank_pilots/binary_search_rotate	load	{"code":"def binary_search_pivot():\\n"}	2019-06-20 21:23:54-07	2
29022	parsons	19sum_blank_pilots/binary_search_rotate	move_on	{"code":"def binary_search_pivot():\\n"}	2019-06-20 21:24:06-07	2
29032	parsons	19sum_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot():\\n"}	2019-06-20 21:24:07-07	2
29042	solution	19sum_blank_pilots/binary_search_rotate	load		2019-06-20 21:24:07-07	2
29052	solution	19sum_blank_pilots/binary_search_rotate	move_on		2019-06-20 21:24:08-07	2
29062	parsons	19sum_blank_pilots/binary_search_one_miss	load	{"code":"def find_missing(arr):\\n"}	2019-06-20 21:24:09-07	2
29072	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 21:24:22-07	2
29082	parsons	19sum_blank_pilots/binary_search_rotate	load	{"code":"def binary_search_pivot():\\n"}	2019-06-20 21:24:33-07	2
29092	coding	19sUm_blank_pilots/binary_search_impl	load		2019-06-20 21:50:58-07	2
29632	parsons	19sum_blank_pilots/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-21 22:36:28-07	2
31062	solution	19s_algo_study/binary_search_1	load		2019-06-26 22:09:46-07	2
31072	solution	19s_algo_study/binary_search_1	move_on		2019-06-26 22:09:47-07	2
29102	coding	19sUm_blank_pilots/binary_search_impl	results	<div class="testcase pass"><span class="msg">Calling function <code>binary_search(3, [1, 2, 3])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search(5, [1, 2, 3, 4])</code>.</span><br /><span class="msg">Expected result to be <code>-1</code> , your code returned <code>-1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search(2, [1, 2, 3, 4, 5])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search(3, [1, 2, 3, 4, 5])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search(4, [1, 2, 3, 4, 5])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /></div>	2019-06-20 21:53:18-07	2
29112	coding	19sUm_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        if arr[mid] > target:\\n            high = mid - 1\\n        elif arr[mid] < target:\\n            low = mid + 1 \\n        else:\\n            return mid\\n    return -1"}	2019-06-20 21:53:43-07	2
29122	coding	19sUm_blank_pilots/binary_search_rotate	load		2019-06-20 21:53:44-07	2
29132	coding	19sUm_blank_pilots/binary_search_rotate	results	<div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([12, 13, 2, 4, 7, 9])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([7, 9, 12, 13, 2, 4])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([2, 4, 7, 9, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>binary_search_pivot([11, 13, 2, 3, 5, 6, 8, 9, 10])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>3</code></span> <br /></div>	2019-06-20 22:03:26-07	2
29142	coding	19sUm_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        print(low, mid, high)\\n        if high < mid:\\n            return mid\\n        if arr[low] > arr[mid]:\\n            high = mid - 1\\n        elif arr[mid] > arr[high]:\\n            low = mid + 1\\n        if arr[mid] < arr[high]:\\n            return high"}	2019-06-20 22:04:01-07	2
29152	coding	19sUm_blank_pilots/binary_search_rotate	results	<div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([12, 13, 2, 4, 7, 9])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([7, 9, 12, 13, 2, 4])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\n3 4 5\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([2, 4, 7, 9, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>binary_search_pivot([11, 13, 2, 3, 5, 6, 8, 9, 10])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>0 4 8\n0 1 3\n2 2 3\n</pre></span></div>	2019-06-20 22:04:02-07	2
29162	coding	19sUm_blank_pilots/binary_search_rotate	results	<div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([12, 13, 2, 4, 7, 9])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\nif 2\nlast if\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([7, 9, 12, 13, 2, 4])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\nif 3\n3 4 5\nif 2\nlast if\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([2, 4, 7, 9, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\nlast if\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>binary_search_pivot([11, 13, 2, 3, 5, 6, 8, 9, 10])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>0 4 8\nif 2\n0 1 3\nif 3\n2 2 3\nlast if\n</pre></span></div>	2019-06-20 22:06:11-07	2
29172	\N	\N	\N	\N	2019-06-20 22:07:42-07	\N
29182	coding	19sUm_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        print(low, mid, high)\\n        if high < mid:\\n            print('if 1')\\n            return mid\\n        if arr[low] > arr[mid]:\\n            print('if 2')\\n            high = mid - 1\\n        elif arr[mid] > arr[low]:\\n            print('if 3')\\n            low = mid + 1\\n        if arr[mid] < arr[high]:\\n            print ('last if')\\n            return high"}	2019-06-20 22:07:42-07	2
29192	parsons	19sum_blank_pilots/binary_search_impl	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:07:43-07	2
29202	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:07:45-07	2
29212	coding	19sUm_blank_pilots/binary_search_rotate	load		2019-06-20 22:07:46-07	2
29222	coding	19sUm_blank_pilots/binary_search_rotate	submit	{"code":"def binary_search_pivot(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        print(low, mid, high)\\n        if high < mid:\\n            print('if 1')\\n            return mid\\n        if arr[low] > arr[mid]:\\n            print('if 2')\\n            high = mid - 1\\n        elif arr[mid] > arr[low]:\\n            print('if 3')\\n            low = mid + 1\\n        if arr[mid] < arr[high]:\\n            print ('last if')\\n            return high"}	2019-06-20 22:07:51-07	2
31082	coding	19s_algo_study/dfs_all_paths	load		2019-06-26 22:09:49-07	2
31092	coding	19s_algo_study/dfs_all_paths	load		2019-06-26 22:12:51-07	2
31112	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:39:50-07	2
29232	coding	19sUm_blank_pilots/binary_search_rotate	results	<div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([12, 13, 2, 4, 7, 9])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\nif 2\nlast if\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([7, 9, 12, 13, 2, 4])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\nif 3\n3 4 5\nif 2\nlast if\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([2, 4, 7, 9, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\nif 3\nlast if\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>binary_search_pivot([11, 13, 2, 3, 5, 6, 8, 9, 10])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>0 4 8\nif 2\n0 1 3\nif 3\n2 2 3\nlast if\n</pre></span></div>	2019-06-20 22:07:52-07	2
29242	coding	19sUm_blank_pilots/binary_search_rotate	results	<div class="testcase pass"><span class="msg">Calling function <code>binary_search_pivot([12, 13, 2, 4, 7, 9])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\nif 2\nlast if\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>binary_search_pivot([7, 9, 12, 13, 2, 4])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">Function call took too long! Check for any infinite loops.</span><br /><span class="msg">Print Output: <pre>0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 5\n0 2 	2019-06-20 22:11:18-07	2
29252	coding	19sUm_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        print(low, mid, high)\\n        if high < mid:\\n            print('if 1')\\n            return mid\\n        if arr[low] > arr[mid]:\\n            print('if 2')\\n            high = mid - 1\\n        elif arr[mid] < arr[high]:\\n            print('if 3')\\n            low = mid + 1\\n        if arr[mid] < arr[high]:\\n            print ('last if')\\n            return high"}	2019-06-20 22:12:53-07	2
29262	coding	19sUm_blank_pilots/binary_search_rotate	load		2019-06-20 22:13:02-07	2
29272	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:41:10-07	12
29282	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:41:11-07	12
29292	solution	19s_algo_study/binary_search_1	load		2019-06-20 22:41:12-07	12
29302	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:41:48-07	12
29312	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:41:53-07	12
29322	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:42:10-07	12
29332	solution	19s_algo_study/binary_search_1	load		2019-06-20 22:42:10-07	12
29342	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:43:53-07	12
29352	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:43:56-07	12
29362	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:47:24-07	12
29372	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:47:26-07	12
29382	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:48:46-07	12
29392	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:49:33-07	12
29402	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:49:35-07	12
29412	solution	19s_algo_study/binary_search_1	load		2019-06-20 22:50:04-07	12
29422	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:53:39-07	12
29432	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:53:40-07	12
29442	solution	19s_algo_study/binary_search_1	load		2019-06-20 22:54:04-07	12
29452	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:55:26-07	12
29462	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:56:00-07	12
29472	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:56:19-07	12
29482	solution	19s_algo_study/binary_search_1	load		2019-06-20 22:56:20-07	12
29492	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:56:33-07	12
29502	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:56:35-07	12
29512	solution	19s_algo_study/binary_search_1	load		2019-06-20 22:56:35-07	12
29522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:56:45-07	12
29532	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 22:56:47-07	12
29542	solution	19s_algo_study/binary_search_1	load		2019-06-20 22:56:48-07	12
29552	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-20 22:59:26-07	2
29562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 23:05:54-07	12
29572	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-20 23:05:55-07	12
29582	solution	19s_algo_study/binary_search_1	load		2019-06-20 23:05:56-07	12
29592	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-21 17:52:07-07	2
29602	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-21 22:25:43-07	2
29642	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\n    node.setEnter()\\ndef visit(node):\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      continue\\n  if not node.getExit():\\n    node.setExit()\\n"}	2019-06-21 22:46:27-07	2
29652	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      continue\\n  if not node.getExit():\\n    node.setExit()\\n"}	2019-06-21 22:47:13-07	2
29662	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  if not node.getExit():\\n    node.setExit()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n  visit(neighbor)\\n"}	2019-06-21 22:49:51-07	2
29672	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  if not node.getExit():\\n    node.setExit()\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      continue\\n"}	2019-06-21 22:50:06-07	2
29682	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\n    node.setEnter()\\ndef visit(node):\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      continue\\n  if not node.getExit():\\n    node.setExit()\\n"}	2019-06-21 22:50:47-07	2
29692	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      continue\\n  if not node.getExit():\\n    node.setExit()\\n"}	2019-06-21 22:50:57-07	2
29702	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      node.setExit()\\n  if not node.getExit():\\n    continue\\n"}	2019-06-21 22:51:44-07	2
29712	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      node.setExit()\\n    if not node.getExit():\\n      continue\\n"}	2019-06-21 22:51:52-07	2
29722	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if not node.getExit():\\n      continue\\n    if neighbor.getEnter():\\n      node.setExit()\\n"}	2019-06-21 22:52:24-07	2
29732	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\n    if not node.getExit():\\n      node.setExit()\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    visit(neighbor)\\n    if neighbor.getEnter():\\n      continue\\n"}	2019-06-21 22:53:44-07	2
29742	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  if not node.getExit():\\n    node.setExit()\\n"}	2019-06-21 22:54:38-07	2
29752	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  if not node.getExit():\\n    node.setExit()\\n"}	2019-06-21 22:55:54-07	2
29762	\N	\N	\N	\N	2019-06-21 22:57:14-07	\N
29772	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    print(node, '->', node.getNeighbors())\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  if not node.getExit():\\n    node.setExit()\\n"}	2019-06-21 22:57:36-07	2
29782	\N	\N	\N	\N	2019-06-21 23:00:09-07	\N
29792	parsons	19sum_blank_pilots/dfs_impl	submit	{"code":"def dfs(graph):\\n  for node in graph:\\n    print(\\"Ready to visit\\", node)\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    print(node, '->', node.getNeighbors())\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-21 23:00:56-07	2
29802	parsons	19sum_blank_pilots/dfs_impl	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    print(\\"Ready to visit\\", node)\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    print(node, '->', node.getNeighbors())\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-21 23:01:07-07	2
29812	parsons	19sum_blank_pilots/dfs_impl	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    print(\\"Ready to visit\\", node)\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    print(node, '->', node.getNeighbors())\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-21 23:01:07-07	2
29822	solution	19sum_blank_pilots/dfs_impl	load		2019-06-21 23:01:08-07	2
29832	solution	19sum_blank_pilots/dfs_impl	move_on		2019-06-21 23:01:26-07	2
29842	parsons	19sum_blank_pilots/dfs_num_islands	load	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-21 23:01:27-07	2
29852	parsons	19sum_blank_pilots/dfs_num_islands	unload	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-21 23:02:04-07	2
29862	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-06-21 23:02:05-07	2
29872	parsons	19sum_blank_pilots/dfs_impl_blanks	move_on	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-21 23:03:55-07	2
29882	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-06-21 23:03:55-07	2
29892	solution	19sum_blank_pilots/dfs_impl_blanks	load		2019-06-21 23:03:56-07	2
29902	solution	19sum_blank_pilots/dfs_impl_blanks	move_on		2019-06-21 23:04:02-07	2
29912	coding	19sum_blank_pilots/dfs_impl	load		2019-06-21 23:04:03-07	2
29922	coding	19sum_blank_pilots/dfs_impl	results	<div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'B'], ['B', 'D'], ['A', 'C'], ['C', 'D'], ['E', 'A']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDEFG', [['A', 'D'], ['D', 'A'], ['E', 'A'], ['A', 'B'], ['B', 'F'], ['F', 'G'], ['A', 'C'], ['C', 'G']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDEFGH', [['A', 'B'], ['A', 'C'], ['B', 'D'], ['B', 'E'], ['C', 'F'], ['D', 'G'], ['D', 'H']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'B'], ['B', 'C'], ['C', 'D'], ['D', 'A'], ['D', 'E'], ['C', 'E']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'D'], ['B', 'A'], ['B', 'D'], ['A', 'C'], ['C', 'E'], ['D', 'E']])</code>.</span><br /></div>	2019-06-21 23:05:42-07	2
29932	coding	19sum_blank_pilots/dfs_impl	move_on	{"code":"def dfs(graph):\\n\\t# graph is a list of Nodes\\n    for node in graph:\\n        if not node.getExit():\\n            visit(node)\\n\\ndef visit(node):\\n    node.setEnter()\\n    for neighbor in node.getNeighbors():\\n        if neighbor.getEnter():\\n            continue\\n        visit(neighbor)\\n    node.setExit()"}	2019-06-21 23:05:50-07	2
29942	coding	19sum_blank_pilots/dfs_impl	unload	{"code":"def dfs(graph):\\n\\t# graph is a list of Nodes\\n    for node in graph:\\n        if not node.getExit():\\n            visit(node)\\n\\ndef visit(node):\\n    node.setEnter()\\n    for neighbor in node.getNeighbors():\\n        if neighbor.getEnter():\\n            continue\\n        visit(neighbor)\\n    node.setExit()"}	2019-06-21 23:05:50-07	2
29952	solution	19sum_blank_pilots/dfs_impl	load		2019-06-21 23:05:51-07	2
29962	solution	19sum_blank_pilots/dfs_impl	move_on		2019-06-21 23:05:53-07	2
29972	parsons	19sum_blank_pilots/dfs_num_islands	load	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-21 23:05:54-07	2
29982	coding	19sUm_blank_pilots/binary_search_one_miss	load		2019-06-21 23:07:09-07	2
29992	coding	19sUm_blank_pilots/binary_search_one_miss	results	<div class="testcase pass"><span class="msg">Calling function <code>find_missing([5, 7])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 3, 4, 5, 6])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase error"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">Function call took too long! Check for any infinite loops.</span><br /></div>	2019-06-21 23:14:49-07	2
30002	\N	\N	\N	\N	2019-06-21 23:15:51-07	\N
30012	coding	19sUm_blank_pilots/binary_search_one_miss	results	<div class="testcase pass"><span class="msg">Calling function <code>find_missing([5, 7])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 3, 4, 5, 6])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>10</code> , your code returned <code>12</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>8</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>4</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 4, 5, 6, 7])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>1</code></span> <br /></div>	2019-06-21 23:15:51-07	2
30022	\N	\N	\N	\N	2019-06-21 23:17:30-07	\N
30032	coding	19sUm_blank_pilots/binary_search_one_miss	results	<div class="testcase fail"><span class="msg">Calling function <code>find_missing([5, 7])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>8</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 3, 4, 5, 6])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>4</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>7</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>10</code> , your code returned <code>13</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>8</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 4, 5, 6, 7])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /></div>	2019-06-21 23:17:31-07	2
30042	coding	19sUm_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        if (arr[mid] - arr[low]) > mid - low:\\n            high = mid - 1\\n        elif (arr[high] - arr[mid]) > high - mid:\\n            low = mid + 1\\n        else:\\n            return arr[low] + 1"}	2019-06-21 23:17:42-07	2
30182	parsons	19sum_blank_pilots/binary_search_one_miss	unload	{"code":"def find_missing(arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (low + high) // 2\\n    print(low, mid, high)\\n    if arr[mid] - arr[low] > mid - low:\\n      print('if 1')\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n    if arr[mid] - arr[mid-1] > 1:\\n      print('if 2')\\n      return arr[mid] - 1\\n    if arr[mid+1] - arr[mid] > 1:\\n      return arr[mid] + 1\\n"}	2019-06-22 00:46:30-07	2
30192	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-22 03:21:56-07	2
30052	coding	19sUm_blank_pilots/binary_search_one_miss	results	<div class="testcase fail"><span class="msg">Calling function <code>find_missing([5, 7])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>8</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 3, 4, 5, 6])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>4</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>7</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>10</code> , your code returned <code>12</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>7</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 4, 5, 6, 7])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /></div>	2019-06-21 23:17:43-07	2
30062	coding	19sUm_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        if (arr[mid] - arr[low]) > mid - low:\\n            high = mid - 1\\n        elif (arr[high] - arr[mid]) > high - mid:\\n            low = mid + 1\\n        else:\\n            return arr[high] - 1"}	2019-06-21 23:17:49-07	2
30072	coding	19sUm_blank_pilots/binary_search_one_miss	results	<div class="testcase pass"><span class="msg">Calling function <code>find_missing([5, 7])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 3, 4, 5, 6])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>10</code> , your code returned <code>12</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>8</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>4</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 4, 5, 6, 7])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>1</code></span> <br /></div>	2019-06-21 23:17:49-07	2
30082	coding	19sUm_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        (print low, mid, high)\\n        if (arr[mid] - arr[low]) > mid - low:\\n            high = mid - 1\\n        elif (arr[high] - arr[mid]) > high - mid:\\n            low = mid + 1\\n        else:\\n            return arr[high] - 1"}	2019-06-21 23:18:40-07	2
30092	coding	19sUm_blank_pilots/binary_search_one_miss	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">invalid syntax (<string>, line 6)</span><br /></div>	2019-06-21 23:18:41-07	2
30102	coding	19sUm_blank_pilots/binary_search_one_miss	submit	{"code":"def find_missing(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        print (low, mid, high)\\n        if (arr[mid] - arr[low]) > mid - low:\\n            high = mid - 1\\n        elif (arr[high] - arr[mid]) > high - mid:\\n            low = mid + 1\\n        else:\\n            return arr[high] - 1"}	2019-06-21 23:18:59-07	2
30112	coding	19sUm_blank_pilots/binary_search_one_miss	results	<div class="testcase pass"><span class="msg">Calling function <code>find_missing([5, 7])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /><span class="msg">Print Output: <pre>0 0 1\n1 1 1\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 3, 4, 5, 6])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>0 2 4\n0 0 1\n1 1 1\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /><span class="msg">Print Output: <pre>0 2 4\n3 3 4\n4 4 4\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13])</code>.</span><br /><span class="msg">Expected result to be <code>10</code> , your code returned <code>12</code></span> <br /><span class="msg">Print Output: <pre>0 5 11\n6 8 11\n9 10 11\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 6, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>8</code></span> <br /><span class="msg">Print Output: <pre>0 3 7\n4 5 7\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 3, 4, 5, 7, 8, 9])</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>4</code></span> <br /><span class="msg">Print Output: <pre>0 3 7\n4 5 7\n4 4 4\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>find_missing([1, 2, 4, 5, 6, 7])</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>0 2 5\n0 0 1\n</pre></span></div>	2019-06-21 23:19:00-07	2
30122	coding	19sum_blank_pilots/dfs_impl	load		2019-06-21 23:20:47-07	2
30132	coding	19sum_blank_pilots/dfs_impl	results	<div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'B'], ['B', 'D'], ['A', 'C'], ['C', 'D'], ['E', 'A']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDEFG', [['A', 'D'], ['D', 'A'], ['E', 'A'], ['A', 'B'], ['B', 'F'], ['F', 'G'], ['A', 'C'], ['C', 'G']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDEFGH', [['A', 'B'], ['A', 'C'], ['B', 'D'], ['B', 'E'], ['C', 'F'], ['D', 'G'], ['D', 'H']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'B'], ['B', 'C'], ['C', 'D'], ['D', 'A'], ['D', 'E'], ['C', 'E']])</code>.</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>dfs_test('ABCDE', [['A', 'D'], ['B', 'A'], ['B', 'D'], ['A', 'C'], ['C', 'E'], ['D', 'E']])</code>.</span><br /></div>	2019-06-21 23:22:28-07	2
30142	\N	\N	\N	\N	2019-06-22 00:46:28-07	\N
30152	parsons	19s_algo_study/dfs_impl	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\ndef visit(node):\\n  for neighbor in node.getNeighbors():\\n      if not node.getExit():\\n"}	2019-06-22 00:46:28-07	2
30162	coding	19sum_blank_pilots/dfs_impl	unload	{"code":"def dfs(graph):\\n\\t# graph is a list of Nodes\\n    for node in graph:\\n        if not node.getExit():\\n            visit(node)\\n            \\ndef visit(node):\\n    node.setEnter()\\n    for neighbor in node.getNeighbors():\\n        if neighbor.getEnter():\\n            continue\\n        visit(neighbor)\\n    node.setExit()"}	2019-06-22 00:46:29-07	2
30172	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-22 00:46:30-07	2
30202	parsons	19s_algo_study/dfs_impl	unload	def dfs(graph):\n  # graph is a list of Nodes\n	2019-06-25 14:11:27-07	2
31102	coding	19s_algo_study/dfs_all_paths	unload	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-06-26 22:13:11-07	2
30212	coding	19sUm_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot(arr):\\n    low = 0\\n    high = len(arr) - 1\\n    while low <= high:\\n        mid = (low + high) // 2\\n        print(low, mid, high)\\n        if high < mid:\\n            print('if 1')\\n            return mid\\n        if arr[low] > arr[mid]:\\n            print('if 2')\\n            high = mid - 1\\n        elif arr[mid] < arr[high]:\\n            print('if 3')\\n            low = mid + 1\\n        if arr[mid] < arr[high]:\\n            print ('last if')\\n            return high"}	2019-06-25 14:11:27-07	2
30222	parsons	19sum_blank_pilots/binary_search_rotate	unload	{"code":"def binary_search_pivot():\\n  while  <= :\\n  # Base Case\\n  if arr[mid] > arr[mid + 1]:\\n    return \\n  # Other cases\\n"}	2019-06-25 14:11:27-07	2
30232	parsons	19sum_blank_pilots/binary_search_impl	unload	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 14:11:27-07	2
30242	parsons	19sum_blank_pilots/binary_search_one_miss	unload	{"code":"def find_missing(arr):\\n"}	2019-06-25 14:11:27-07	2
30252	coding	19s_algo_study/fizz_buzz	load		2019-06-25 17:03:18-07	222
30262	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n  for i in range(n):\\n      print(i)"}	2019-06-25 17:03:29-07	222
30272	coding	19s_algo_study/fizz_buzz	results	<div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>0\n1\n2\n3\n4\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(100)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz', 'fizz', 22, 23, 'fizz', 'buzz', 26, 'fizz', 28, 29, 'fizzbuzz', 31, 32, 'fizz', 34, 'buzz', 'fizz', 37, 38, 'fizz', 'buzz', 41, 'fizz', 43, 44, 'fizzbuzz', 46, 47, 'fizz', 49, 'buzz', 'fizz', 52, 53, 'fizz', 'buzz', 56, 'fizz', 58, 59, 'fizzbuzz', 61, 62, 'fizz', 64, 'buzz', 'fizz', 67, 68, 'fizz', 'buzz', 71, 'fizz', 73, 74, 'fizzbuzz', 76, 77, 'fizz', 79, 'buzz', 'fizz', 82, 83, 'fizz', 'buzz', 86, 'fizz', 88, 89, 'fizzbuzz', 91, 92, 'fizz', 94, 'buzz', 'fizz', 97, 98, 'fizz', 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n</pre></span></div>	2019-06-25 17:03:29-07	222
30282	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n  for i in range(n):\\n      print(i)"}	2019-06-25 17:03:41-07	222
30292	coding	19s_algo_study/fizz_buzz	load		2019-06-25 17:03:42-07	222
30302	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n  for i in range(n):\\n      print(i)"}	2019-06-25 17:03:44-07	222
30312	coding	19s_algo_study/fizz_buzz	results	<div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>0\n1\n2\n3\n4\n\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(100)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz', 'fizz', 22, 23, 'fizz', 'buzz', 26, 'fizz', 28, 29, 'fizzbuzz', 31, 32, 'fizz', 34, 'buzz', 'fizz', 37, 38, 'fizz', 'buzz', 41, 'fizz', 43, 44, 'fizzbuzz', 46, 47, 'fizz', 49, 'buzz', 'fizz', 52, 53, 'fizz', 'buzz', 56, 'fizz', 58, 59, 'fizzbuzz', 61, 62, 'fizz', 64, 'buzz', 'fizz', 67, 68, 'fizz', 'buzz', 71, 'fizz', 73, 74, 'fizzbuzz', 76, 77, 'fizz', 79, 'buzz', 'fizz', 82, 83, 'fizz', 'buzz', 86, 'fizz', 88, 89, 'fizzbuzz', 91, 92, 'fizz', 94, 'buzz', 'fizz', 97, 98, 'fizz', 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n...\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n</pre></span></div>	2019-06-25 17:03:44-07	222
30322	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n  for i in range(n):\\n      print(i)"}	2019-06-25 17:04:06-07	222
30332	coding	19s_algo_study/fizz_buzz	load		2019-06-25 17:04:07-07	222
30342	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n  for i in range(n):\\n      print(i)"}	2019-06-25 17:04:08-07	222
30352	coding	19s_algo_study/fizz_buzz	results	<div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>0\n1\n2\n3\n4\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(100)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz', 'fizz', 22, 23, 'fizz', 'buzz', 26, 'fizz', 28, 29, 'fizzbuzz', 31, 32, 'fizz', 34, 'buzz', 'fizz', 37, 38, 'fizz', 'buzz', 41, 'fizz', 43, 44, 'fizzbuzz', 46, 47, 'fizz', 49, 'buzz', 'fizz', 52, 53, 'fizz', 'buzz', 56, 'fizz', 58, 59, 'fizzbuzz', 61, 62, 'fizz', 64, 'buzz', 'fizz', 67, 68, 'fizz', 'buzz', 71, 'fizz', 73, 74, 'fizzbuzz', 76, 77, 'fizz', 79, 'buzz', 'fizz', 82, 83, 'fizz', 'buzz', 86, 'fizz', 88, 89, 'fizzbuzz', 91, 92, 'fizz', 94, 'buzz', 'fizz', 97, 98, 'fizz', 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n...\n91\n92\n93\n94\n95\n96\n97\n98\n99\n</pre></span></div>	2019-06-25 17:04:09-07	222
30362	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 19:25:43-07	12
30372	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n"}	2019-06-25 19:25:57-07	12
30382	solution	19s_algo_study/binary_search_1	load		2019-06-25 19:25:57-07	12
30392	solution	19s_algo_study/binary_search_1	move_on		2019-06-25 19:26:01-07	12
30402	coding	19s_algo_study/dfs_all_paths	load		2019-06-25 19:26:03-07	12
30412	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntesting"}	2019-06-25 19:26:15-07	12
30422	solution	19s_algo_study/dfs_all_paths	load		2019-06-25 19:26:16-07	12
30432	solution	19s_algo_study/dfs_all_paths	move_on		2019-06-25 19:26:19-07	12
30442	multi	19s_algo_study/pre_test_comp	load		2019-06-25 19:26:34-07	2
31012	solution	19s_algo_study/binary_search_1	load		2019-06-26 22:09:31-07	2
31022	solution	19s_algo_study/binary_search_1	move_on		2019-06-26 22:09:33-07	2
31032	coding	19s_algo_study/dfs_all_paths	load		2019-06-26 22:09:34-07	2
31042	coding	19s_algo_study/dfs_all_paths	unload	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-06-26 22:09:38-07	2
30452	multi	19s_algo_study/pre_test_comp	submit	[{"id":"dfs_a_enter","input":""},{"id":"dfs_a_exit","input":""},{"id":"dfs_b_enter","input":""},{"id":"dfs_b_exit","input":""},{"id":"dfs_c_enter","input":""},{"id":"dfs_c_exit","input":""},{"id":"dfs_d_enter","input":""},{"id":"dfs_d_exit","input":""},{"id":"dfs_e_enter","input":""},{"id":"dfs_e_exit","input":""},{"id":"dfs_f_enter","input":""},{"id":"dfs_f_exit","input":""},{"id":"dfs_g_enter","input":""},{"id":"dfs_g_exit","input":""},{"id":"bfs_a","input":""},{"id":"bfs_b","input":""},{"id":"bfs_c","input":""},{"id":"bfs_d","input":""},{"id":"bfs_e","input":""},{"id":"bfs_f","input":""},{"id":"bfs_g","input":""},{"id":"top_sort","input":""},{"id":"num_children_trie","input":""},{"id":"num_children_huffman","input":""}]	2019-06-25 19:26:43-07	2
30462	parsons	19sum_blank_pilots/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-06-25 19:26:44-07	2
30472	parsons	19sum_blank_pilots/dfs_impl	move_on	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n  for node in graph:\\n"}	2019-06-25 19:26:49-07	2
30482	solution	19sum_blank_pilots/dfs_impl	load		2019-06-25 19:26:49-07	2
30492	solution	19sum_blank_pilots/dfs_impl	move_on		2019-06-25 19:26:52-07	2
30502	parsons	19sum_blank_pilots/dfs_num_islands	load	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-25 19:26:53-07	2
30512	parsons	19sum_blank_pilots/dfs_num_islands	move_on	{"code":"def num_islands(plot):\\n  # plot is a String.\\n  # This creates a list of lists the same dimensions of plot filled with 0s\\n  visited = [[0] * len(row) for row in plot.splitlines()]\\n"}	2019-06-25 19:26:58-07	2
30522	solution	19sum_blank_pilots/dfs_num_islands	load		2019-06-25 19:26:58-07	2
30532	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 19:27:14-07	2
30542	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 19:27:17-07	2
30552	solution	19s_algo_study/binary_search_1	load		2019-06-25 19:27:18-07	2
30562	solution	19s_algo_study/binary_search_1	move_on		2019-06-25 19:27:20-07	2
30572	coding	19s_algo_study/dfs_all_paths	load		2019-06-25 19:27:21-07	2
30582	solution	19s_algo_study/dfs_all_paths	load		2019-06-25 19:29:46-07	2
30592	solution	19s_algo_study/dfs_all_paths	move_on		2019-06-25 19:29:49-07	2
30602	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 19:29:53-07	2
30612	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 19:29:55-07	2
30622	solution	19s_algo_study/binary_search_1	load		2019-06-25 19:29:55-07	2
30632	solution	19s_algo_study/binary_search_1	move_on		2019-06-25 19:29:57-07	2
30642	coding	19s_algo_study/dfs_all_paths	load		2019-06-25 19:29:58-07	2
30652	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-06-25 19:30:01-07	2
30662	solution	19s_algo_study/dfs_all_paths	load		2019-06-25 19:30:02-07	2
30672	multi	19s_algo_study/pre_test_comp	load		2019-06-25 20:05:34-07	2
30682	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 20:05:39-07	2
30692	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n"}	2019-06-25 20:05:46-07	2
30702	solution	19s_algo_study/binary_search_1	load		2019-06-25 20:05:47-07	2
30712	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n"}	2019-06-25 20:05:52-07	2
30722	solution	19s_algo_study/binary_search_1	load		2019-06-25 20:05:53-07	2
30732	solution	19s_algo_study/binary_search_1	load		2019-06-25 20:05:56-07	2
30742	solution	19s_algo_study/binary_search_1	load		2019-06-25 20:07:53-07	2
30752	solution	19s_algo_study/binary_search_1	load		2019-06-25 20:41:27-07	2
30762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 20:41:36-07	2
30772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 20:41:53-07	2
30782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 20:49:04-07	2
30792	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-25 21:10:19-07	2
30802	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-06-26 20:55:15-07	2
30812	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-26 20:55:22-07	2
30822	solution	19s_algo_study/binary_search_1	load		2019-06-26 20:55:23-07	2
30832	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-06-26 20:55:35-07	2
30842	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-26 20:56:07-07	2
30852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-26 20:56:13-07	2
30862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-26 22:06:32-07	2
30872	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\nhigh = len(arr) - 1\\n"}	2019-06-26 22:07:25-07	2
30882	solution	19s_algo_study/binary_search_1	load		2019-06-26 22:07:26-07	2
30892	solution	19s_algo_study/binary_search_1	move_on		2019-06-26 22:07:36-07	2
30902	coding	19s_algo_study/dfs_all_paths	load		2019-06-26 22:07:37-07	2
30912	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntesting"}	2019-06-26 22:07:50-07	2
30922	solution	19s_algo_study/dfs_all_paths	load		2019-06-26 22:07:51-07	2
30932	solution	19s_algo_study/dfs_all_paths	load		2019-06-26 22:08:50-07	2
30942	solution	19s_algo_study/dfs_all_paths	load		2019-06-26 22:08:55-07	2
30952	coding	19s_algo_study/dfs_all_paths	load		2019-06-26 22:09:10-07	2
30962	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\ntesting"}	2019-06-26 22:09:14-07	2
30972	solution	19s_algo_study/dfs_all_paths	load		2019-06-26 22:09:15-07	2
30982	solution	19s_algo_study/dfs_all_paths	move_on		2019-06-26 22:09:17-07	2
30992	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-26 22:09:27-07	2
31002	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-06-26 22:09:30-07	2
31122	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:40:21-07	2
31132	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:40:52-07	2
31142	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:41:22-07	2
31152	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:41:53-07	2
31162	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:42:50-07	2
31172	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\nprint()\n	2019-06-27 07:45:21-07	2
31182	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\nprint()\nprint()\n	2019-06-27 07:45:52-07	2
31192	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\nprint()\nprint()\nx = 2\n	2019-06-27 07:47:53-07	2
31202	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:48:23-07	2
31212	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\nprint()\nreturn x\n	2019-06-27 07:48:54-07	2
31222	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\nprint()\nreturn x\n	2019-06-27 07:49:25-07	2
31232	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  print()\n  return x\n  x = x + 1\n	2019-06-27 07:50:56-07	2
31242	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  print()\n  return x\n  x = x + 1\n	2019-06-27 07:51:26-07	2
31252	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:51:57-07	2
31262	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  x = 2\n	2019-06-27 07:52:58-07	2
31272	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  x = 2\n	2019-06-27 07:53:28-07	2
31282	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  x = x + 1\n  x = 2\n	2019-06-27 07:54:29-07	2
31292	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:55:00-07	2
31302	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:57:31-07	2
31312	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:58:02-07	2
31322	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 07:58:32-07	2
31332	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:00:03-07	2
31342	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:00:35-07	2
31352	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:01:05-07	2
31362	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:01:36-07	2
31372	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:02:07-07	2
31382	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:02:38-07	2
31392	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:03:09-07	2
31402	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:03:39-07	2
31412	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:04:29-07	2
31422	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:08:11-07	2
31432	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:08:34-07	2
31442	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:08:58-07	2
31452	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:23-07	2
31462	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:24-07	2
31472	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:41-07	2
31482	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:43-07	2
31492	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:47-07	2
31502	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:49-07	2
31512	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:51-07	2
31522	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:09:58-07	2
31532	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:10:06-07	2
31542	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:10:22-07	2
31552	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:11:02-07	2
31562	parsons	demo	unload	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:11:19-07	2
31572	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 08:11:20-07	2
31582	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:24:49-07	2
31592	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  x = 2\n	2019-06-27 17:25:07-07	2
31602	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:25:15-07	2
31612	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:25:45-07	2
31622	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:26:44-07	2
31632	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:28:02-07	2
31642	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:29:07-07	2
31652	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:29:10-07	2
31662	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:29:13-07	2
31672	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  x = 2\n	2019-06-27 17:29:19-07	2
31682	parsons	demo	submit	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n  return x\n	2019-06-27 17:29:24-07	2
31692	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:29:27-07	2
31702	parsons	demo	load	def return_three():\n  # You can insert tabbed lines as well (necessary to Python)\n	2019-06-27 17:30:05-07	2
31712	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n  for i in range(n):\\n      print(i)"}	2019-06-27 18:42:35-07	222
31722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-27 20:23:47-07	12
31732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-27 20:24:03-07	12
31742	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-27 20:24:18-07	12
31752	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-28 20:39:59-07	2
31762	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-28 20:40:20-07	2
31772	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-06-28 20:40:21-07	2
31782	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-06-28 20:40:55-07	2
31792	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-06-28 20:40:56-07	2
31802	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-28 20:56:00-07	2
31812	multi	test	test	foo	2019-06-28 20:56:14-07	2
31822	0	test	test	foo	2019-06-28 20:57:13-07	2
31832	1	test	test	foo	2019-06-28 20:57:14-07	2
31842	2	test	test	foo	2019-06-28 20:57:14-07	2
31852	3	test	test	foo	2019-06-28 20:57:15-07	2
31862	4	test	test	foo	2019-06-28 20:57:15-07	2
31872	5	test	test	foo	2019-06-28 20:57:16-07	2
31882	6	test	test	foo	2019-06-28 20:57:16-07	2
31892	7	test	test	foo	2019-06-28 20:57:17-07	2
31902	8	test	test	foo	2019-06-28 20:57:18-07	2
31912	9	test	test	foo	2019-06-28 20:57:18-07	2
31922	10	test	test	foo	2019-06-28 20:57:19-07	2
31932	11	test	test	foo	2019-06-28 20:57:19-07	2
31942	12	test	test	foo	2019-06-28 20:57:20-07	2
31952	13	test	test	foo	2019-06-28 20:57:20-07	2
31962	14	test	test	foo	2019-06-28 20:57:21-07	2
31972	15	test	test	foo	2019-06-28 20:57:21-07	2
31982	16	test	test	foo	2019-06-28 20:57:22-07	2
31992	17	test	test	foo	2019-06-28 20:57:22-07	2
32002	18	test	test	foo	2019-06-28 20:57:23-07	2
32012	19	test	test	foo	2019-06-28 20:57:23-07	2
32022	20	test	test	foo	2019-06-28 20:57:24-07	2
32032	21	test	test	foo	2019-06-28 20:57:24-07	2
32042	22	test	test	foo	2019-06-28 20:57:25-07	2
32052	23	test	test	foo	2019-06-28 20:57:25-07	2
32062	24	test	test	foo	2019-06-28 20:57:26-07	2
32072	25	test	test	foo	2019-06-28 20:57:26-07	2
32082	26	test	test	foo	2019-06-28 20:57:27-07	2
32092	27	test	test	foo	2019-06-28 20:57:27-07	2
32102	28	test	test	foo	2019-06-28 20:57:28-07	2
32112	29	test	test	foo	2019-06-28 20:57:28-07	2
32122	30	test	test	foo	2019-06-28 20:57:29-07	2
32132	31	test	test	foo	2019-06-28 20:57:29-07	2
32142	32	test	test	foo	2019-06-28 20:57:30-07	2
32152	33	test	test	foo	2019-06-28 20:57:30-07	2
32162	34	test	test	foo	2019-06-28 20:57:31-07	2
32172	35	test	test	foo	2019-06-28 20:57:31-07	2
32182	36	test	test	foo	2019-06-28 20:57:32-07	2
32192	37	test	test	foo	2019-06-28 20:57:32-07	2
32202	38	test	test	foo	2019-06-28 20:57:33-07	2
32212	39	test	test	foo	2019-06-28 20:57:33-07	2
32222	40	test	test	foo	2019-06-28 20:57:34-07	2
32232	41	test	test	foo	2019-06-28 20:57:34-07	2
32242	42	test	test	foo	2019-06-28 20:57:35-07	2
32252	43	test	test	foo	2019-06-28 20:57:35-07	2
32262	44	test	test	foo	2019-06-28 20:57:36-07	2
32272	45	test	test	foo	2019-06-28 20:57:36-07	2
32282	46	test	test	foo	2019-06-28 20:57:37-07	2
32292	47	test	test	foo	2019-06-28 20:57:37-07	2
32302	48	test	test	foo	2019-06-28 20:57:38-07	2
32312	49	test	test	foo	2019-06-28 20:57:38-07	2
32322	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-06-28 20:58:28-07	2
32332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-08 13:41:45-07	2
32342	0	test	test	foo	2019-07-08 13:41:50-07	2
32352	1	test	test	foo	2019-07-08 13:41:51-07	2
32362	2	test	test	foo	2019-07-08 13:41:51-07	2
32372	3	test	test	foo	2019-07-08 13:41:51-07	2
32382	4	test	test	foo	2019-07-08 13:41:51-07	2
32392	5	test	test	foo	2019-07-08 13:41:52-07	2
32402	6	test	test	foo	2019-07-08 13:41:52-07	2
32412	7	test	test	foo	2019-07-08 13:41:52-07	2
32422	8	test	test	foo	2019-07-08 13:41:52-07	2
32432	9	test	test	foo	2019-07-08 13:41:52-07	2
32442	10	test	test	foo	2019-07-08 13:41:53-07	2
32452	11	test	test	foo	2019-07-08 13:41:53-07	2
32462	12	test	test	foo	2019-07-08 13:41:53-07	2
32472	13	test	test	foo	2019-07-08 13:41:53-07	2
32482	14	test	test	foo	2019-07-08 13:41:53-07	2
32492	15	test	test	foo	2019-07-08 13:41:54-07	2
32512	17	test	test	foo	2019-07-08 13:41:54-07	2
32522	18	test	test	foo	2019-07-08 13:41:54-07	2
32532	19	test	test	foo	2019-07-08 13:41:55-07	2
32542	20	test	test	foo	2019-07-08 13:41:55-07	2
32552	21	test	test	foo	2019-07-08 13:41:55-07	2
32562	22	test	test	foo	2019-07-08 13:41:55-07	2
32572	23	test	test	foo	2019-07-08 13:41:55-07	2
32582	24	test	test	foo	2019-07-08 13:41:56-07	2
32592	25	test	test	foo	2019-07-08 13:41:56-07	2
32602	26	test	test	foo	2019-07-08 13:41:56-07	2
32612	27	test	test	foo	2019-07-08 13:41:56-07	2
32622	28	test	test	foo	2019-07-08 13:41:56-07	2
32632	29	test	test	foo	2019-07-08 13:41:57-07	2
32642	30	test	test	foo	2019-07-08 13:41:57-07	2
32652	31	test	test	foo	2019-07-08 13:41:57-07	2
32662	32	test	test	foo	2019-07-08 13:41:57-07	2
32672	33	test	test	foo	2019-07-08 13:41:57-07	2
32682	34	test	test	foo	2019-07-08 13:41:58-07	2
32692	35	test	test	foo	2019-07-08 13:41:58-07	2
32702	36	test	test	foo	2019-07-08 13:41:58-07	2
32712	37	test	test	foo	2019-07-08 13:41:58-07	2
32722	38	test	test	foo	2019-07-08 13:41:58-07	2
32732	39	test	test	foo	2019-07-08 13:41:59-07	2
32742	40	test	test	foo	2019-07-08 13:41:59-07	2
32752	41	test	test	foo	2019-07-08 13:41:59-07	2
32762	42	test	test	foo	2019-07-08 13:41:59-07	2
32772	43	test	test	foo	2019-07-08 13:41:59-07	2
32782	44	test	test	foo	2019-07-08 13:42:00-07	2
32792	45	test	test	foo	2019-07-08 13:42:00-07	2
32802	46	test	test	foo	2019-07-08 13:42:00-07	2
32812	47	test	test	foo	2019-07-08 13:42:00-07	2
32822	48	test	test	foo	2019-07-08 13:42:00-07	2
32832	49	test	test	foo	2019-07-08 13:42:01-07	2
32842	0	test	test	foo	2019-07-08 13:42:01-07	2
32852	1	test	test	foo	2019-07-08 13:42:01-07	2
32862	2	test	test	foo	2019-07-08 13:42:01-07	2
32872	3	test	test	foo	2019-07-08 13:42:02-07	2
32882	4	test	test	foo	2019-07-08 13:42:02-07	2
32892	5	test	test	foo	2019-07-08 13:42:02-07	2
32902	6	test	test	foo	2019-07-08 13:42:02-07	2
32912	7	test	test	foo	2019-07-08 13:42:02-07	2
32922	8	test	test	foo	2019-07-08 13:42:03-07	2
32932	9	test	test	foo	2019-07-08 13:42:03-07	2
32942	10	test	test	foo	2019-07-08 13:42:03-07	2
32952	11	test	test	foo	2019-07-08 13:42:03-07	2
32962	12	test	test	foo	2019-07-08 13:42:04-07	2
32972	13	test	test	foo	2019-07-08 13:42:04-07	2
32982	14	test	test	foo	2019-07-08 13:42:04-07	2
32992	15	test	test	foo	2019-07-08 13:42:04-07	2
33002	16	test	test	foo	2019-07-08 13:42:04-07	2
33012	17	test	test	foo	2019-07-08 13:42:05-07	2
33022	18	test	test	foo	2019-07-08 13:42:05-07	2
33032	19	test	test	foo	2019-07-08 13:42:05-07	2
33042	20	test	test	foo	2019-07-08 13:42:05-07	2
33052	21	test	test	foo	2019-07-08 13:42:05-07	2
33062	22	test	test	foo	2019-07-08 13:42:06-07	2
33072	23	test	test	foo	2019-07-08 13:42:06-07	2
33082	24	test	test	foo	2019-07-08 13:42:06-07	2
33092	25	test	test	foo	2019-07-08 13:42:06-07	2
33102	26	test	test	foo	2019-07-08 13:42:07-07	2
33112	27	test	test	foo	2019-07-08 13:42:07-07	2
33122	28	test	test	foo	2019-07-08 13:42:07-07	2
33132	29	test	test	foo	2019-07-08 13:42:07-07	2
33142	30	test	test	foo	2019-07-08 13:42:07-07	2
33152	31	test	test	foo	2019-07-08 13:42:08-07	2
33162	32	test	test	foo	2019-07-08 13:42:08-07	2
33172	33	test	test	foo	2019-07-08 13:42:08-07	2
33182	34	test	test	foo	2019-07-08 13:42:09-07	2
33192	35	test	test	foo	2019-07-08 13:42:09-07	2
33202	36	test	test	foo	2019-07-08 13:42:09-07	2
33212	37	test	test	foo	2019-07-08 13:42:09-07	2
33222	38	test	test	foo	2019-07-08 13:42:09-07	2
33232	39	test	test	foo	2019-07-08 13:42:10-07	2
33242	40	test	test	foo	2019-07-08 13:42:10-07	2
33252	41	test	test	foo	2019-07-08 13:42:10-07	2
33262	42	test	test	foo	2019-07-08 13:42:10-07	2
33272	43	test	test	foo	2019-07-08 13:42:10-07	2
33282	44	test	test	foo	2019-07-08 13:42:11-07	2
33292	45	test	test	foo	2019-07-08 13:42:11-07	2
33302	46	test	test	foo	2019-07-08 13:42:11-07	2
33312	47	test	test	foo	2019-07-08 13:42:11-07	2
33322	48	test	test	foo	2019-07-08 13:42:11-07	2
33332	49	test	test	foo	2019-07-08 13:42:12-07	2
33342	50	test	test	foo	2019-07-08 13:42:12-07	2
33352	51	test	test	foo	2019-07-08 13:42:12-07	2
33362	52	test	test	foo	2019-07-08 13:42:12-07	2
33372	53	test	test	foo	2019-07-08 13:42:12-07	2
33382	54	test	test	foo	2019-07-08 13:42:13-07	2
33392	55	test	test	foo	2019-07-08 13:42:13-07	2
33402	56	test	test	foo	2019-07-08 13:42:13-07	2
33412	57	test	test	foo	2019-07-08 13:42:13-07	2
33422	58	test	test	foo	2019-07-08 13:42:13-07	2
33432	59	test	test	foo	2019-07-08 13:42:14-07	2
33442	60	test	test	foo	2019-07-08 13:42:14-07	2
33452	61	test	test	foo	2019-07-08 13:42:14-07	2
33462	62	test	test	foo	2019-07-08 13:42:14-07	2
33472	63	test	test	foo	2019-07-08 13:42:14-07	2
33482	64	test	test	foo	2019-07-08 13:42:15-07	2
33492	65	test	test	foo	2019-07-08 13:42:15-07	2
33502	66	test	test	foo	2019-07-08 13:42:15-07	2
33512	67	test	test	foo	2019-07-08 13:42:15-07	2
33522	68	test	test	foo	2019-07-08 13:42:16-07	2
33532	69	test	test	foo	2019-07-08 13:42:16-07	2
33542	70	test	test	foo	2019-07-08 13:42:16-07	2
33552	71	test	test	foo	2019-07-08 13:42:16-07	2
33562	72	test	test	foo	2019-07-08 13:42:16-07	2
33572	73	test	test	foo	2019-07-08 13:42:16-07	2
33582	74	test	test	foo	2019-07-08 13:42:17-07	2
33592	75	test	test	foo	2019-07-08 13:42:17-07	2
33602	76	test	test	foo	2019-07-08 13:42:17-07	2
33612	77	test	test	foo	2019-07-08 13:42:17-07	2
33622	78	test	test	foo	2019-07-08 13:42:17-07	2
33632	79	test	test	foo	2019-07-08 13:42:18-07	2
33642	80	test	test	foo	2019-07-08 13:42:18-07	2
33652	81	test	test	foo	2019-07-08 13:42:18-07	2
33662	82	test	test	foo	2019-07-08 13:42:18-07	2
33672	83	test	test	foo	2019-07-08 13:42:18-07	2
33682	84	test	test	foo	2019-07-08 13:42:19-07	2
33692	85	test	test	foo	2019-07-08 13:42:19-07	2
33702	86	test	test	foo	2019-07-08 13:42:19-07	2
33712	87	test	test	foo	2019-07-08 13:42:19-07	2
33722	88	test	test	foo	2019-07-08 13:42:20-07	2
33732	89	test	test	foo	2019-07-08 13:42:20-07	2
33742	90	test	test	foo	2019-07-08 13:42:20-07	2
33752	91	test	test	foo	2019-07-08 13:42:20-07	2
33762	92	test	test	foo	2019-07-08 13:42:20-07	2
33772	93	test	test	foo	2019-07-08 13:42:21-07	2
33782	94	test	test	foo	2019-07-08 13:42:21-07	2
33792	95	test	test	foo	2019-07-08 13:42:21-07	2
33802	96	test	test	foo	2019-07-08 13:42:21-07	2
33812	97	test	test	foo	2019-07-08 13:42:21-07	2
33822	98	test	test	foo	2019-07-08 13:42:22-07	2
33832	99	test	test	foo	2019-07-08 13:42:22-07	2
33842	100	test	test	foo	2019-07-08 13:42:22-07	2
33852	101	test	test	foo	2019-07-08 13:42:22-07	2
33862	102	test	test	foo	2019-07-08 13:42:22-07	2
33872	103	test	test	foo	2019-07-08 13:42:23-07	2
33882	104	test	test	foo	2019-07-08 13:42:23-07	2
33892	105	test	test	foo	2019-07-08 13:42:23-07	2
33902	106	test	test	foo	2019-07-08 13:42:23-07	2
33912	107	test	test	foo	2019-07-08 13:42:23-07	2
33922	108	test	test	foo	2019-07-08 13:42:24-07	2
33932	109	test	test	foo	2019-07-08 13:42:24-07	2
33942	110	test	test	foo	2019-07-08 13:42:24-07	2
33952	111	test	test	foo	2019-07-08 13:42:24-07	2
33962	112	test	test	foo	2019-07-08 13:42:24-07	2
33972	113	test	test	foo	2019-07-08 13:42:25-07	2
33982	114	test	test	foo	2019-07-08 13:42:25-07	2
33992	115	test	test	foo	2019-07-08 13:42:25-07	2
34002	116	test	test	foo	2019-07-08 13:42:25-07	2
34012	117	test	test	foo	2019-07-08 13:42:25-07	2
34022	118	test	test	foo	2019-07-08 13:42:26-07	2
34032	119	test	test	foo	2019-07-08 13:42:26-07	2
34042	120	test	test	foo	2019-07-08 13:42:26-07	2
34052	121	test	test	foo	2019-07-08 13:42:26-07	2
34062	122	test	test	foo	2019-07-08 13:42:26-07	2
34072	123	test	test	foo	2019-07-08 13:42:27-07	2
34082	124	test	test	foo	2019-07-08 13:42:27-07	2
34092	125	test	test	foo	2019-07-08 13:42:27-07	2
34102	126	test	test	foo	2019-07-08 13:42:27-07	2
34112	127	test	test	foo	2019-07-08 13:42:27-07	2
34122	128	test	test	foo	2019-07-08 13:42:28-07	2
34132	129	test	test	foo	2019-07-08 13:42:28-07	2
34142	130	test	test	foo	2019-07-08 13:42:28-07	2
34152	131	test	test	foo	2019-07-08 13:42:28-07	2
34162	132	test	test	foo	2019-07-08 13:42:28-07	2
34172	133	test	test	foo	2019-07-08 13:42:29-07	2
34182	134	test	test	foo	2019-07-08 13:42:29-07	2
34192	135	test	test	foo	2019-07-08 13:42:29-07	2
34202	136	test	test	foo	2019-07-08 13:42:29-07	2
34212	137	test	test	foo	2019-07-08 13:42:29-07	2
34222	138	test	test	foo	2019-07-08 13:42:30-07	2
34232	139	test	test	foo	2019-07-08 13:42:30-07	2
34242	140	test	test	foo	2019-07-08 13:42:30-07	2
34252	141	test	test	foo	2019-07-08 13:42:30-07	2
34262	142	test	test	foo	2019-07-08 13:42:30-07	2
34272	143	test	test	foo	2019-07-08 13:42:31-07	2
34282	144	test	test	foo	2019-07-08 13:42:31-07	2
34292	145	test	test	foo	2019-07-08 13:42:31-07	2
34302	146	test	test	foo	2019-07-08 13:42:31-07	2
34312	147	test	test	foo	2019-07-08 13:42:31-07	2
34322	148	test	test	foo	2019-07-08 13:42:32-07	2
34332	149	test	test	foo	2019-07-08 13:42:32-07	2
34342	150	test	test	foo	2019-07-08 13:42:32-07	2
34352	151	test	test	foo	2019-07-08 13:42:32-07	2
34362	152	test	test	foo	2019-07-08 13:42:32-07	2
34372	153	test	test	foo	2019-07-08 13:42:33-07	2
34382	154	test	test	foo	2019-07-08 13:42:33-07	2
34392	155	test	test	foo	2019-07-08 13:42:33-07	2
34402	156	test	test	foo	2019-07-08 13:42:33-07	2
34412	157	test	test	foo	2019-07-08 13:42:34-07	2
34422	158	test	test	foo	2019-07-08 13:42:34-07	2
34432	159	test	test	foo	2019-07-08 13:42:34-07	2
34442	160	test	test	foo	2019-07-08 13:42:34-07	2
34452	161	test	test	foo	2019-07-08 13:42:34-07	2
34462	162	test	test	foo	2019-07-08 13:42:35-07	2
34472	163	test	test	foo	2019-07-08 13:42:35-07	2
34482	164	test	test	foo	2019-07-08 13:42:35-07	2
34492	165	test	test	foo	2019-07-08 13:42:35-07	2
34502	166	test	test	foo	2019-07-08 13:42:35-07	2
34512	167	test	test	foo	2019-07-08 13:42:36-07	2
34522	168	test	test	foo	2019-07-08 13:42:36-07	2
34532	169	test	test	foo	2019-07-08 13:42:36-07	2
34542	170	test	test	foo	2019-07-08 13:42:36-07	2
34552	171	test	test	foo	2019-07-08 13:42:36-07	2
34562	172	test	test	foo	2019-07-08 13:42:37-07	2
34572	173	test	test	foo	2019-07-08 13:42:37-07	2
34582	174	test	test	foo	2019-07-08 13:42:37-07	2
34592	175	test	test	foo	2019-07-08 13:42:37-07	2
34602	176	test	test	foo	2019-07-08 13:42:37-07	2
34612	177	test	test	foo	2019-07-08 13:42:38-07	2
34622	178	test	test	foo	2019-07-08 13:42:38-07	2
34632	179	test	test	foo	2019-07-08 13:42:38-07	2
34642	180	test	test	foo	2019-07-08 13:42:38-07	2
34652	181	test	test	foo	2019-07-08 13:42:38-07	2
34662	182	test	test	foo	2019-07-08 13:42:39-07	2
34672	183	test	test	foo	2019-07-08 13:42:39-07	2
34682	184	test	test	foo	2019-07-08 13:42:39-07	2
34692	185	test	test	foo	2019-07-08 13:42:39-07	2
34702	186	test	test	foo	2019-07-08 13:42:39-07	2
34712	187	test	test	foo	2019-07-08 13:42:40-07	2
34722	188	test	test	foo	2019-07-08 13:42:40-07	2
34732	189	test	test	foo	2019-07-08 13:42:40-07	2
34742	190	test	test	foo	2019-07-08 13:42:40-07	2
34752	191	test	test	foo	2019-07-08 13:42:41-07	2
34762	192	test	test	foo	2019-07-08 13:42:41-07	2
34772	193	test	test	foo	2019-07-08 13:42:41-07	2
34782	194	test	test	foo	2019-07-08 13:42:41-07	2
34792	195	test	test	foo	2019-07-08 13:42:41-07	2
34802	196	test	test	foo	2019-07-08 13:42:42-07	2
34812	197	test	test	foo	2019-07-08 13:42:42-07	2
34822	198	test	test	foo	2019-07-08 13:42:42-07	2
34832	199	test	test	foo	2019-07-08 13:42:42-07	2
34842	0	test	test	foo	2019-07-08 15:55:16-07	2
34852	1	test	test	foo	2019-07-08 15:55:16-07	2
34862	2	test	test	foo	2019-07-08 15:55:16-07	2
34872	3	test	test	foo	2019-07-08 15:55:17-07	2
34882	4	test	test	foo	2019-07-08 15:55:17-07	2
34892	5	test	test	foo	2019-07-08 15:55:17-07	2
34902	6	test	test	foo	2019-07-08 15:55:17-07	2
34912	7	test	test	foo	2019-07-08 15:55:17-07	2
34922	8	test	test	foo	2019-07-08 15:55:18-07	2
34932	9	test	test	foo	2019-07-08 15:55:18-07	2
34942	10	test	test	foo	2019-07-08 15:55:18-07	2
34952	11	test	test	foo	2019-07-08 15:55:18-07	2
34962	12	test	test	foo	2019-07-08 15:55:18-07	2
34972	13	test	test	foo	2019-07-08 15:55:19-07	2
34982	14	test	test	foo	2019-07-08 15:55:19-07	2
34992	15	test	test	foo	2019-07-08 15:55:19-07	2
35002	16	test	test	foo	2019-07-08 15:55:19-07	2
35012	17	test	test	foo	2019-07-08 15:55:19-07	2
35022	18	test	test	foo	2019-07-08 15:55:20-07	2
35032	19	test	test	foo	2019-07-08 15:55:20-07	2
35042	20	test	test	foo	2019-07-08 15:55:20-07	2
35052	21	test	test	foo	2019-07-08 15:55:20-07	2
35062	22	test	test	foo	2019-07-08 15:55:20-07	2
35072	23	test	test	foo	2019-07-08 15:55:21-07	2
35082	24	test	test	foo	2019-07-08 15:55:21-07	2
35092	25	test	test	foo	2019-07-08 15:55:21-07	2
35102	26	test	test	foo	2019-07-08 15:55:21-07	2
35112	27	test	test	foo	2019-07-08 15:55:21-07	2
35122	28	test	test	foo	2019-07-08 15:55:22-07	2
35132	29	test	test	foo	2019-07-08 15:55:22-07	2
35142	30	test	test	foo	2019-07-08 15:55:22-07	2
35152	31	test	test	foo	2019-07-08 15:55:22-07	2
35162	32	test	test	foo	2019-07-08 15:55:22-07	2
35172	33	test	test	foo	2019-07-08 15:55:23-07	2
35182	34	test	test	foo	2019-07-08 15:55:23-07	2
35192	35	test	test	foo	2019-07-08 15:55:23-07	2
35202	36	test	test	foo	2019-07-08 15:55:23-07	2
35212	37	test	test	foo	2019-07-08 15:55:23-07	2
35222	38	test	test	foo	2019-07-08 15:55:24-07	2
35232	39	test	test	foo	2019-07-08 15:55:24-07	2
35242	40	test	test	foo	2019-07-08 15:55:24-07	2
35252	41	test	test	foo	2019-07-08 15:55:24-07	2
35262	42	test	test	foo	2019-07-08 15:55:24-07	2
35272	43	test	test	foo	2019-07-08 15:55:25-07	2
35282	44	test	test	foo	2019-07-08 15:55:25-07	2
35292	45	test	test	foo	2019-07-08 15:55:25-07	2
35302	46	test	test	foo	2019-07-08 15:55:25-07	2
35312	47	test	test	foo	2019-07-08 15:55:25-07	2
35322	48	test	test	foo	2019-07-08 15:55:26-07	2
35332	49	test	test	foo	2019-07-08 15:55:26-07	2
35342	50	test	test	foo	2019-07-08 15:55:26-07	2
35352	51	test	test	foo	2019-07-08 15:55:26-07	2
35362	52	test	test	foo	2019-07-08 15:55:26-07	2
35372	53	test	test	foo	2019-07-08 15:55:27-07	2
35382	54	test	test	foo	2019-07-08 15:55:27-07	2
35392	55	test	test	foo	2019-07-08 15:55:27-07	2
35402	56	test	test	foo	2019-07-08 15:55:27-07	2
35412	57	test	test	foo	2019-07-08 15:55:28-07	2
35422	58	test	test	foo	2019-07-08 15:55:28-07	2
35432	59	test	test	foo	2019-07-08 15:55:28-07	2
35442	60	test	test	foo	2019-07-08 15:55:28-07	2
35452	61	test	test	foo	2019-07-08 15:55:29-07	2
35462	62	test	test	foo	2019-07-08 15:55:29-07	2
35472	63	test	test	foo	2019-07-08 15:55:29-07	2
35482	64	test	test	foo	2019-07-08 15:55:29-07	2
35492	65	test	test	foo	2019-07-08 15:55:29-07	2
35502	66	test	test	foo	2019-07-08 15:55:30-07	2
35512	67	test	test	foo	2019-07-08 15:55:30-07	2
35522	68	test	test	foo	2019-07-08 15:55:30-07	2
35532	69	test	test	foo	2019-07-08 15:55:30-07	2
35542	70	test	test	foo	2019-07-08 15:55:30-07	2
35552	71	test	test	foo	2019-07-08 15:55:31-07	2
35562	72	test	test	foo	2019-07-08 15:55:31-07	2
35572	73	test	test	foo	2019-07-08 15:55:31-07	2
35582	74	test	test	foo	2019-07-08 15:55:31-07	2
35592	75	test	test	foo	2019-07-08 15:55:31-07	2
35602	76	test	test	foo	2019-07-08 15:55:32-07	2
35612	77	test	test	foo	2019-07-08 15:55:32-07	2
35622	78	test	test	foo	2019-07-08 15:55:32-07	2
35632	79	test	test	foo	2019-07-08 15:55:32-07	2
35642	80	test	test	foo	2019-07-08 15:55:32-07	2
35652	81	test	test	foo	2019-07-08 15:55:33-07	2
35662	82	test	test	foo	2019-07-08 15:55:33-07	2
35672	83	test	test	foo	2019-07-08 15:55:33-07	2
35682	84	test	test	foo	2019-07-08 15:55:33-07	2
35692	85	test	test	foo	2019-07-08 15:55:33-07	2
35702	86	test	test	foo	2019-07-08 15:55:34-07	2
35712	87	test	test	foo	2019-07-08 15:55:34-07	2
35722	88	test	test	foo	2019-07-08 15:55:34-07	2
35732	89	test	test	foo	2019-07-08 15:55:34-07	2
35742	90	test	test	foo	2019-07-08 15:55:34-07	2
35752	91	test	test	foo	2019-07-08 15:55:35-07	2
35762	92	test	test	foo	2019-07-08 15:55:35-07	2
35772	93	test	test	foo	2019-07-08 15:55:35-07	2
35782	94	test	test	foo	2019-07-08 15:55:35-07	2
35792	95	test	test	foo	2019-07-08 15:55:35-07	2
35802	96	test	test	foo	2019-07-08 15:55:36-07	2
35812	97	test	test	foo	2019-07-08 15:55:36-07	2
35822	98	test	test	foo	2019-07-08 15:55:36-07	2
35832	99	test	test	foo	2019-07-08 15:55:36-07	2
35842	100	test	test	foo	2019-07-08 15:55:36-07	2
35852	101	test	test	foo	2019-07-08 15:55:37-07	2
35862	102	test	test	foo	2019-07-08 15:55:37-07	2
35872	103	test	test	foo	2019-07-08 15:55:37-07	2
35882	104	test	test	foo	2019-07-08 15:55:37-07	2
35892	105	test	test	foo	2019-07-08 15:55:37-07	2
35902	106	test	test	foo	2019-07-08 15:55:38-07	2
35912	107	test	test	foo	2019-07-08 15:55:38-07	2
35922	108	test	test	foo	2019-07-08 15:55:38-07	2
35932	109	test	test	foo	2019-07-08 15:55:38-07	2
35942	110	test	test	foo	2019-07-08 15:55:38-07	2
35952	111	test	test	foo	2019-07-08 15:55:39-07	2
35962	112	test	test	foo	2019-07-08 15:55:39-07	2
35972	113	test	test	foo	2019-07-08 15:55:39-07	2
35982	114	test	test	foo	2019-07-08 15:55:39-07	2
35992	115	test	test	foo	2019-07-08 15:55:39-07	2
36002	116	test	test	foo	2019-07-08 15:55:40-07	2
36012	117	test	test	foo	2019-07-08 15:55:40-07	2
36022	118	test	test	foo	2019-07-08 15:55:40-07	2
36032	119	test	test	foo	2019-07-08 15:55:40-07	2
36042	120	test	test	foo	2019-07-08 15:55:40-07	2
36052	121	test	test	foo	2019-07-08 15:55:41-07	2
36062	122	test	test	foo	2019-07-08 15:55:41-07	2
36072	123	test	test	foo	2019-07-08 15:55:41-07	2
36082	124	test	test	foo	2019-07-08 15:55:41-07	2
36092	125	test	test	foo	2019-07-08 15:55:41-07	2
36102	126	test	test	foo	2019-07-08 15:55:42-07	2
36112	127	test	test	foo	2019-07-08 15:55:42-07	2
36122	128	test	test	foo	2019-07-08 15:55:42-07	2
36132	129	test	test	foo	2019-07-08 15:55:42-07	2
36142	130	test	test	foo	2019-07-08 15:55:42-07	2
36152	131	test	test	foo	2019-07-08 15:55:43-07	2
36162	132	test	test	foo	2019-07-08 15:55:43-07	2
36172	133	test	test	foo	2019-07-08 15:55:43-07	2
36182	134	test	test	foo	2019-07-08 15:55:43-07	2
36192	135	test	test	foo	2019-07-08 15:55:43-07	2
36202	136	test	test	foo	2019-07-08 15:55:44-07	2
36212	137	test	test	foo	2019-07-08 15:55:44-07	2
36222	138	test	test	foo	2019-07-08 15:55:44-07	2
36232	139	test	test	foo	2019-07-08 15:55:44-07	2
36242	140	test	test	foo	2019-07-08 15:55:44-07	2
36252	141	test	test	foo	2019-07-08 15:55:45-07	2
36262	142	test	test	foo	2019-07-08 15:55:45-07	2
36272	143	test	test	foo	2019-07-08 15:55:45-07	2
36282	144	test	test	foo	2019-07-08 15:55:45-07	2
36292	145	test	test	foo	2019-07-08 15:55:45-07	2
36302	146	test	test	foo	2019-07-08 15:55:46-07	2
36312	147	test	test	foo	2019-07-08 15:55:46-07	2
36322	148	test	test	foo	2019-07-08 15:55:46-07	2
36332	149	test	test	foo	2019-07-08 15:55:46-07	2
36342	150	test	test	foo	2019-07-08 15:55:46-07	2
36352	151	test	test	foo	2019-07-08 15:55:47-07	2
36362	152	test	test	foo	2019-07-08 15:55:47-07	2
36372	153	test	test	foo	2019-07-08 15:55:47-07	2
36382	154	test	test	foo	2019-07-08 15:55:47-07	2
36392	155	test	test	foo	2019-07-08 15:55:47-07	2
36402	156	test	test	foo	2019-07-08 15:55:48-07	2
36412	157	test	test	foo	2019-07-08 15:55:48-07	2
36422	158	test	test	foo	2019-07-08 15:55:48-07	2
36432	159	test	test	foo	2019-07-08 15:55:48-07	2
36442	160	test	test	foo	2019-07-08 15:55:48-07	2
36452	161	test	test	foo	2019-07-08 15:55:49-07	2
36462	162	test	test	foo	2019-07-08 15:55:49-07	2
36472	163	test	test	foo	2019-07-08 15:55:49-07	2
36482	164	test	test	foo	2019-07-08 15:55:49-07	2
36492	165	test	test	foo	2019-07-08 15:55:49-07	2
36502	166	test	test	foo	2019-07-08 15:55:50-07	2
36512	167	test	test	foo	2019-07-08 15:55:50-07	2
36522	168	test	test	foo	2019-07-08 15:55:50-07	2
36532	169	test	test	foo	2019-07-08 15:55:50-07	2
36542	170	test	test	foo	2019-07-08 15:55:50-07	2
36552	171	test	test	foo	2019-07-08 15:55:51-07	2
36562	172	test	test	foo	2019-07-08 15:55:51-07	2
36572	173	test	test	foo	2019-07-08 15:55:51-07	2
36582	174	test	test	foo	2019-07-08 15:55:51-07	2
36592	175	test	test	foo	2019-07-08 15:55:51-07	2
36602	176	test	test	foo	2019-07-08 15:55:52-07	2
36612	177	test	test	foo	2019-07-08 15:55:52-07	2
36622	178	test	test	foo	2019-07-08 15:55:52-07	2
36632	179	test	test	foo	2019-07-08 15:55:52-07	2
36642	180	test	test	foo	2019-07-08 15:55:52-07	2
36652	181	test	test	foo	2019-07-08 15:55:52-07	2
36662	182	test	test	foo	2019-07-08 15:55:53-07	2
36672	183	test	test	foo	2019-07-08 15:55:53-07	2
36682	184	test	test	foo	2019-07-08 15:55:53-07	2
36692	185	test	test	foo	2019-07-08 15:55:53-07	2
36702	186	test	test	foo	2019-07-08 15:55:53-07	2
36712	187	test	test	foo	2019-07-08 15:55:54-07	2
36722	188	test	test	foo	2019-07-08 15:55:54-07	2
36732	189	test	test	foo	2019-07-08 15:55:54-07	2
36742	190	test	test	foo	2019-07-08 15:55:54-07	2
36752	191	test	test	foo	2019-07-08 15:55:54-07	2
36762	192	test	test	foo	2019-07-08 15:55:55-07	2
36772	193	test	test	foo	2019-07-08 15:55:55-07	2
36782	194	test	test	foo	2019-07-08 15:55:55-07	2
36792	195	test	test	foo	2019-07-08 15:55:55-07	2
36802	196	test	test	foo	2019-07-08 15:55:55-07	2
36812	197	test	test	foo	2019-07-08 15:55:56-07	2
36822	198	test	test	foo	2019-07-08 15:55:56-07	2
36832	199	test	test	foo	2019-07-08 15:55:56-07	2
36842	0	test	test	foo	2019-07-08 15:55:56-07	2
36852	1	test	test	foo	2019-07-08 15:55:56-07	2
36862	2	test	test	foo	2019-07-08 15:55:57-07	2
36872	3	test	test	foo	2019-07-08 15:55:57-07	2
36882	4	test	test	foo	2019-07-08 15:55:57-07	2
36892	5	test	test	foo	2019-07-08 15:55:57-07	2
36902	6	test	test	foo	2019-07-08 15:55:57-07	2
36912	7	test	test	foo	2019-07-08 15:55:58-07	2
36922	8	test	test	foo	2019-07-08 15:55:58-07	2
36932	9	test	test	foo	2019-07-08 15:55:58-07	2
36942	10	test	test	foo	2019-07-08 15:55:58-07	2
36952	11	test	test	foo	2019-07-08 15:55:58-07	2
36962	12	test	test	foo	2019-07-08 15:55:59-07	2
36972	13	test	test	foo	2019-07-08 15:55:59-07	2
36982	14	test	test	foo	2019-07-08 15:55:59-07	2
36992	15	test	test	foo	2019-07-08 15:55:59-07	2
37002	16	test	test	foo	2019-07-08 15:55:59-07	2
37012	17	test	test	foo	2019-07-08 15:56:00-07	2
37022	18	test	test	foo	2019-07-08 15:56:00-07	2
37032	19	test	test	foo	2019-07-08 15:56:00-07	2
37042	20	test	test	foo	2019-07-08 15:56:00-07	2
37052	21	test	test	foo	2019-07-08 15:56:00-07	2
37062	22	test	test	foo	2019-07-08 15:56:01-07	2
37072	23	test	test	foo	2019-07-08 15:56:01-07	2
37082	24	test	test	foo	2019-07-08 15:56:01-07	2
37092	25	test	test	foo	2019-07-08 15:56:01-07	2
37102	26	test	test	foo	2019-07-08 15:56:01-07	2
37112	27	test	test	foo	2019-07-08 15:56:02-07	2
37122	28	test	test	foo	2019-07-08 15:56:02-07	2
37132	29	test	test	foo	2019-07-08 15:56:02-07	2
37142	30	test	test	foo	2019-07-08 15:56:02-07	2
37152	31	test	test	foo	2019-07-08 15:56:02-07	2
37162	32	test	test	foo	2019-07-08 15:56:03-07	2
37172	33	test	test	foo	2019-07-08 15:56:03-07	2
37182	34	test	test	foo	2019-07-08 15:56:03-07	2
37192	35	test	test	foo	2019-07-08 15:56:03-07	2
37202	36	test	test	foo	2019-07-08 15:56:03-07	2
37212	37	test	test	foo	2019-07-08 15:56:04-07	2
37222	38	test	test	foo	2019-07-08 15:56:04-07	2
37232	39	test	test	foo	2019-07-08 15:56:04-07	2
37242	40	test	test	foo	2019-07-08 15:56:04-07	2
37252	41	test	test	foo	2019-07-08 15:56:04-07	2
37262	42	test	test	foo	2019-07-08 15:56:05-07	2
37272	43	test	test	foo	2019-07-08 15:56:05-07	2
37282	44	test	test	foo	2019-07-08 15:56:05-07	2
37292	45	test	test	foo	2019-07-08 15:56:05-07	2
37302	46	test	test	foo	2019-07-08 15:56:05-07	2
37312	47	test	test	foo	2019-07-08 15:56:06-07	2
37322	48	test	test	foo	2019-07-08 15:56:06-07	2
37332	49	test	test	foo	2019-07-08 15:56:06-07	2
37342	50	test	test	foo	2019-07-08 15:56:06-07	2
37352	51	test	test	foo	2019-07-08 15:56:06-07	2
37362	52	test	test	foo	2019-07-08 15:56:07-07	2
37372	53	test	test	foo	2019-07-08 15:56:07-07	2
37382	54	test	test	foo	2019-07-08 15:56:07-07	2
37392	55	test	test	foo	2019-07-08 15:56:07-07	2
37402	56	test	test	foo	2019-07-08 15:56:07-07	2
37412	57	test	test	foo	2019-07-08 15:56:08-07	2
37422	58	test	test	foo	2019-07-08 15:56:08-07	2
37432	59	test	test	foo	2019-07-08 15:56:08-07	2
37442	60	test	test	foo	2019-07-08 15:56:08-07	2
37452	61	test	test	foo	2019-07-08 15:56:08-07	2
37462	62	test	test	foo	2019-07-08 15:56:09-07	2
37472	63	test	test	foo	2019-07-08 15:56:09-07	2
37482	64	test	test	foo	2019-07-08 15:56:09-07	2
37492	65	test	test	foo	2019-07-08 15:56:10-07	2
37502	66	test	test	foo	2019-07-08 15:56:10-07	2
37512	67	test	test	foo	2019-07-08 15:56:10-07	2
37522	68	test	test	foo	2019-07-08 15:56:10-07	2
37532	69	test	test	foo	2019-07-08 15:56:10-07	2
37542	70	test	test	foo	2019-07-08 15:56:11-07	2
37552	71	test	test	foo	2019-07-08 15:56:11-07	2
37562	72	test	test	foo	2019-07-08 15:56:11-07	2
37572	73	test	test	foo	2019-07-08 15:56:11-07	2
37582	74	test	test	foo	2019-07-08 15:56:11-07	2
37592	75	test	test	foo	2019-07-08 15:56:12-07	2
37602	76	test	test	foo	2019-07-08 15:56:12-07	2
37612	77	test	test	foo	2019-07-08 15:56:12-07	2
37622	78	test	test	foo	2019-07-08 15:56:12-07	2
37632	79	test	test	foo	2019-07-08 15:56:12-07	2
37642	80	test	test	foo	2019-07-08 15:56:13-07	2
37652	81	test	test	foo	2019-07-08 15:56:13-07	2
37662	82	test	test	foo	2019-07-08 15:56:13-07	2
37672	83	test	test	foo	2019-07-08 15:56:13-07	2
37682	84	test	test	foo	2019-07-08 15:56:14-07	2
37692	85	test	test	foo	2019-07-08 15:56:14-07	2
37702	86	test	test	foo	2019-07-08 15:56:14-07	2
37712	87	test	test	foo	2019-07-08 15:56:14-07	2
37722	88	test	test	foo	2019-07-08 15:56:14-07	2
37732	89	test	test	foo	2019-07-08 15:56:15-07	2
37742	90	test	test	foo	2019-07-08 15:56:15-07	2
37752	91	test	test	foo	2019-07-08 15:56:15-07	2
37762	92	test	test	foo	2019-07-08 15:56:15-07	2
37772	93	test	test	foo	2019-07-08 15:56:15-07	2
37782	94	test	test	foo	2019-07-08 15:56:16-07	2
37792	95	test	test	foo	2019-07-08 15:56:16-07	2
37802	96	test	test	foo	2019-07-08 15:56:16-07	2
37812	97	test	test	foo	2019-07-08 15:56:16-07	2
37822	98	test	test	foo	2019-07-08 15:56:16-07	2
37832	99	test	test	foo	2019-07-08 15:56:17-07	2
37842	100	test	test	foo	2019-07-08 15:56:17-07	2
37852	101	test	test	foo	2019-07-08 15:56:17-07	2
37862	102	test	test	foo	2019-07-08 15:56:17-07	2
37872	103	test	test	foo	2019-07-08 15:56:17-07	2
37882	104	test	test	foo	2019-07-08 15:56:18-07	2
37892	105	test	test	foo	2019-07-08 15:56:18-07	2
37902	106	test	test	foo	2019-07-08 15:56:18-07	2
37912	107	test	test	foo	2019-07-08 15:56:18-07	2
37922	108	test	test	foo	2019-07-08 15:56:19-07	2
37932	109	test	test	foo	2019-07-08 15:56:19-07	2
37942	110	test	test	foo	2019-07-08 15:56:19-07	2
37952	111	test	test	foo	2019-07-08 15:56:19-07	2
37962	112	test	test	foo	2019-07-08 15:56:19-07	2
37972	113	test	test	foo	2019-07-08 15:56:20-07	2
37982	114	test	test	foo	2019-07-08 15:56:20-07	2
37992	115	test	test	foo	2019-07-08 15:56:20-07	2
38002	116	test	test	foo	2019-07-08 15:56:20-07	2
38012	117	test	test	foo	2019-07-08 15:56:20-07	2
38022	118	test	test	foo	2019-07-08 15:56:21-07	2
38032	119	test	test	foo	2019-07-08 15:56:21-07	2
38042	120	test	test	foo	2019-07-08 15:56:21-07	2
38052	121	test	test	foo	2019-07-08 15:56:21-07	2
38062	122	test	test	foo	2019-07-08 15:56:21-07	2
38072	123	test	test	foo	2019-07-08 15:56:22-07	2
38082	124	test	test	foo	2019-07-08 15:56:22-07	2
38092	125	test	test	foo	2019-07-08 15:56:22-07	2
38102	126	test	test	foo	2019-07-08 15:56:22-07	2
38112	127	test	test	foo	2019-07-08 15:56:22-07	2
38122	128	test	test	foo	2019-07-08 15:56:23-07	2
38132	129	test	test	foo	2019-07-08 15:56:23-07	2
38142	130	test	test	foo	2019-07-08 15:56:23-07	2
38152	131	test	test	foo	2019-07-08 15:56:23-07	2
38162	132	test	test	foo	2019-07-08 15:56:23-07	2
38172	133	test	test	foo	2019-07-08 15:56:24-07	2
38182	134	test	test	foo	2019-07-08 15:56:24-07	2
38192	135	test	test	foo	2019-07-08 15:56:24-07	2
38202	136	test	test	foo	2019-07-08 15:56:24-07	2
38212	137	test	test	foo	2019-07-08 15:56:24-07	2
38222	138	test	test	foo	2019-07-08 15:56:25-07	2
38232	139	test	test	foo	2019-07-08 15:56:25-07	2
38242	140	test	test	foo	2019-07-08 15:56:25-07	2
38252	141	test	test	foo	2019-07-08 15:56:25-07	2
38262	142	test	test	foo	2019-07-08 15:56:25-07	2
38272	143	test	test	foo	2019-07-08 15:56:26-07	2
38282	144	test	test	foo	2019-07-08 15:56:26-07	2
38292	145	test	test	foo	2019-07-08 15:56:26-07	2
38302	146	test	test	foo	2019-07-08 15:56:26-07	2
38312	147	test	test	foo	2019-07-08 15:56:26-07	2
38322	148	test	test	foo	2019-07-08 15:56:27-07	2
38332	149	test	test	foo	2019-07-08 15:56:27-07	2
38342	150	test	test	foo	2019-07-08 15:56:27-07	2
38352	151	test	test	foo	2019-07-08 15:56:27-07	2
38362	152	test	test	foo	2019-07-08 15:56:27-07	2
38372	153	test	test	foo	2019-07-08 15:56:28-07	2
38382	154	test	test	foo	2019-07-08 15:56:28-07	2
38392	155	test	test	foo	2019-07-08 15:56:28-07	2
38402	156	test	test	foo	2019-07-08 15:56:28-07	2
38412	157	test	test	foo	2019-07-08 15:56:28-07	2
38422	158	test	test	foo	2019-07-08 15:56:29-07	2
38432	159	test	test	foo	2019-07-08 15:56:29-07	2
38442	160	test	test	foo	2019-07-08 15:56:29-07	2
38452	161	test	test	foo	2019-07-08 15:56:29-07	2
38462	162	test	test	foo	2019-07-08 15:56:29-07	2
38472	163	test	test	foo	2019-07-08 15:56:30-07	2
38482	164	test	test	foo	2019-07-08 15:56:30-07	2
38492	165	test	test	foo	2019-07-08 15:56:30-07	2
38502	166	test	test	foo	2019-07-08 15:56:30-07	2
38512	167	test	test	foo	2019-07-08 15:56:30-07	2
38522	168	test	test	foo	2019-07-08 15:56:31-07	2
38532	169	test	test	foo	2019-07-08 15:56:31-07	2
38542	170	test	test	foo	2019-07-08 15:56:31-07	2
38552	171	test	test	foo	2019-07-08 15:56:31-07	2
38562	172	test	test	foo	2019-07-08 15:56:31-07	2
38572	173	test	test	foo	2019-07-08 15:56:32-07	2
38582	174	test	test	foo	2019-07-08 15:56:32-07	2
38592	175	test	test	foo	2019-07-08 15:56:32-07	2
38602	176	test	test	foo	2019-07-08 15:56:32-07	2
38612	177	test	test	foo	2019-07-08 15:56:32-07	2
38622	178	test	test	foo	2019-07-08 15:56:33-07	2
38632	179	test	test	foo	2019-07-08 15:56:33-07	2
38642	180	test	test	foo	2019-07-08 15:56:33-07	2
38652	181	test	test	foo	2019-07-08 15:56:33-07	2
38662	182	test	test	foo	2019-07-08 15:56:33-07	2
38672	183	test	test	foo	2019-07-08 15:56:34-07	2
38682	184	test	test	foo	2019-07-08 15:56:34-07	2
38692	185	test	test	foo	2019-07-08 15:56:34-07	2
38702	186	test	test	foo	2019-07-08 15:56:34-07	2
38712	187	test	test	foo	2019-07-08 15:56:34-07	2
38722	188	test	test	foo	2019-07-08 15:56:35-07	2
38732	189	test	test	foo	2019-07-08 15:56:35-07	2
38742	190	test	test	foo	2019-07-08 15:56:35-07	2
38752	191	test	test	foo	2019-07-08 15:56:35-07	2
38762	192	test	test	foo	2019-07-08 15:56:36-07	2
38772	193	test	test	foo	2019-07-08 15:56:36-07	2
38782	194	test	test	foo	2019-07-08 15:56:36-07	2
38792	195	test	test	foo	2019-07-08 15:56:36-07	2
38802	196	test	test	foo	2019-07-08 15:56:36-07	2
38812	197	test	test	foo	2019-07-08 15:56:37-07	2
38822	198	test	test	foo	2019-07-08 15:56:37-07	2
38832	199	test	test	foo	2019-07-08 15:56:37-07	2
38842	0	test	test	foo	2019-07-08 15:57:08-07	2
38852	1	test	test	foo	2019-07-08 15:57:09-07	2
38862	2	test	test	foo	2019-07-08 15:57:10-07	2
38872	3	test	test	foo	2019-07-08 15:57:11-07	2
38882	4	test	test	foo	2019-07-08 15:57:12-07	2
38892	5	test	test	foo	2019-07-08 15:57:13-07	2
38902	6	test	test	foo	2019-07-08 15:57:14-07	2
38912	7	test	test	foo	2019-07-08 15:57:15-07	2
38922	8	test	test	foo	2019-07-08 15:57:16-07	2
38932	9	test	test	foo	2019-07-08 15:57:17-07	2
38942	10	test	test	foo	2019-07-08 15:57:18-07	2
38952	11	test	test	foo	2019-07-08 15:57:19-07	2
38962	12	test	test	foo	2019-07-08 15:57:20-07	2
38972	13	test	test	foo	2019-07-08 15:57:21-07	2
38982	14	test	test	foo	2019-07-08 15:57:22-07	2
38992	15	test	test	foo	2019-07-08 15:57:23-07	2
39002	16	test	test	foo	2019-07-08 15:57:24-07	2
39012	17	test	test	foo	2019-07-08 15:57:25-07	2
39022	18	test	test	foo	2019-07-08 15:57:26-07	2
39032	19	test	test	foo	2019-07-08 15:57:27-07	2
39042	20	test	test	foo	2019-07-08 15:57:28-07	2
39052	21	test	test	foo	2019-07-08 15:57:29-07	2
39062	22	test	test	foo	2019-07-08 15:57:30-07	2
39072	23	test	test	foo	2019-07-08 15:57:31-07	2
39082	24	test	test	foo	2019-07-08 15:57:32-07	2
39092	25	test	test	foo	2019-07-08 15:57:33-07	2
39102	26	test	test	foo	2019-07-08 15:57:34-07	2
39112	27	test	test	foo	2019-07-08 15:57:35-07	2
39122	28	test	test	foo	2019-07-08 15:57:36-07	2
39132	29	test	test	foo	2019-07-08 15:57:37-07	2
39142	30	test	test	foo	2019-07-08 15:57:38-07	2
39152	31	test	test	foo	2019-07-08 15:57:39-07	2
39162	32	test	test	foo	2019-07-08 15:57:40-07	2
39172	33	test	test	foo	2019-07-08 15:57:41-07	2
39182	34	test	test	foo	2019-07-08 15:57:42-07	2
39192	35	test	test	foo	2019-07-08 15:57:43-07	2
39202	36	test	test	foo	2019-07-08 15:57:44-07	2
39212	37	test	test	foo	2019-07-08 15:57:45-07	2
39222	38	test	test	foo	2019-07-08 15:57:46-07	2
39232	39	test	test	foo	2019-07-08 15:57:47-07	2
39242	40	test	test	foo	2019-07-08 15:57:48-07	2
39252	41	test	test	foo	2019-07-08 15:57:49-07	2
39262	42	test	test	foo	2019-07-08 15:57:50-07	2
39272	43	test	test	foo	2019-07-08 15:57:51-07	2
39282	44	test	test	foo	2019-07-08 15:57:52-07	2
39292	45	test	test	foo	2019-07-08 15:57:53-07	2
39302	46	test	test	foo	2019-07-08 15:57:54-07	2
39312	47	test	test	foo	2019-07-08 15:57:55-07	2
39322	48	test	test	foo	2019-07-08 15:57:56-07	2
39332	49	test	test	foo	2019-07-08 15:57:57-07	2
39342	50	test	test	foo	2019-07-08 15:57:58-07	2
39352	51	test	test	foo	2019-07-08 15:57:59-07	2
39362	52	test	test	foo	2019-07-08 15:58:00-07	2
39372	53	test	test	foo	2019-07-08 15:58:01-07	2
39382	54	test	test	foo	2019-07-08 15:58:02-07	2
39392	55	test	test	foo	2019-07-08 15:58:03-07	2
39402	56	test	test	foo	2019-07-08 15:58:04-07	2
39412	57	test	test	foo	2019-07-08 15:58:05-07	2
39422	58	test	test	foo	2019-07-08 15:58:06-07	2
39432	59	test	test	foo	2019-07-08 15:58:07-07	2
39442	60	test	test	foo	2019-07-08 15:58:08-07	2
39452	61	test	test	foo	2019-07-08 15:58:09-07	2
39462	62	test	test	foo	2019-07-08 15:58:10-07	2
39472	63	test	test	foo	2019-07-08 15:58:11-07	2
39482	64	test	test	foo	2019-07-08 15:58:12-07	2
39492	65	test	test	foo	2019-07-08 15:58:13-07	2
39502	66	test	test	foo	2019-07-08 15:58:14-07	2
39512	67	test	test	foo	2019-07-08 15:58:15-07	2
39522	68	test	test	foo	2019-07-08 15:58:16-07	2
39532	69	test	test	foo	2019-07-08 15:58:17-07	2
39542	70	test	test	foo	2019-07-08 15:58:18-07	2
39552	71	test	test	foo	2019-07-08 15:58:19-07	2
39562	72	test	test	foo	2019-07-08 15:58:20-07	2
39572	73	test	test	foo	2019-07-08 15:58:21-07	2
39582	74	test	test	foo	2019-07-08 15:58:22-07	2
39592	75	test	test	foo	2019-07-08 15:58:23-07	2
39602	76	test	test	foo	2019-07-08 15:58:24-07	2
39612	77	test	test	foo	2019-07-08 15:58:25-07	2
39622	78	test	test	foo	2019-07-08 15:58:26-07	2
39632	79	test	test	foo	2019-07-08 15:58:27-07	2
39642	80	test	test	foo	2019-07-08 15:58:28-07	2
39652	81	test	test	foo	2019-07-08 15:58:29-07	2
39662	82	test	test	foo	2019-07-08 15:58:30-07	2
39672	83	test	test	foo	2019-07-08 15:58:31-07	2
39682	84	test	test	foo	2019-07-08 15:58:32-07	2
39692	85	test	test	foo	2019-07-08 15:58:33-07	2
39702	86	test	test	foo	2019-07-08 15:58:34-07	2
39712	87	test	test	foo	2019-07-08 15:58:35-07	2
39722	88	test	test	foo	2019-07-08 15:58:36-07	2
39732	89	test	test	foo	2019-07-08 15:58:37-07	2
39742	90	test	test	foo	2019-07-08 15:58:38-07	2
39752	91	test	test	foo	2019-07-08 15:58:39-07	2
39762	92	test	test	foo	2019-07-08 15:58:40-07	2
39772	93	test	test	foo	2019-07-08 15:58:41-07	2
39782	94	test	test	foo	2019-07-08 15:58:42-07	2
39792	95	test	test	foo	2019-07-08 15:58:43-07	2
39802	96	test	test	foo	2019-07-08 15:58:44-07	2
39812	97	test	test	foo	2019-07-08 15:58:45-07	2
39822	98	test	test	foo	2019-07-08 15:58:46-07	2
39832	\N	\N	\N	\N	2019-07-08 15:58:47-07	\N
39842	0	test	test	foo	2019-07-10 15:28:27-07	2
39852	1	test	test	foo	2019-07-10 15:28:29-07	2
39862	2	test	test	foo	2019-07-10 15:28:31-07	2
39872	3	test	test	foo	2019-07-10 15:28:32-07	2
39882	4	test	test	foo	2019-07-10 15:28:34-07	2
39892	5	test	test	foo	2019-07-10 15:28:35-07	2
39902	6	test	test	foo	2019-07-10 15:28:38-07	2
39912	7	test	test	foo	2019-07-10 15:28:39-07	2
39922	8	test	test	foo	2019-07-10 15:28:41-07	2
39932	9	test	test	foo	2019-07-10 15:28:42-07	2
39942	10	test	test	foo	2019-07-10 15:28:44-07	2
39952	11	test	test	foo	2019-07-10 15:28:45-07	2
39962	12	test	test	foo	2019-07-10 15:28:47-07	2
39972	13	test	test	foo	2019-07-10 15:28:48-07	2
39982	14	test	test	foo	2019-07-10 15:28:50-07	2
39992	15	test	test	foo	2019-07-10 15:28:51-07	2
40002	16	test	test	foo	2019-07-10 15:28:53-07	2
40012	17	test	test	foo	2019-07-10 15:28:54-07	2
40022	18	test	test	foo	2019-07-10 15:28:56-07	2
40032	19	test	test	foo	2019-07-10 15:28:57-07	2
40042	20	test	test	foo	2019-07-10 15:28:59-07	2
40052	21	test	test	foo	2019-07-10 15:29:00-07	2
40062	22	test	test	foo	2019-07-10 15:29:02-07	2
40072	23	test	test	foo	2019-07-10 15:29:03-07	2
40082	24	test	test	foo	2019-07-10 15:29:05-07	2
40092	25	test	test	foo	2019-07-10 15:29:06-07	2
40102	26	test	test	foo	2019-07-10 15:29:08-07	2
40112	27	test	test	foo	2019-07-10 15:29:10-07	2
40122	28	test	test	foo	2019-07-10 15:29:11-07	2
40132	29	test	test	foo	2019-07-10 15:29:12-07	2
40142	30	test	test	foo	2019-07-10 15:29:14-07	2
40152	31	test	test	foo	2019-07-10 15:29:15-07	2
40162	32	test	test	foo	2019-07-10 15:29:17-07	2
40172	33	test	test	foo	2019-07-10 15:29:19-07	2
40182	34	test	test	foo	2019-07-10 15:29:20-07	2
40192	35	test	test	foo	2019-07-10 15:29:22-07	2
40202	36	test	test	foo	2019-07-10 15:29:24-07	2
40212	37	test	test	foo	2019-07-10 15:29:25-07	2
40222	38	test	test	foo	2019-07-10 15:29:26-07	2
40232	39	test	test	foo	2019-07-10 15:29:28-07	2
40242	40	test	test	foo	2019-07-10 15:29:29-07	2
40252	41	test	test	foo	2019-07-10 15:29:31-07	2
40262	42	test	test	foo	2019-07-10 15:29:32-07	2
40272	43	test	test	foo	2019-07-10 15:29:34-07	2
40282	44	test	test	foo	2019-07-10 15:29:35-07	2
40292	45	test	test	foo	2019-07-10 15:29:37-07	2
40302	46	test	test	foo	2019-07-10 15:29:38-07	2
40312	47	test	test	foo	2019-07-10 15:29:40-07	2
40322	48	test	test	foo	2019-07-10 15:29:42-07	2
40332	49	test	test	foo	2019-07-10 15:29:44-07	2
40342	50	test	test	foo	2019-07-10 15:29:45-07	2
40352	51	test	test	foo	2019-07-10 15:29:47-07	2
40362	52	test	test	foo	2019-07-10 15:29:48-07	2
40372	53	test	test	foo	2019-07-10 15:29:50-07	2
40382	54	test	test	foo	2019-07-10 15:29:52-07	2
40392	55	test	test	foo	2019-07-10 15:29:53-07	2
40402	56	test	test	foo	2019-07-10 15:29:55-07	2
40412	57	test	test	foo	2019-07-10 15:29:56-07	2
40422	58	test	test	foo	2019-07-10 15:29:57-07	2
40432	59	test	test	foo	2019-07-10 15:29:58-07	2
40442	60	test	test	foo	2019-07-10 15:30:00-07	2
40452	61	test	test	foo	2019-07-10 15:30:01-07	2
40462	62	test	test	foo	2019-07-10 15:30:03-07	2
40472	63	test	test	foo	2019-07-10 15:30:04-07	2
40482	64	test	test	foo	2019-07-10 15:30:06-07	2
40492	65	test	test	foo	2019-07-10 15:30:07-07	2
40502	66	test	test	foo	2019-07-10 15:30:09-07	2
40512	67	test	test	foo	2019-07-10 15:30:11-07	2
40522	68	test	test	foo	2019-07-10 15:30:13-07	2
40532	69	test	test	foo	2019-07-10 15:30:15-07	2
40542	70	test	test	foo	2019-07-10 15:30:17-07	2
40552	71	test	test	foo	2019-07-10 15:30:18-07	2
40562	72	test	test	foo	2019-07-10 15:30:19-07	2
40572	73	test	test	foo	2019-07-10 15:30:21-07	2
40582	74	test	test	foo	2019-07-10 15:30:22-07	2
40592	75	test	test	foo	2019-07-10 15:30:23-07	2
40602	76	test	test	foo	2019-07-10 15:30:25-07	2
40612	77	test	test	foo	2019-07-10 15:30:27-07	2
40622	78	test	test	foo	2019-07-10 15:30:28-07	2
40632	79	test	test	foo	2019-07-10 15:30:29-07	2
40642	80	test	test	foo	2019-07-10 15:30:32-07	2
40652	81	test	test	foo	2019-07-10 15:30:33-07	2
40662	82	test	test	foo	2019-07-10 15:30:35-07	2
40672	83	test	test	foo	2019-07-10 15:30:36-07	2
40682	84	test	test	foo	2019-07-10 15:30:38-07	2
40692	85	test	test	foo	2019-07-10 15:30:39-07	2
40702	86	test	test	foo	2019-07-10 15:30:41-07	2
40712	87	test	test	foo	2019-07-10 15:30:43-07	2
40722	88	test	test	foo	2019-07-10 15:30:44-07	2
40732	89	test	test	foo	2019-07-10 15:30:45-07	2
40742	90	test	test	foo	2019-07-10 15:30:47-07	2
40752	91	test	test	foo	2019-07-10 15:30:48-07	2
40762	92	test	test	foo	2019-07-10 15:30:49-07	2
40772	93	test	test	foo	2019-07-10 15:30:51-07	2
40782	94	test	test	foo	2019-07-10 15:30:53-07	2
40792	95	test	test	foo	2019-07-10 15:30:55-07	2
40802	96	test	test	foo	2019-07-10 15:30:56-07	2
40812	97	test	test	foo	2019-07-10 15:30:59-07	2
40822	98	test	test	foo	2019-07-10 15:31:00-07	2
40832	99	test	test	foo	2019-07-10 15:31:01-07	2
40842	100	test	test	foo	2019-07-10 15:31:04-07	2
40852	101	test	test	foo	2019-07-10 15:31:05-07	2
40862	102	test	test	foo	2019-07-10 15:31:07-07	2
40872	103	test	test	foo	2019-07-10 15:31:08-07	2
40882	104	test	test	foo	2019-07-10 15:31:09-07	2
40892	105	test	test	foo	2019-07-10 15:31:11-07	2
40902	106	test	test	foo	2019-07-10 15:31:13-07	2
40912	107	test	test	foo	2019-07-10 15:31:14-07	2
40922	108	test	test	foo	2019-07-10 15:31:15-07	2
40932	109	test	test	foo	2019-07-10 15:31:17-07	2
40942	110	test	test	foo	2019-07-10 15:31:19-07	2
40952	111	test	test	foo	2019-07-10 15:31:21-07	2
40962	112	test	test	foo	2019-07-10 15:31:22-07	2
40972	113	test	test	foo	2019-07-10 15:31:25-07	2
40982	114	test	test	foo	2019-07-10 15:31:26-07	2
40992	115	test	test	foo	2019-07-10 15:31:28-07	2
41002	116	test	test	foo	2019-07-10 15:31:29-07	2
41012	117	test	test	foo	2019-07-10 15:31:30-07	2
41022	118	test	test	foo	2019-07-10 15:31:32-07	2
41032	119	test	test	foo	2019-07-10 15:31:34-07	2
41042	120	test	test	foo	2019-07-10 15:31:36-07	2
41052	121	test	test	foo	2019-07-10 15:31:37-07	2
41062	122	test	test	foo	2019-07-10 15:31:39-07	2
41072	123	test	test	foo	2019-07-10 15:31:40-07	2
41082	124	test	test	foo	2019-07-10 15:31:42-07	2
41092	125	test	test	foo	2019-07-10 15:31:44-07	2
41102	126	test	test	foo	2019-07-10 15:31:45-07	2
41112	127	test	test	foo	2019-07-10 15:31:47-07	2
41122	128	test	test	foo	2019-07-10 15:31:48-07	2
41132	129	test	test	foo	2019-07-10 15:31:50-07	2
41142	130	test	test	foo	2019-07-10 15:31:52-07	2
41152	131	test	test	foo	2019-07-10 15:31:53-07	2
41162	132	test	test	foo	2019-07-10 15:31:54-07	2
41172	133	test	test	foo	2019-07-10 15:31:56-07	2
41182	134	test	test	foo	2019-07-10 15:31:58-07	2
41192	135	test	test	foo	2019-07-10 15:31:59-07	2
41202	136	test	test	foo	2019-07-10 15:32:01-07	2
41212	137	test	test	foo	2019-07-10 15:32:03-07	2
41222	138	test	test	foo	2019-07-10 15:32:04-07	2
41232	139	test	test	foo	2019-07-10 15:32:05-07	2
41242	140	test	test	foo	2019-07-10 15:32:07-07	2
41252	141	test	test	foo	2019-07-10 15:32:08-07	2
41262	142	test	test	foo	2019-07-10 15:32:10-07	2
41272	143	test	test	foo	2019-07-10 15:32:11-07	2
41282	144	test	test	foo	2019-07-10 15:32:13-07	2
41292	145	test	test	foo	2019-07-10 15:32:14-07	2
41302	146	test	test	foo	2019-07-10 15:32:16-07	2
41312	147	test	test	foo	2019-07-10 15:32:17-07	2
41322	148	test	test	foo	2019-07-10 15:32:19-07	2
41332	149	test	test	foo	2019-07-10 15:32:21-07	2
41342	150	test	test	foo	2019-07-10 15:32:23-07	2
41352	151	test	test	foo	2019-07-10 15:32:25-07	2
41362	152	test	test	foo	2019-07-10 15:32:26-07	2
41372	153	test	test	foo	2019-07-10 15:32:28-07	2
41382	154	test	test	foo	2019-07-10 15:32:29-07	2
41392	155	test	test	foo	2019-07-10 15:32:31-07	2
41402	156	test	test	foo	2019-07-10 15:32:32-07	2
41412	157	test	test	foo	2019-07-10 15:32:34-07	2
41422	158	test	test	foo	2019-07-10 15:32:35-07	2
41432	159	test	test	foo	2019-07-10 15:32:36-07	2
41442	160	test	test	foo	2019-07-10 15:32:39-07	2
41452	161	test	test	foo	2019-07-10 15:32:41-07	2
41462	162	test	test	foo	2019-07-10 15:32:42-07	2
41472	163	test	test	foo	2019-07-10 15:32:43-07	2
41482	164	test	test	foo	2019-07-10 15:32:45-07	2
41492	165	test	test	foo	2019-07-10 15:32:46-07	2
41502	166	test	test	foo	2019-07-10 15:32:48-07	2
41512	167	test	test	foo	2019-07-10 15:32:49-07	2
41522	168	test	test	foo	2019-07-10 15:32:51-07	2
41532	169	test	test	foo	2019-07-10 15:32:53-07	2
41542	170	test	test	foo	2019-07-10 15:32:54-07	2
41552	171	test	test	foo	2019-07-10 15:32:55-07	2
41562	172	test	test	foo	2019-07-10 15:32:57-07	2
41572	173	test	test	foo	2019-07-10 15:32:58-07	2
41582	174	test	test	foo	2019-07-10 15:32:59-07	2
41592	175	test	test	foo	2019-07-10 15:33:01-07	2
41602	176	test	test	foo	2019-07-10 15:33:02-07	2
41612	177	test	test	foo	2019-07-10 15:33:03-07	2
41622	178	test	test	foo	2019-07-10 15:33:05-07	2
41632	179	test	test	foo	2019-07-10 15:33:07-07	2
41642	180	test	test	foo	2019-07-10 15:33:08-07	2
41652	181	test	test	foo	2019-07-10 15:33:10-07	2
41662	182	test	test	foo	2019-07-10 15:33:12-07	2
41672	183	test	test	foo	2019-07-10 15:33:13-07	2
41682	184	test	test	foo	2019-07-10 15:33:16-07	2
41692	185	test	test	foo	2019-07-10 15:33:17-07	2
41702	186	test	test	foo	2019-07-10 15:33:19-07	2
41712	187	test	test	foo	2019-07-10 15:33:21-07	2
41722	188	test	test	foo	2019-07-10 15:33:22-07	2
41732	189	test	test	foo	2019-07-10 15:33:24-07	2
41742	190	test	test	foo	2019-07-10 15:33:25-07	2
41752	191	test	test	foo	2019-07-10 15:33:27-07	2
41762	192	test	test	foo	2019-07-10 15:33:28-07	2
41772	193	test	test	foo	2019-07-10 15:33:29-07	2
41782	194	test	test	foo	2019-07-10 15:33:31-07	2
41792	195	test	test	foo	2019-07-10 15:33:33-07	2
41802	196	test	test	foo	2019-07-10 15:33:35-07	2
41812	197	test	test	foo	2019-07-10 15:33:36-07	2
41822	198	test	test	foo	2019-07-10 15:33:37-07	2
41832	199	test	test	foo	2019-07-10 15:33:39-07	2
41842	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-10 19:31:04-07	2
41852	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 00:54:54-07	2
41862	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 00:55:00-07	2
41872	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 00:57:35-07	2
41882	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 00:58:04-07	2
41892	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 00:59:00-07	2
41902	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 00:59:25-07	2
41912	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:07:22-07	2
41922	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:43:33-07	2
41932	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:44:34-07	2
41942	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = x + 1\\n"}	2019-07-11 01:44:44-07	2
41952	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:44:58-07	2
41962	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:45:10-07	2
41972	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:45:31-07	2
41982	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:48:41-07	2
50202	coding	19s_algo_study/fizz_buzz	load		2019-07-23 16:26:21-07	562
41992	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:48:58-07	2
42002	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:49:37-07	2
42012	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:49:49-07	2
42022	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:50:09-07	2
42032	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:50:16-07	2
42042	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return x\\n"}	2019-07-11 01:50:25-07	2
42052	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:50:34-07	2
42062	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 01:50:57-07	2
42072	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 02:00:05-07	2
42082	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 02:00:12-07	2
42092	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 02:00:24-07	2
42102	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 02:01:00-07	2
42112	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 02:05:47-07	2
42122	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 02:06:19-07	2
42132	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 02:06:33-07	2
42142	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 18:33:24-07	12
42152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 18:34:23-07	12
42162	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 18:34:48-07	12
42172	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 18:36:17-07	12
42182	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 18:36:27-07	12
42192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 18:52:05-07	12
42202	multi	19s_algo_study/pre_test_comp	load		2019-07-11 18:57:47-07	2
42212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 18:57:54-07	2
42222	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:04:22-07	2
42232	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:05:19-07	2
42242	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:05:36-07	2
42252	parsons	19s_algo_study/binary_search_1	unload	{"code":""}	2019-07-11 19:06:14-07	2
42262	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:06:21-07	2
42272	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:07:15-07	2
42282	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:07:54-07	2
42292	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  elif arr[mid] < target:\\n  high = mid - 1\\n  mid = (low+high) // 2\\n"}	2019-07-11 19:10:17-07	2
42302	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:10:23-07	2
42312	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:10:51-07	2
42322	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:13:37-07	2
42332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:13:58-07	2
42342	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:14:37-07	2
42352	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:21:09-07	2
42362	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:21:40-07	2
42372	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:22:02-07	2
42382	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:03-07	2
42392	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n"}	2019-07-11 19:22:28-07	2
42402	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:29-07	2
42412	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:29-07	2
42422	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n"}	2019-07-11 19:22:36-07	2
42432	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:37-07	2
42442	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:38-07	2
42452	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n"}	2019-07-11 19:22:40-07	2
42462	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:41-07	2
42472	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:42-07	2
42482	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:22:49-07	2
42492	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:22:50-07	2
42502	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:23:38-07	2
42512	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-11 19:23:49-07	2
42522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:25:59-07	2
42532	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n  low = mid + 1\\n"}	2019-07-11 19:26:18-07	2
42542	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:26:19-07	2
42552	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:26:31-07	2
42562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:27:15-07	2
42572	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:27:38-07	2
42582	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:49:12-07	2
42592	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:49:35-07	2
42602	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:49:46-07	2
42612	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:49:58-07	2
42622	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:50:13-07	2
42632	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:50:21-07	2
42642	solution	19s_algo_study/binary_search_1	load		2019-07-11 19:50:48-07	2
42652	solution	19s_algo_study/binary_search_1	move_on		2019-07-11 19:51:43-07	2
42662	coding	19s_algo_study/dfs_all_paths	load		2019-07-11 19:51:44-07	2
42672	coding	19s_algo_study/dfs_all_paths	load		2019-07-11 19:52:12-07	2
42682	coding	19s_algo_study/dfs_all_paths	load		2019-07-11 19:52:26-07	2
42692	coding	19s_algo_study/dfs_all_paths	unload	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-07-11 19:52:32-07	2
42702	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:53:06-07	2
42712	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:53:16-07	2
42722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:53:30-07	2
42732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:55:28-07	2
42742	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:56:58-07	2
42752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:57:12-07	2
42762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 19:57:32-07	2
42772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:00:03-07	2
42782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:00:38-07	2
42792	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:02:44-07	2
42802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:02:47-07	2
42812	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:03:22-07	2
42822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:04:38-07	2
42832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:04:53-07	2
42842	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:08:01-07	2
42852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:08:09-07	2
42862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:08:15-07	2
42872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:08:27-07	2
42882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:09:11-07	2
42892	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:09:19-07	2
42902	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:10:02-07	2
42912	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:11:02-07	2
42922	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:11:24-07	2
42932	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:13:43-07	2
42942	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:14:36-07	2
42952	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:14:51-07	2
42962	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:15:28-07	2
42972	solution	19s_algo_study/binary_search_1	load		2019-07-11 20:15:29-07	2
42982	solution	19s_algo_study/binary_search_1	load		2019-07-11 20:15:41-07	2
42992	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:16:38-07	2
43002	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:17:19-07	2
43012	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:18:08-07	2
43022	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:19:17-07	2
43032	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:20:02-07	2
43042	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:20:26-07	2
43052	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:20:41-07	2
43062	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:21:31-07	2
43072	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:21:52-07	2
43082	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:22:34-07	2
43092	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:22:45-07	2
43102	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:22:51-07	2
43112	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:23:04-07	2
43122	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:23:33-07	2
43132	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 20:24:19-07	2
43142	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 20:24:58-07	2
43152	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 20:25:30-07	2
43162	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 20:26:03-07	2
43172	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 20:26:19-07	2
43182	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 20:28:34-07	2
43192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:29:33-07	2
43202	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 20:30:25-07	2
43212	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 21:09:40-07	2
43222	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 21:09:44-07	2
43232	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 21:09:52-07	2
43242	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return x\\n"}	2019-07-11 21:10:21-07	2
43252	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 21:10:45-07	2
43262	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-11 21:10:46-07	2
43272	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:15:22-07	2
43282	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:15:35-07	2
43292	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:15:37-07	2
43302	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:15:45-07	2
43312	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:16:19-07	2
43322	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:16:21-07	2
43332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:16:22-07	2
43342	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n  if arr[mid] > target:\\n  low = mid + 1\\n  return mid\\n"}	2019-07-11 21:16:37-07	2
43352	coding	19s_algo_study/binary_search_1	load		2019-07-11 21:18:28-07	2
43362	coding	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n  if arr[mid] > target:\\n  low = mid + 1\\n  return mid\\n  asdfsdaf"}	2019-07-11 21:18:39-07	2
43372	coding	19s_algo_study/binary_search_1	load		2019-07-11 21:18:40-07	2
43382	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:21:22-07	2
43392	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:21:23-07	2
43402	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:21:24-07	2
43412	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:21:30-07	2
43422	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:21:32-07	2
43432	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 21:21:34-07	2
43442	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:28:41-07	12
43452	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:28:42-07	12
43462	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:31:57-07	12
43472	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:32:38-07	12
43482	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:33:48-07	12
43492	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:34:03-07	12
43502	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:35:00-07	12
43512	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-11 23:35:11-07	12
43522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:00:32-07	12
43532	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:00:42-07	12
43542	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:02:27-07	12
43552	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:02:28-07	12
43562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:02:41-07	12
43572	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:04:42-07	12
43582	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:46:13-07	12
43592	multi	19s_algo_study/pre_test_comp	load		2019-07-12 00:46:13-07	12
43602	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:48:36-07	12
43612	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:50:05-07	12
43622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:50:06-07	12
43632	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:50:22-07	12
43642	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:50:35-07	12
50212	coding	19s_algo_study/fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n"}	2019-07-23 16:26:29-07	562
43652	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:54:31-07	12
43662	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:54:33-07	12
43672	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:54:41-07	12
43682	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:55:09-07	12
43692	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:55:19-07	12
43702	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 00:55:31-07	12
43712	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 20:39:44-07	12
43722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:11:59-07	12
43732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:20:22-07	12
43742	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:20:35-07	12
43752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:20:35-07	12
43762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:21:32-07	12
43772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:44:20-07	12
43782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:44:29-07	12
43792	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:46:09-07	12
43802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:46:22-07	12
43812	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:49:12-07	12
43822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:49:22-07	12
43832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:51:16-07	12
43842	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:51:30-07	12
43852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:54:26-07	12
43862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:54:38-07	12
43872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:59:17-07	12
43882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 22:59:26-07	12
43892	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:01:57-07	12
43902	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:02:08-07	12
43912	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:09:37-07	12
43922	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:09:55-07	12
43932	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:13:56-07	12
43942	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:14:06-07	12
43952	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:17:48-07	12
43962	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:18:03-07	12
43972	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:19:24-07	12
43982	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:19:31-07	12
43992	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:21:07-07	12
44002	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:21:24-07	12
44012	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:22:05-07	12
44022	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:22:12-07	12
44032	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:23:20-07	12
44042	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-12 23:23:26-07	12
44052	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-13 20:55:35-07	2
44062	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-13 21:20:13-07	2
44072	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-13 21:20:15-07	2
44082	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:29:51-07	12
44092	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:32:38-07	12
44102	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:34:56-07	12
44112	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:35:11-07	12
44122	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:36:24-07	12
44132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:36:26-07	12
44142	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:36:35-07	12
44152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:46:57-07	12
44162	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:47:05-07	12
44172	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 18:48:43-07	12
44182	parsons	19s_algo_study/binary_search_1	load	{"code":""}	2019-07-15 20:02:31-07	12
50222	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-07-23 16:26:29-07	562
44192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 20:04:03-07	12
44202	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n"}	2019-07-15 20:04:11-07	12
44212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n    low = 0\\n"}	2019-07-15 20:04:27-07	12
44222	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n    low = 0\\n  return mid\\n"}	2019-07-15 20:04:35-07	12
44232	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n    low = 0\\n  return mid\\n"}	2019-07-15 20:04:43-07	12
44242	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n    low = 0\\n  return mid\\n"}	2019-07-15 21:15:32-07	12
44252	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n    low = 0\\n"}	2019-07-15 21:16:07-07	12
44262	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n  low = 0\\n  return mid\\n"}	2019-07-15 21:16:17-07	12
44272	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-15 21:16:48-07	12
44282	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  if arr[mid] > target:\\n"}	2019-07-15 21:18:58-07	12
44292	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  if arr[mid] > target:\\n"}	2019-07-15 21:19:24-07	12
44302	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  if arr[mid] > target:\\n"}	2019-07-15 21:19:39-07	12
44312	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  if arr[mid] > target:\\n"}	2019-07-15 21:22:39-07	12
44322	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  if arr[mid] > target:\\n"}	2019-07-15 21:23:34-07	2
44332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-16 00:13:50-07	2
44342	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  low = 0\\n  return -1\\n"}	2019-07-16 00:13:58-07	2
44352	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  low = 0\\n  return -1\\n"}	2019-07-16 00:14:13-07	2
44362	parsons	19s_algo_study/binary_search_1	load	{"code":"  low = 0\\ndef binary_search(target, arr):\\n  return -1\\n"}	2019-07-16 00:15:11-07	2
44372	parsons	19s_algo_study/binary_search_1	load	{"code":"  low = 0\\n  return -1\\n    def binary_search(target, arr):\\n"}	2019-07-16 00:15:17-07	2
44382	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-16 02:25:16-07	2
44392	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n"}	2019-07-16 02:29:55-07	2
44402	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  print()\\n# \\n  return x\\n"}	2019-07-16 02:33:27-07	2
44412	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  if arr[mid] > target:\\n"}	2019-07-16 18:34:28-07	12
44422	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  if arr[mid] > target:\\n"}	2019-07-16 18:34:36-07	12
44432	solution	19s_algo_study/binary_search_1	load		2019-07-16 18:34:36-07	12
44442	solution	19s_algo_study/binary_search_1	move_on		2019-07-16 18:34:44-07	12
44452	coding	19s_algo_study/dfs_all_paths	load		2019-07-16 18:34:45-07	12
44462	coding	19s_algo_study/dfs_all_paths	move_on	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-07-16 18:34:50-07	12
44472	solution	19s_algo_study/dfs_all_paths	load		2019-07-16 18:34:50-07	12
44482	solution	19s_algo_study/dfs_all_paths	move_on		2019-07-16 18:34:52-07	12
44492	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-16 18:40:43-07	12
44502	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  low = 0\\n  return -1\\n"}	2019-07-16 18:40:55-07	12
44512	solution	19s_algo_study/binary_search_1	load		2019-07-16 18:40:56-07	12
44522	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-16 19:29:47-07	2
44532	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-16 19:30:01-07	2
44542	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-16 19:30:03-07	2
44552	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return x\\n  x = 2\\n"}	2019-07-16 19:30:06-07	2
44562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-16 21:39:44-07	2
44572	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-16 21:39:50-07	2
44582	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nelse:\\n"}	2019-07-16 21:40:01-07	2
44592	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nelse:\\n"}	2019-07-16 21:40:07-07	2
44602	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-07-16 21:42:02-07	2
44612	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\ndef visit(node):\\n"}	2019-07-16 21:42:29-07	2
44622	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  node.setEnter()\\ndef visit(node):\\n  visit(node)\\n"}	2019-07-16 21:42:49-07	2
44632	parsons	19s_algo_study/dfs_impl	load	{"code":"  node.setEnter()\\ndef visit(node):\\n  visit(node)\\n"}	2019-07-16 21:42:56-07	2
44642	parsons	19s_algo_study/dfs_impl	load	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-07-16 21:43:12-07	2
44652	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nelse:\\n"}	2019-07-16 23:17:14-07	2
44662	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-07-16 23:17:23-07	2
44672	parsons	19s_algo_study/binary_search_1	load	{"code":"  low = 0\\ndef binary_search(target, arr):\\n"}	2019-07-16 23:17:27-07	2
44682	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-16 23:17:33-07	2
44692	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-16 23:17:35-07	2
44702	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-17 18:04:04-07	12
44712	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-07-17 18:04:41-07	12
44722	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-17 18:05:28-07	232
44732	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return x\\n  x = 2\\n"}	2019-07-17 18:06:08-07	2
44742	multi	19s_algo_study/pre_test_comp	load		2019-07-17 18:06:24-07	2
44752	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-17 18:19:52-07	242
44762	parsons	19s_early_pilots/dfs_impl_3	load	{"code":"def dfs(graph):\\n  for node in graph:\\n    if not node.getExit():\\n      visit(node)\\ndef visit(node):\\n  node.setEnter()\\n  for neighbor in node.getNeighbors():\\n    if neighbor.getEnter():\\n      continue\\n    visit(neighbor)\\n  node.setExit()\\n"}	2019-07-17 18:50:28-07	242
44772	parsons	19s_algo_study/fizz_buzz_comprehension	submit	2	2019-07-17 18:54:37-07	2
44782	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-17 20:30:24-07	2
44792	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-17 20:30:39-07	2
44802	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-18 17:17:29-07	2
44812	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-18 17:17:43-07	2
44822	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-18 17:18:05-07	2
44832	parsons	19s_algo_study/fizz_buzz	load	{"code":"def fizz_buzz(n):\\n"}	2019-07-18 17:18:06-07	2
44842	parsons	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      print('processing', i)\\n      result.append(\\"fizzbuzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-18 17:20:46-07	2
44852	parsons	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      print('processing', i)\\n      result.append(\\"fizzbuzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-18 17:21:30-07	2
44862	parsons	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      print('fizzbuzz:', i)\\n      result.append(\\"fizzbuzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-18 17:21:45-07	2
44872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  low = 0\\n  return -1\\n"}	2019-07-18 17:53:21-07	12
44882	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-18 17:55:24-07	252
44892	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-07-18 17:57:46-07	252
44902	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALparsons-solutioncodeline20 #blank\\n  # graph is a list of Nodes#!ORIGINALparsons-solutioncodeline21 #blank\\n"}	2019-07-18 18:23:40-07	232
44912	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALparsons-solutioncodeline20 #blank\\n  # graph is a list of Nodes#!ORIGINALparsons-solutioncodeline21 #blank\\n"}	2019-07-18 18:26:25-07	282
44922	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL0 #blank\\n  # graph is a list of Nodes#!ORIGINAL1 #blankundefined\\n"}	2019-07-18 18:30:56-07	292
44932	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):#!ORIGINAL0 #blankgraphs\\n  # graph is a list of Nodes#!ORIGINAL1 #blankundefined\\n"}	2019-07-18 18:33:04-07	292
44942	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL[object HTMLInputElement] #blank\\n  # graph is a list of Nodes#!ORIGINALundefined #blankundefined\\n"}	2019-07-18 18:33:19-07	302
44952	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(nodes):#!ORIGINAL[object HTMLInputElement] #blanknodes\\n  # graph is a list of Nodes#!ORIGINALundefined #blankundefined\\n"}	2019-07-18 19:26:01-07	302
44962	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #0given #blank\\n  # graph is a list of Nodes#!ORIGINAL# graph is a list of Nodes #1given #blankundefined\\n"}	2019-07-18 19:26:20-07	312
44972	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()#!ORIGINALdef dfs(!BLANK): #0given #blanknode\\ncontinue#!ORIGINAL# graph is a list of Nodes #1given #blankundefined\\n"}	2019-07-18 19:33:42-07	312
44982	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #0given,# graph is a list of Nodes #1given,for !BLANK in !BLANK:,if not !BLANK.getExit():,visit(!BLANK),,def visit(!BLANK):,!BLANK.setEnter(),for !BLANK in !BLANK.getNeighbors():,if !BLANK.getEnter():,continue,visit(!BLANK),!BLANK.setExit(),,print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),# !BLANK,# !BLANK,# !BLANK,# !BLANK,# !BLANK,[object HTMLInputElement] #blank\\n  # graph is a list of Nodes#!ORIGINALdef dfs(!BLANK): #0given,# graph is a list of Nodes #1given,for !BLANK in !BLANK:,if not !BLANK.getExit():,visit(!BLANK),,def visit(!BLANK):,!BLANK.setEnter(),for !BLANK in !BLANK.getNeighbors():,if !BLANK.getEnter():,continue,visit(!BLANK),!BLANK.setExit(),,print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),# !BLANK,# !BLANK,# !BLANK,# !BLANK,# !BLANK,[object HTMLInputElement] #blankundefined\\n"}	2019-07-18 19:34:16-07	322
44992	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(test):#!ORIGINALdef dfs(!BLANK): #0given,# graph is a list of Nodes #1given,for !BLANK in !BLANK:,if not !BLANK.getExit():,visit(!BLANK),,def visit(!BLANK):,!BLANK.setEnter(),for !BLANK in !BLANK.getNeighbors():,if !BLANK.getEnter():,continue,visit(!BLANK),!BLANK.setExit(),,print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),# !BLANK,# !BLANK,# !BLANK,# !BLANK,# !BLANK,[object HTMLInputElement] #blanktest\\n  # graph is a list of Nodes#!ORIGINALdef dfs(!BLANK): #0given,# graph is a list of Nodes #1given,for !BLANK in !BLANK:,if not !BLANK.getExit():,visit(!BLANK),,def visit(!BLANK):,!BLANK.setEnter(),for !BLANK in !BLANK.getNeighbors():,if !BLANK.getEnter():,continue,visit(!BLANK),!BLANK.setExit(),,print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),print(!BLANK),# !BLANK,# !BLANK,# !BLANK,# !BLANK,# !BLANK,[object HTMLInputElement] #blankundefined\\n"}	2019-07-18 19:34:56-07	322
45002	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-18 20:33:47-07	2
45012	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):\\n  # graph is a list of Nodes\\n"}	2019-07-18 20:34:36-07	2
51542	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 18:35:52-07	582
45022	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-18 20:34:37-07	2
45032	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(/!BLANK/):\\n  # graph is a list of Nodes#!ORIGINALundefined\\n"}	2019-07-18 21:01:50-07	342
45042	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(test):#!ORIGINALdef dfs(/!BLANK/):\\n  # graph is a list of Nodes#!ORIGINALundefined\\n"}	2019-07-18 21:29:54-07	342
45052	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL# graph is a list of Nodes\\n"}	2019-07-18 21:31:47-07	362
45062	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-18 21:33:23-07	2
45072	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(test):#!ORIGINALdef dfs(!BLANK): #blanktest\\n  # graph is a list of Nodes#!ORIGINAL# graph is a list of Nodes\\n"}	2019-07-18 21:34:15-07	362
45082	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():def dfs(!BLANK): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 21:34:27-07	372
45092	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):def dfs(!BLANK): #!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 21:35:15-07	372
45102	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 21:36:20-07	382
45112	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 21:36:32-07	382
45122	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 21:41:41-07	382
45132	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-18 21:44:38-07	402
45142	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(test):\\n  # graph is a list of Nodes\\n"}	2019-07-18 21:48:26-07	402
45152	coding	19sum_blank_pilots/mario_1	load		2019-07-18 23:39:33-07	2
45162	coding	19sum_blank_pilots/mario_1	results	<div class="testcase error"><span class="msg">Calling function <code>mario(1, 1, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">mario() takes 1 positional argument but 3 were given, line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>mario(1, 0, 1, 0, 1, 0, 1, 0, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">mario() takes 1 positional argument but 9 were given, line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>mario(1, 0, 1, 0, 1, 0, 1, 0, 0, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">mario() takes 1 positional argument but 10 were given, line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>mario(1, 1, 1, 1, 1, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">mario() takes 1 positional argument but 6 were given, line 95</span><br /></div>	2019-07-18 23:41:40-07	2
45172	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(map):\\n    if len(map) < 1:\\n      return int(map == [1])\\n    if map[0] == 0:\\n      return 0\\n    return mario(map[1:]) + mario(map[2:])\\n"}	2019-07-18 23:42:00-07	2
45182	coding	19sum_blank_pilots/mario_1	results	<div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>0</code></span> <br /></div>	2019-07-18 23:42:01-07	2
45192	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(map):\\n    print(map)\\n    if len(map) < 1:\\n      return int(map == [1])\\n    if map[0] == 0:\\n      return 0\\n    return mario(map[1:]) + mario(map[2:])\\n"}	2019-07-18 23:42:24-07	2
45202	coding	19sum_blank_pilots/mario_1	results	<div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1]\n[1, 1]\n[1]\n[]\n[]\n[]\n[1]\n[]\n[]\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 1]\n[0, 1, 0, 1, 0, 1, 0, 1]\n[1, 0, 1, 0, 1, 0, 1]\n[0, 1, 0, 1, 0, 1]\n[1, 0, 1, 0, 1]\n[0, 1, 0, 1]\n[1, 0, 1]\n[0, 1]\n[1]\n[]\n[]\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 0, 1]\n[0, 1, 0, 1, 0, 1, 0, 0, 1]\n[1, 0, 1, 0, 1, 0, 0, 1]\n[0, 1, 0, 1, 0, 0, 1]\n[1, 0, 1, 0, 0, 1]\n[0, 1, 0, 0, 1]\n[1, 0, 0, 1]\n[0, 0, 1]\n[0, 1]\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1]\n[1, 1]\n[1]\n[]\n[]\n[]\n[1]\n[]\n[]\n[1, 1]\n[1]\n[]\n[]\n[]\n[1, 1, 1]\n[1, 1]\n[1]\n...\n[]\n[1]\n[]\n[]\n[1, 1]\n[1]\n[]\n[]\n[]\n</pre></span></div>	2019-07-18 23:42:25-07	2
45212	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(map):\\n    print(map, map == [1])\\n    if len(map) < 1:\\n      return int(map == [1])\\n    if map[0] == 0:\\n      return 0\\n    return mario(map[1:]) + mario(map[2:])\\n"}	2019-07-18 23:42:34-07	2
45222	coding	19sum_blank_pilots/mario_1	results	<div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1] False\n[1, 1] False\n[1] True\n[] False\n[] False\n[] False\n[1] True\n[] False\n[] False\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 1] False\n[0, 1, 0, 1, 0, 1, 0, 1] False\n[1, 0, 1, 0, 1, 0, 1] False\n[0, 1, 0, 1, 0, 1] False\n[1, 0, 1, 0, 1] False\n[0, 1, 0, 1] False\n[1, 0, 1] False\n[0, 1] False\n[1] True\n[] False\n[] False\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 0, 1] False\n[0, 1, 0, 1, 0, 1, 0, 0, 1] False\n[1, 0, 1, 0, 1, 0, 0, 1] False\n[0, 1, 0, 1, 0, 0, 1] False\n[1, 0, 1, 0, 0, 1] False\n[0, 1, 0, 0, 1] False\n[1, 0, 0, 1] False\n[0, 0, 1] False\n[0, 1] False\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1, 1, 1, 1] False\n[1, 1, 1, 1, 1] False\n[1, 1, 1, 1] False\n[1, 1, 1] False\n[1, 1] False\n[1] True\n[] False\n[] False\n[] False\n[1] True\n[] False\n[] False\n[1, 1] False\n[1] True\n[] False\n[] False\n[] False\n[1, 1, 1] False\n[1, 1] False\n[1] True\n...\n[] False\n[1] True\n[] False\n[] False\n[1, 1] False\n[1] True\n[] False\n[] False\n[] False\n</pre></span></div>	2019-07-18 23:42:35-07	2
45232	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(map):\\n    print(map, int(map == [1]))\\n    if len(map) < 1:\\n      return int(map == [1])\\n    if map[0] == 0:\\n      return 0\\n    return mario(map[1:]) + mario(map[2:])\\n"}	2019-07-18 23:42:42-07	2
45242	coding	19sum_blank_pilots/mario_1	results	<div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[] 0\n[1] 1\n[] 0\n[] 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 1] 0\n[0, 1, 0, 1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1] 0\n[0, 1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1] 0\n[0, 1, 0, 1] 0\n[1, 0, 1] 0\n[0, 1] 0\n[1] 1\n[] 0\n[] 0\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 0, 1] 0\n[0, 1, 0, 1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 0, 1] 0\n[0, 1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 0, 1] 0\n[0, 1, 0, 0, 1] 0\n[1, 0, 0, 1] 0\n[0, 0, 1] 0\n[0, 1] 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1, 1, 1, 1] 0\n[1, 1, 1, 1, 1] 0\n[1, 1, 1, 1] 0\n[1, 1, 1] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[] 0\n[1] 1\n[] 0\n[] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[] 0\n[1, 1, 1] 0\n[1, 1] 0\n[1] 1\n...\n[] 0\n[1] 1\n[] 0\n[] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[] 0\n</pre></span></div>	2019-07-18 23:42:44-07	2
45252	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(map):\\n    print(map, int(map == [1]))\\n    if len(map) < 1:\\n      return int(map == [1])\\n    if map[0] == 0:\\n      return 0\\n    x = mario(map[1:]) + mario(map[2:])\\n    print(map, x)\\n    return x\\n"}	2019-07-18 23:43:18-07	2
45262	coding	19sum_blank_pilots/mario_1	results	<div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[1] 0\n[] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[1] 0\n[1, 1, 1] 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 1] 0\n[0, 1, 0, 1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1] 0\n[0, 1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1] 0\n[0, 1, 0, 1] 0\n[1, 0, 1] 0\n[0, 1] 0\n[1] 1\n[] 0\n[] 0\n[1] 0\n[1, 0, 1] 0\n[1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1, 0, 1] 0\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 1, 0, 1, 0, 1, 0, 0, 1] 0\n[0, 1, 0, 1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 0, 1] 0\n[0, 1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 0, 1] 0\n[0, 1, 0, 0, 1] 0\n[1, 0, 0, 1] 0\n[0, 0, 1] 0\n[0, 1] 0\n[1, 0, 0, 1] 0\n[1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1, 0, 0, 1] 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 1, 1, 1, 1, 1] 0\n[1, 1, 1, 1, 1] 0\n[1, 1, 1, 1] 0\n[1, 1, 1] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[1] 0\n[] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[1] 0\n[1, 1, 1] 0\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n...\n[1, 1] 0\n[1] 1\n[] 0\n[] 0\n[1] 0\n[] 0\n[1, 1] 0\n[1, 1, 1, 1] 0\n[1, 1, 1, 1, 1, 1] 0\n</pre></span></div>	2019-07-18 23:43:19-07	2
45272	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(map):\\n    # print(map, int(map == [1]))\\n    if len(map) < 1:\\n      return int(map == [1])\\n    if map[0] == 0:\\n      return 0\\n    x = mario(map[1:]) + mario(map[2:])\\n    print(map, x)\\n    return x\\n"}	2019-07-18 23:43:27-07	2
45282	coding	19sum_blank_pilots/mario_1	results	<div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1] 0\n[1, 1] 0\n[1] 0\n[1, 1, 1] 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1] 0\n[1, 0, 1] 0\n[1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1, 0, 1] 0\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1, 0, 0, 1] 0\n[1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 0, 1] 0\n[1, 0, 1, 0, 1, 0, 1, 0, 0, 1] 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>[1] 0\n[1, 1] 0\n[1] 0\n[1, 1, 1] 0\n[1] 0\n[1, 1] 0\n[1, 1, 1, 1] 0\n[1] 0\n[1, 1] 0\n[1] 0\n[1, 1, 1] 0\n[1, 1, 1, 1, 1] 0\n[1] 0\n[1, 1] 0\n[1] 0\n[1, 1, 1] 0\n[1] 0\n[1, 1] 0\n[1, 1, 1, 1] 0\n[1, 1, 1, 1, 1, 1] 0\n</pre></span></div>	2019-07-18 23:43:28-07	2
45292	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:43:51-07	2
45302	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:43:51-07	2
45312	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:46:33-07	2
45322	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:46:36-07	2
45402	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:47:29-07	2
45902	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 00:29:17-07	42
45332	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:46:37-07	2
45342	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:46:57-07	2
45352	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:46:58-07	2
45362	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:47:00-07	2
45372	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>6</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:47:01-07	2
45382	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:47:22-07	2
45392	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>6</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:47:23-07	2
45412	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>27</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:47:30-07	2
45422	coding	19sum_blank_pilots/mario_1	submit	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:47:40-07	2
45432	coding	19sum_blank_pilots/mario_1	results	<div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 0, 1, 0, 1, 0, 1, 0, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1])</code>.</span><br /><span class="msg">Expected result to be <code>27</code> , your code returned <code>27</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>mario([1, 1, 1, 1, 1, 1])</code>.</span><br /><span class="msg">Expected result to be <code>8</code> , your code returned <code>8</code></span> <br /></div>	2019-07-18 23:47:41-07	2
45442	coding	19sum_blank_pilots/mario_1	unload	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-18 23:48:12-07	2
45452	coding	19sum_blank_pilots/mario_1	load		2019-07-18 23:48:17-07	2
45462	parsons	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      print('fizzbuzz:', i)\\n      result.append(\\"fizzbuzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-18 23:48:36-07	2
45472	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 23:50:33-07	432
45482	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs): #!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 23:55:56-07	432
45492	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-18 23:56:34-07	442
45502	coding	19sum_blank_pilots/maze_paths	load		2019-07-18 23:59:42-07	2
45512	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def paths(m, n):\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:00:07-07	2
45522	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase pass"><span class="msg">Calling function <code>paths(2, 2)</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(3, 3)</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(1, 1000)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(1000, 1)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(5, 2)</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(5, 3)</code>.</span><br /><span class="msg">Expected result to be <code>15</code> , your code returned <code>15</code></span> <br /></div>	2019-07-19 00:00:07-07	2
45532	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">invalid syntax (<string>, line 7)</span><br /></div>	2019-07-19 00:01:52-07	2
45542	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return paths(x+1, y, m, n) + paths(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:01:57-07	2
45832	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for test in bar.getNeighbors():#!ORIGINAL: for !BLANK in .getNeighbors(): #blanktest #blankbar\\n"}	2019-07-19 00:27:02-07	462
45552	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">Calling function <code>helper(2, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(3, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1, 1000)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1000, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div>	2019-07-19 00:01:58-07	2
45562	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return helper(x+1, y, m, n) + helper(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:02:08-07	2
45572	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">Calling function <code>helper(2, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(3, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1, 1000)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1000, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div>	2019-07-19 00:02:09-07	2
45582	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return helper(x+1, y, m, n) + helper(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:02:30-07	2
45592	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">Calling function <code>helper(2, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(3, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1, 1000)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1000, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div>	2019-07-19 00:02:31-07	2
45602	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return helper(x+1, y, m, n) + helper(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:02:38-07	2
45842	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for test in bar.getNeighbors():#!ORIGINAL: for !BLANK in .getNeighbors(): #blanktest #blankbar\\n"}	2019-07-19 00:27:29-07	462
45852	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL: def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:27:30-07	462
45862	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(test):#!ORIGINAL: def dfs(!BLANK): #blanktest\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:27:35-07	462
45872	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL: def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:27:52-07	462
45882	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL: def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:28:02-07	462
45892	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL: def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:28:46-07	462
50232	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-23 16:26:30-07	562
45612	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">Calling function <code>helper(2, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(3, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1, 1000)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(1000, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>helper(5, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() missing 2 required positional arguments: 'm' and 'n', line 95</span><br /></div>	2019-07-19 00:02:38-07	2
45622	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return helper(x+1, y, m, n) + helper(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:03:55-07	2
45632	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">must be str, not NoneType</span></div>	2019-07-19 00:03:55-07	2
45642	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs): #!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes# graph is a list of Nodes\\n  for neighbor in node.getNeighbors(): #!ORIGINAL #!ORIGINALfor !BLANK in .getNeighbors(): #blankneighbor #blanknode\\n"}	2019-07-19 00:03:58-07	442
45652	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return helper(x+1, y, m, n) + helper(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:03:59-07	2
45662	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">must be str, not NoneType</span></div>	2019-07-19 00:04:00-07	2
45672	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return helper(x+1, y, m, n) + helper(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:04:01-07	2
45682	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">must be str, not NoneType</span></div>	2019-07-19 00:04:01-07	2
45692	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def helper(x, y, m, n):\\n    if x == m-1 or y == n-1:\\n        return 1\\n    return helper(x+1, y, m, n) + helper(x, y+1, m, n)\\n\\ndef paths(m, n):\\n    return helper(0, 0, m, n)\\n    if m == 1 or n == 1:\\n        return 1\\n    return paths(m-1, n) + paths(m, n-1)"}	2019-07-19 00:04:03-07	2
45702	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase pass"><span class="msg">Calling function <code>paths(2, 2)</code>.</span><br /><span class="msg">Expected result to be <code>2</code> , your code returned <code>2</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(3, 3)</code>.</span><br /><span class="msg">Expected result to be <code>6</code> , your code returned <code>6</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(1, 1000)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(1000, 1)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(5, 2)</code>.</span><br /><span class="msg">Expected result to be <code>5</code> , your code returned <code>5</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>paths(5, 3)</code>.</span><br /><span class="msg">Expected result to be <code>15</code> , your code returned <code>15</code></span> <br /></div>	2019-07-19 00:04:04-07	2
45712	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():def dfs(!BLANK): #blank\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-19 00:04:16-07	452
45722	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def paths(m,n):"}	2019-07-19 00:04:34-07	2
45732	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">expected an indented block (<string>, line 2)</span><br /></div>	2019-07-19 00:04:35-07	2
45742	coding	19sum_blank_pilots/maze_paths	unload	{"code":"def paths(m,n):"}	2019-07-19 00:04:35-07	2
45752	coding	19sum_blank_pilots/maze_paths	load		2019-07-19 00:04:37-07	2
45762	coding	19sum_blank_pilots/maze_paths	submit	{"code":"def paths(m, n):"}	2019-07-19 00:04:38-07	2
45772	coding	19sum_blank_pilots/maze_paths	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">expected an indented block (<string>, line 2)</span><br /></div>	2019-07-19 00:04:39-07	2
45782	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors():for !BLANK in .getNeighbors(): #blankneighbor #blanknode\\n"}	2019-07-19 00:18:55-07	452
45792	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL: def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:19:21-07	462
45802	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors():#!ORIGINAL: for !BLANK in .getNeighbors(): #blankneighbor #blanknode\\n"}	2019-07-19 00:20:06-07	462
45812	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL: def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:25:40-07	462
45822	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL: def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL: # graph is a list of Nodes\\n"}	2019-07-19 00:26:48-07	462
50242	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[]	2019-07-23 16:26:30-07	562
45912	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 00:32:20-07	42
45922	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for test in bar.getNeighbors():#!ORIGINAL:for !BLANK in .getNeighbors(): #blanktest #blankbar\\n"}	2019-07-19 00:32:38-07	42
45932	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 00:32:40-07	42
45942	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in .getNeighbors(): #blankfoo #blankbar\\n"}	2019-07-19 00:33:34-07	42
45952	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK):\\n  # graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 00:33:35-07	42
45962	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK):\\n  # graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 00:34:51-07	42
45972	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n  # graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 00:36:51-07	42
45982	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-19 00:41:38-07	2
45992	multi	19s_algo_study/pre_test_comp	load		2019-07-19 17:54:10-07	2
46002	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 17:54:24-07	42
46012	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 17:58:56-07	42
46022	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\nfor foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n"}	2019-07-19 18:00:13-07	42
46032	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:00:13-07	42
46042	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\nfor foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n"}	2019-07-19 18:00:25-07	42
46052	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:00:26-07	42
46062	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\nfor foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n"}	2019-07-19 18:00:40-07	42
46072	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\nfor foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n"}	2019-07-19 18:04:37-07	42
46082	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:04:45-07	42
46092	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\nfor foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n"}	2019-07-19 18:06:24-07	42
46102	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:06:45-07	42
46112	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:06:56-07	42
46122	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:07:28-07	42
46132	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:09:31-07	42
46142	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foo in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n"}	2019-07-19 18:14:19-07	42
46152	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foos in bars.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoos #blankbars\\n"}	2019-07-19 18:14:40-07	42
46162	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foos in bars.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoos #blankbars\\n"}	2019-07-19 18:15:31-07	42
46172	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foos in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoos #blankbar\\n# graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 18:22:19-07	42
46182	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foos in bar.getNeighbors():#!ORIGINAL:for !BLANK in !BLANK.getNeighbors(): #blankfoos #blankbar\\n  # graph is a list of Nodes#!ORIGINAL:# graph is a list of Nodes\\n"}	2019-07-19 18:57:58-07	42
46192	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:58:03-07	42
46202	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():#!ORIGINAL:def dfs(!BLANK): #blank\\n"}	2019-07-19 18:59:11-07	42
46212	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-19 18:59:12-07	42
46222	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n  # graph is a list of Nodes# graph is a list of Nodes\\n"}	2019-07-19 19:05:18-07	42
46232	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-19 19:05:19-07	42
46242	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n  # graph is a list of Nodes\\ndef visit(func):#!ORIGINALdef visit(!BLANK): #blankfunc\\n  continue\\n"}	2019-07-19 19:16:08-07	42
46252	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-19 19:16:09-07	42
46262	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foo in bar.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n  # graph is a list of Nodes\\n  continue\\ndef visit(node):#!ORIGINALdef visit(!BLANK): #blanknode\\n  visit(neighbor)#!ORIGINALvisit(!BLANK) #blankneighbor\\n"}	2019-07-19 19:18:19-07	42
50252	coding	19sum_blank_pilots/plusses	load		2019-07-23 16:26:31-07	562
46272	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foo in bar.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankfoo #blankbar\\n  # graph is a list of Nodes\\n    continue\\ndef visit(node):#!ORIGINALdef visit(!BLANK): #blanknode\\n  visit(neighbor)#!ORIGINALvisit(!BLANK) #blankneighbor\\n"}	2019-07-19 19:18:53-07	42
46282	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:31:35-07	472
46292	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:31:39-07	472
46302	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK):  #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:31:40-07	472
46312	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs():  #!ORIGINALdef dfs(!BLANK):   #blank\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:31:51-07	472
46322	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(hello):   #!ORIGINALdef dfs(!BLANK):    #blankhello\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:32:03-07	472
46332	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(hello):    #!ORIGINALdef dfs(!BLANK):     #blankhello\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:32:10-07	472
46342	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  # graph is a list of Nodes\\ndef dfs(hello):     #!ORIGINALdef dfs(!BLANK):      #blankhello\\n"}	2019-07-19 23:32:55-07	472
46352	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(hello):      #!ORIGINALdef dfs(!BLANK):       #blankhello\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:33:02-07	472
46362	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for  in .getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors():  #blank #blank\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:33:13-07	472
46372	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for foo in bar.getNeighbors():  #!ORIGINALfor !BLANK in !BLANK.getNeighbors():   #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:33:53-07	472
46382	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for foo in bars.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbars\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:34:27-07	472
46392	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"    for foo in bars.getNeighbors():    #!ORIGINALfor !BLANK in !BLANK.getNeighbors():     #blankfoo #blankbars\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:36:23-07	472
46402	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for foo in bars.getNeighbors():     #!ORIGINALfor !BLANK in !BLANK.getNeighbors():      #blankfoo #blankbars\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:36:29-07	472
46412	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for foos in bars.getNeighbors():      #!ORIGINALfor !BLANK in !BLANK.getNeighbors():       #blankfoos #blankbars\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:36:34-07	472
46422	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  for foos in bars.getNeighbors():      #!ORIGINALfor !BLANK in !BLANK.getNeighbors():       #blankfoos #blankbars\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:36:37-07	472
46432	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:37:52-07	482
46442	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK):  #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:38:00-07	482
46452	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):  #!ORIGINALdef dfs(!BLANK):   #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:38:18-07	482
46462	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):   #!ORIGINALdef dfs(!BLANK):    #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:38:39-07	482
46472	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):    #!ORIGINALdef dfs(!BLANK):     #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:39:49-07	482
46482	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph):     #!ORIGINALdef dfs(!BLANK):      #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:46:25-07	482
46492	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):      #!ORIGINALdef dfs(!BLANK):       #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:46:40-07	482
46502	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):       #!ORIGINALdef dfs(!BLANK):        #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:46:58-07	482
46512	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"    def dfs(graphs):        #!ORIGINALdef dfs(!BLANK):         #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:52:00-07	482
46522	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph):         #!ORIGINALdef dfs(!BLANK):          #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:52:07-07	482
46532	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):          #!ORIGINALdef dfs(!BLANK):           #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:53:44-07	482
46542	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs):           #!ORIGINALdef dfs(!BLANK):            #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:53:57-07	482
46552	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):           #!ORIGINALdef dfs(!BLANK):            #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:54:03-07	482
46562	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):            #!ORIGINALdef dfs(!BLANK):             #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:54:37-07	482
46572	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):            #!ORIGINALdef dfs(!BLANK):             #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:54:43-07	482
46582	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):            #!ORIGINALdef dfs(!BLANK):             #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:54:46-07	482
46592	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):            #!ORIGINALdef dfs(!BLANK):             #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:55:24-07	482
46602	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for foo in bar.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors():  #blankfoo #blankbar\\n  # graph is a list of Nodes\\n    continue\\ndef visit(node): #!ORIGINALdef visit(!BLANK):  #blanknode\\n  visit(neighbor) #!ORIGINALvisit(!BLANK)  #blankneighbor\\n"}	2019-07-19 23:55:31-07	42
51552	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 18:35:54-07	582
46612	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foo in bar.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors():  #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:56:19-07	42
46622	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foo in bar.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors():  #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:56:22-07	42
46632	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for foo in bar.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors():  #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:56:25-07	42
46642	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors():  #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:56:30-07	42
46652	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for foo in bar.getNeighbors():  #!ORIGINALfor !BLANK in !BLANK.getNeighbors():   #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:56:31-07	42
46662	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  for foo in bar.getNeighbors():  #!ORIGINALfor !BLANK in !BLANK.getNeighbors():   #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:56:56-07	42
46672	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for foo in bar.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:56:58-07	42
46682	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"  for foo in bar.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:57:47-07	42
46692	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"  for foo in bar.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:57:56-07	42
46702	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"  for foo in bar.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:57:57-07	42
46712	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"  for foo in bar.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:57:58-07	42
46722	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:58:06-07	42
46732	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for foo in bar.getNeighbors():   #!ORIGINALfor !BLANK in !BLANK.getNeighbors():    #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:58:11-07	42
46742	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for foo in bar.getNeighbors():    #!ORIGINALfor !BLANK in !BLANK.getNeighbors():     #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:58:12-07	42
46752	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  for foo in bar.getNeighbors():    #!ORIGINALfor !BLANK in !BLANK.getNeighbors():     #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:58:21-07	42
46762	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  for foo in bar.getNeighbors():     #!ORIGINALfor !BLANK in !BLANK.getNeighbors():      #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:58:23-07	42
46772	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  for foo in bar.getNeighbors():     #!ORIGINALfor !BLANK in !BLANK.getNeighbors():      #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:58:27-07	42
46782	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"  for foo in bar.getNeighbors():     #!ORIGINALfor !BLANK in !BLANK.getNeighbors():      #blankfoo #blankbar\\n  # graph is a list of Nodes\\n"}	2019-07-19 23:58:35-07	42
46792	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"node.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n"}	2019-07-19 23:59:57-07	42
46802	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"node.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n"}	2019-07-19 23:59:59-07	42
46812	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n"}	2019-07-20 00:00:04-07	42
46822	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"node.setExit() #!ORIGINAL!BLANK.setExit()  #blanknode\\n"}	2019-07-20 00:00:06-07	42
46832	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit() #!ORIGINAL!BLANK.setExit()  #blanknode\\n"}	2019-07-20 00:00:11-07	42
46842	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()  #!ORIGINAL!BLANK.setExit()   #blanknode\\n"}	2019-07-20 00:00:12-07	42
46852	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"node.setExit()   #!ORIGINAL!BLANK.setExit()    #blanknode\\n"}	2019-07-20 00:01:48-07	42
46862	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def visit(node):#!ORIGINALdef visit(!BLANK): #blanknode\\nnode.setExit()   #!ORIGINAL!BLANK.setExit()    #blanknode\\n"}	2019-07-20 00:02:25-07	42
46872	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def visit(node): #!ORIGINALdef visit(!BLANK):  #blanknode\\n  node.setExit()    #!ORIGINAL!BLANK.setExit()     #blanknode\\n"}	2019-07-20 00:02:26-07	42
46882	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def visit(node): #!ORIGINALdef visit(!BLANK):  #blanknode\\n  node.setExit()    #!ORIGINAL!BLANK.setExit()     #blanknode\\n"}	2019-07-20 00:03:42-07	42
46892	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:03:44-07	42
46902	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:04:04-07	42
46912	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:04:08-07	42
46922	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:04:11-07	42
46932	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:04:12-07	42
46942	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:04:12-07	42
46952	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:04:13-07	42
50262	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-23 16:27:04-07	562
46962	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:04:17-07	42
46972	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:15:20-07	42
46982	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:15:21-07	42
46992	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:15:33-07	42
47002	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:15:38-07	42
47012	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:15:40-07	42
47022	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:15:40-07	42
47032	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:44:22-07	42
47042	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK):  #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:44:24-07	42
47052	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs): #!ORIGINALdef dfs(!BLANK):  #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:44:35-07	42
47062	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):  #!ORIGINALdef dfs(!BLANK):   #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:44:36-07	42
47072	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs):   #!ORIGINALdef dfs(!BLANK):    #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:46:02-07	42
47082	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):   #!ORIGINALdef dfs(!BLANK):    #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:46:08-07	42
47092	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):    #!ORIGINALdef dfs(!BLANK):     #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:46:09-07	42
47102	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):    #!ORIGINALdef dfs(!BLANK):     #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:46:15-07	42
47112	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs):     #!ORIGINALdef dfs(!BLANK):      #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:46:16-07	42
47122	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):     #!ORIGINALdef dfs(!BLANK):      #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:48:18-07	42
47132	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):      #!ORIGINALdef dfs(!BLANK):       #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:48:18-07	42
47142	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):      #!ORIGINALdef dfs(!BLANK):       #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:48:30-07	42
47152	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs):       #!ORIGINALdef dfs(!BLANK):        #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:48:31-07	42
47162	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):       #!ORIGINALdef dfs(!BLANK):        #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:01-07	42
47172	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):        #!ORIGINALdef dfs(!BLANK):         #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:01-07	42
47182	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):        #!ORIGINALdef dfs(!BLANK):         #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:05-07	42
47192	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs):         #!ORIGINALdef dfs(!BLANK):          #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:06-07	42
47202	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):         #!ORIGINALdef dfs(!BLANK):          #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:23-07	42
47212	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):          #!ORIGINALdef dfs(!BLANK):           #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:24-07	42
47222	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):          #!ORIGINALdef dfs(!BLANK):           #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:37-07	42
47232	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs):           #!ORIGINALdef dfs(!BLANK):            #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:39-07	42
47242	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):           #!ORIGINALdef dfs(!BLANK):            #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:41-07	42
47252	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):            #!ORIGINALdef dfs(!BLANK):             #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:42-07	42
47262	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  def dfs(graphs):            #!ORIGINALdef dfs(!BLANK):             #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:44-07	42
47272	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):             #!ORIGINALdef dfs(!BLANK):              #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:45-07	42
47282	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  def dfs(graphs):             #!ORIGINALdef dfs(!BLANK):              #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:47-07	42
47292	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"    def dfs(graphs):              #!ORIGINALdef dfs(!BLANK):               #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:49:48-07	42
47302	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"    def dfs(graphs):              #!ORIGINALdef dfs(!BLANK):               #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:50:01-07	42
47312	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"    def dfs(graphs):               #!ORIGINALdef dfs(!BLANK):                #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:50:02-07	42
50272	coding	19sum_blank_pilots/plusses	load		2019-07-23 16:27:05-07	562
47322	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"    def dfs(graphs):               #!ORIGINALdef dfs(!BLANK):                #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:54:22-07	42
47332	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"      def dfs(graphs):                #!ORIGINALdef dfs(!BLANK):                 #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:54:23-07	42
47342	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"      def dfs(graphs):                #!ORIGINALdef dfs(!BLANK):                 #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:56:00-07	42
47352	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"      def dfs(graphs):                 #!ORIGINALdef dfs(!BLANK):                  #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:56:01-07	42
47362	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:56:51-07	42
47372	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"node.setExit() #!ORIGINAL!BLANK.setExit()  #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:56:53-07	42
47382	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit() #!ORIGINAL!BLANK.setExit()  #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:57:10-07	42
47392	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()  #!ORIGINAL!BLANK.setExit()   #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:57:11-07	42
47402	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  node.setExit()  #!ORIGINAL!BLANK.setExit()   #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:57:36-07	42
47412	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()   #!ORIGINAL!BLANK.setExit()    #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:57:37-07	42
47422	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  node.setExit()   #!ORIGINAL!BLANK.setExit()    #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:59:28-07	42
47432	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"    node.setExit()    #!ORIGINAL!BLANK.setExit()     #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:59:44-07	42
47442	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()    #!ORIGINAL!BLANK.setExit()     #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:59:50-07	42
47452	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"node.setExit()     #!ORIGINAL!BLANK.setExit()      #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:59:51-07	42
47462	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()     #!ORIGINAL!BLANK.setExit()      #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:59:52-07	42
47472	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()      #!ORIGINAL!BLANK.setExit()       #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 00:59:53-07	42
47482	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()       #!ORIGINAL!BLANK.setExit()        #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 01:02:07-07	42
47492	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()       #!ORIGINAL!BLANK.setExit()        #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 01:02:11-07	42
47502	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()        #!ORIGINAL!BLANK.setExit()         #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 01:02:13-07	42
47512	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  node.setExit()        #!ORIGINAL!BLANK.setExit()         #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-20 01:02:47-07	42
47522	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-22 17:51:50-07	2
47532	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-22 17:59:04-07	492
47542	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 17:59:22-07	492
47552	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK):  #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 17:59:23-07	492
47562	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):  #!ORIGINALdef dfs(!BLANK):   #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 17:59:33-07	492
47572	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph):   #!ORIGINALdef dfs(!BLANK):    #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:11:29-07	492
47582	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):    #!ORIGINALdef dfs(!BLANK):     #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:11:37-07	492
47592	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"  def dfs(graphs):    #!ORIGINALdef dfs(!BLANK):     #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:13:54-07	492
47602	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:14:05-07	502
47612	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:14:22-07	502
47622	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:14:26-07	502
47632	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:14:36-07	502
47642	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:14:38-07	502
47652	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:17:12-07	272
47662	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:17:27-07	272
47672	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:17:31-07	272
47682	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs): #!ORIGINALdef dfs(!BLANK):  #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:17:36-07	272
47692	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):  #!ORIGINALdef dfs(!BLANK):   #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:18:26-07	272
47702	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs):   #!ORIGINALdef dfs(!BLANK):    #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:18:32-07	272
47712	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graphs):   #!ORIGINALdef dfs(!BLANK):    #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:18:35-07	272
47722	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:19:10-07	522
47732	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:19:20-07	522
47742	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:19:47-07	522
47752	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:19:50-07	522
47762	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs(graphs):#!ORIGINALdef dfs(!BLANK): #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:19:53-07	522
47772	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs): #!ORIGINALdef dfs(!BLANK):  #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:19:59-07	522
47782	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graphs):  #!ORIGINALdef dfs(!BLANK):   #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:20:06-07	522
47792	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graphs): #!ORIGINALdef dfs(!BLANK):  #blankgraphs\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:22:11-07	522
47802	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):  #!ORIGINALdef dfs(!BLANK):   #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:22:27-07	522
47812	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):   #!ORIGINALdef dfs(!BLANK):    #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:22:33-07	522
47822	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"    def dfs(graph):    #!ORIGINALdef dfs(!BLANK):     #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:22:37-07	522
47832	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"    def dfs(graph):    #!ORIGINALdef dfs(!BLANK):     #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:23:28-07	522
47842	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:23:38-07	532
47852	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK):  #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:23:50-07	532
47862	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):  #!ORIGINALdef dfs(!BLANK):   #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:24:03-07	532
47872	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):   #!ORIGINALdef dfs(!BLANK):    #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:24:16-07	532
47882	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"    def dfs(graph):    #!ORIGINALdef dfs(!BLANK):     #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:24:19-07	532
47892	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):    #!ORIGINALdef dfs(!BLANK):     #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:25:14-07	532
47902	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():#!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:25:47-07	542
47912	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph):#!ORIGINALdef dfs(!BLANK): #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:26:31-07	542
47922	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK):  #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:26:33-07	542
47932	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(graph): #!ORIGINALdef dfs(!BLANK):  #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:26:34-07	542
47942	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):  #!ORIGINALdef dfs(!BLANK):   #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:26:36-07	542
47952	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  def dfs(graph):   #!ORIGINALdef dfs(!BLANK):    #blankgraph\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:26:38-07	542
47962	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()         #!ORIGINAL!BLANK.setExit()          #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:28:44-07	42
47972	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"nodes.setExit()         #!ORIGINAL!BLANK.setExit()          #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:29:34-07	42
47982	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  nodes.setExit()          #!ORIGINAL!BLANK.setExit()           #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:29:36-07	42
47992	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"nodes.setExit()          #!ORIGINAL!BLANK.setExit()           #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:29:50-07	42
48002	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"nodes.setExit()           #!ORIGINAL!BLANK.setExit()            #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:29:51-07	42
48012	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"nodes.setExit()           #!ORIGINAL!BLANK.setExit()            #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:30:04-07	42
48022	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  nodes.setExit()            #!ORIGINAL!BLANK.setExit()             #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:30:05-07	42
48032	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"node.setExit()            #!ORIGINAL!BLANK.setExit()             #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:30:30-07	42
48042	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()            #!ORIGINAL!BLANK.setExit()             #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:30:59-07	42
48052	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"node.setExit()             #!ORIGINAL!BLANK.setExit()              #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:31:01-07	42
48062	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()             #!ORIGINAL!BLANK.setExit()              #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:31:10-07	42
50282	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-23 16:27:11-07	562
48072	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()              #!ORIGINAL!BLANK.setExit()               #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:31:11-07	42
48082	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-22 18:34:27-07	2
48092	parsons	19sum_blank_pilots/plusses	unload	{"code":""}	2019-07-22 18:34:36-07	2
48102	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-22 18:34:37-07	2
48112	parsons	19sum_blank_pilots/plusses	unload	{"code":""}	2019-07-22 18:34:45-07	2
48122	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-22 18:34:46-07	2
48132	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()              #!ORIGINAL!BLANK.setExit()               #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:34:51-07	42
48142	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"node.setExit()               #!ORIGINAL!BLANK.setExit()                #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:34:51-07	42
48152	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"node.setExit()               #!ORIGINAL!BLANK.setExit()                #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:01-07	42
48162	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"  node.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:03-07	42
48172	parsons	19sum_blank_pilots/plusses	unload	{"code":""}	2019-07-22 18:35:05-07	2
48182	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-22 18:35:06-07	2
48192	parsons	19sum_blank_pilots/plusses	unload	{"code":""}	2019-07-22 18:35:17-07	2
48202	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-22 18:35:18-07	2
48212	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"nodes.setExit()#!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:34-07	42
48222	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"nodes.setExit()#!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:35-07	42
48232	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"nodes.setExit()#!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:40-07	42
48242	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"nodes.setExit()#!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:41-07	42
48252	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"nodes.setExit()#!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:45-07	42
48262	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"nodes.setExit()#!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:35:46-07	42
48272	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  double_digit = max_odd_plus(n // 100)\\n  single_digit = max_odd_plus(n // 10)\\n  if n%2 == 1:\\n    single_digit = single_digit + n % 10\\n    double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-22 18:36:02-07	2
48282	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  double_digit = max_odd_plus(n // 100)\\n  single_digit = max_odd_plus(n // 10)\\n  if n%2 == 1:\\n    single_digit = single_digit + n % 10\\n    double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-22 18:36:21-07	2
48292	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  double_digit = max_odd_plus(n // 100)\\n  single_digit = max_odd_plus(n // 10)\\n  single_digit = single_digit + n % 10\\n  double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-22 18:36:30-07	2
48302	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:36:36-07	42
48312	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:36:37-07	42
48322	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  double_digit = max_odd_plus(n // 100)\\n  single_digit = max_odd_plus(n // 10)\\n  single_digit = single_digit + n % 10\\n  double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-22 18:36:37-07	2
48332	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:36:40-07	42
48342	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:36:41-07	42
48352	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors():#!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit()#!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:21-07	42
48362	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:23-07	42
48372	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:26-07	42
48382	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:27-07	42
48392	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:34-07	42
48402	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:36-07	42
51572	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 18:36:13-07	582
48412	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:42-07	42
48422	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:43-07	42
48432	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:50-07	42
48442	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\nnode.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:37:51-07	42
48452	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:38:19-07	42
48462	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:39:48-07	42
48472	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:39:51-07	42
48482	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:39:52-07	42
48492	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:24-07	42
48502	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:25-07	42
48512	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:28-07	42
48522	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:29-07	42
48532	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:32-07	42
48542	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:33-07	42
48552	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:35-07	42
48562	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:40:36-07	42
48572	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:42:55-07	42
48582	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:42:56-07	42
48592	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:42:59-07	42
48602	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:00-07	42
48612	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:02-07	42
48622	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:03-07	42
48632	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:24-07	42
48642	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:25-07	42
48652	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:29-07	42
49642	coding	demo	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">invalid syntax (<string>, line 1)</span><br /></div>	2019-07-23 16:18:05-07	552
48662	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:30-07	42
48672	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:32-07	42
48682	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:43:33-07	42
48692	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:34-07	42
48702	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:35-07	42
48712	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:37-07	42
48722	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:38-07	42
48732	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:40-07	42
48742	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:41-07	42
48752	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:43-07	42
48762	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:44:44-07	42
48772	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  nodes.setExit() #!ORIGINAL!BLANK.setExit() #blanknodes\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:54:45-07	42
48782	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:54:51-07	42
48792	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:54:52-07	42
48802	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:54:55-07	42
48812	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:54:56-07	42
48822	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:54:58-07	42
48832	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"for neighbor in node.getNeighbors(): #!ORIGINALfor !BLANK in !BLANK.getNeighbors(): #blankneighbor #blanknode\\n  node.setExit() #!ORIGINAL!BLANK.setExit() #blanknode\\n  # graph is a list of Nodes\\n"}	2019-07-22 18:55:00-07	42
48842	parsons	19sum_blank_pilots/coin_game	load	{"code":""}	2019-07-22 18:58:51-07	2
48852	parsons	19sum_blank_pilots/coin_game	unload	{"code":""}	2019-07-22 18:59:04-07	2
48862	parsons	19sum_blank_pilots/coin_game	load	{"code":""}	2019-07-22 18:59:05-07	2
48872	parsons	19sum_blank_pilots/coin_game	load	{"code":""}	2019-07-22 19:09:31-07	2
48882	parsons	19sum_blank_pilots/coin_game	unload	{"code":""}	2019-07-22 19:09:32-07	2
48892	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:09:33-07	2
48902	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_game(n, starting_player):\\n"}	2019-07-22 19:09:42-07	2
48912	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:09:43-07	2
48922	coding	19sum_blank_pilots/coin_game	submit	{"code":"  def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n      return starting_player\\n    if coin_game(n-1, other_player, starting_player) == starting_player or coin_game(n-2, other_player, starting_player) == starting_player:\\n      return starting_player\\n    else:\\n      return other_player"}	2019-07-22 19:09:46-07	2
48932	coding	19sum_blank_pilots/coin_game	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected indent (<string>, line 1)</span><br /></div>	2019-07-22 19:09:47-07	2
48942	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n      return starting_player\\n    if coin_game(n-1, other_player, starting_player) == starting_player or coin_game(n-2, other_player, starting_player) == starting_player:\\n      return starting_player\\n    else:\\n      return other_player"}	2019-07-22 19:09:51-07	2
48952	coding	19sum_blank_pilots/coin_game	results	<div class="testcase error"><span class="msg">Calling function <code>coin_game([1, 'Alice', 'Bob'])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">coin_game() missing 2 required positional arguments: 'starting_player' and 'other_player', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_game([2, 'Alice', 'Bob'])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">coin_game() missing 2 required positional arguments: 'starting_player' and 'other_player', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_game([3, 'Alice', 'Bob'])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">coin_game() missing 2 required positional arguments: 'starting_player' and 'other_player', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_game([2, 'Bob', 'Alice'])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">coin_game() missing 2 required positional arguments: 'starting_player' and 'other_player', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_game([10, 'Alice', 'Bob'])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">coin_game() missing 2 required positional arguments: 'starting_player' and 'other_player', line 95</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_game([12, 'Alice', 'Bob'])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">coin_game() missing 2 required positional arguments: 'starting_player' and 'other_player', line 95</span><br /></div>	2019-07-22 19:09:51-07	2
48962	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n      return starting_player\\n    if coin_game(n-1, other_player, starting_player) == starting_player or coin_game(n-2, other_player, starting_player) == starting_player:\\n      return starting_player\\n    else:\\n      return other_player"}	2019-07-22 19:10:11-07	2
48972	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-22 19:10:12-07	2
48982	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n"}	2019-07-22 19:10:19-07	2
48992	coding	19sum_blank_pilots/coin_game	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected EOF while parsing (<string>, line 2)</span><br /></div>	2019-07-22 19:10:19-07	2
49002	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_game(n, starting_player, other_player):\\n"}	2019-07-22 19:10:20-07	2
49012	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:10:21-07	2
49022	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:12:53-07	132
49032	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_game(n, starting_player, other_player):\\n"}	2019-07-22 19:12:59-07	132
49042	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:13:00-07	132
49052	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:13:24-07	232
49062	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_game(n, starting_player, other_player):\\n"}	2019-07-22 19:13:47-07	2
49072	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_game(n, starting_player, other_player):\\n"}	2019-07-22 19:13:49-07	232
49082	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:13:50-07	2
49092	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:13:51-07	232
49102	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:18:20-07	232
49112	coding	19sum_blank_pilots/coin_game	load		2019-07-22 19:19:36-07	232
49122	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Alice</code></span> <br /></div>	2019-07-22 19:31:20-07	232
49132	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n        return starting_player\\n    return coin_game(n-2, other_player, starting_player) or coin_game(n-1, other_player, starting_player)"}	2019-07-22 19:31:56-07	232
49142	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-22 19:31:57-07	232
49152	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n        return starting_player\\n    return coin_game(n-2, other_player, starting_player) or coin_game(n-1, other_player, starting_player)"}	2019-07-22 19:32:33-07	232
49622	coding	demo	results	<div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 16:18:02-07	552
49632	coding	demo	submit	{"code":"def return_three()\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:18:05-07	552
49162	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_game(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-22 19:32:33-07	232
49172	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_game(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-22 19:37:17-07	232
49182	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n        return starting_player\\n    if n // 2 == 0:\\n        return coin_game(n-1, other_player, starting_player)\\n    return coin_game(n-2, other_player, starting_player)"}	2019-07-22 19:37:21-07	232
49192	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_game(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-22 19:37:21-07	232
49202	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n        return starting_player\\n    if n // 2 != 0:\\n        return coin_game(n-1, other_player, starting_player)\\n    return coin_game(n-2, other_player, starting_player)"}	2019-07-22 19:37:32-07	232
49212	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Alice</code></span> <br /></div>	2019-07-22 19:37:33-07	232
49222	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_game(n, starting_player, other_player):\\n    if n == 1 or n == 2:\\n        return starting_player\\n    if n // 2 != 0:\\n        return coin_game(n-1, other_player, starting_player)\\n    return coin_game(n-2, other_player, starting_player)"}	2019-07-22 19:37:34-07	232
67542	coding	19sum_blank_pilots/plusses	load		2019-07-30 00:20:35-07	2
49232	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_game(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_game(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_game(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Alice</code></span> <br /></div>	2019-07-22 19:37:35-07	232
49242	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_game(n, starting_player, other_player):\\n"}	2019-07-22 19:37:48-07	2
49252	coding	19sum_blank_pilots/coin_game_blanks	load		2019-07-22 19:37:49-07	2
49262	coding	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-22 19:37:52-07	2
49272	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-22 19:38:23-07	2
49282	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-22 19:38:29-07	2
49292	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-22 19:38:30-07	2
49302	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-22 19:38:32-07	2
49312	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-22 19:38:33-07	2
49322	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-22 19:38:35-07	2
49332	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-22 19:39:31-07	232
49342	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(n, curr, other):\\n  if n == 1 or n == 2:\\n    return curr\\n  if coin_winner(n-1, other, curr) == 0 or coin_game(n-2, other, curr) == 0:\\n    return other\\n  return curr\\n"}	2019-07-22 19:42:38-07	232
49352	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(n, curr, other):\\n  if n == 1 or n == 2:\\n    return curr\\n  if coin_winner(n-1, other, curr) == 0 or coin_game(n-2, other, curr) == 0:\\n    return other\\n  return other\\n"}	2019-07-22 19:42:48-07	232
49362	multi	19sum_blank_pilots/topic_confidence	load		2019-07-22 23:09:49-07	2
49372	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:12:57-07	2
49382	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:13:07-07	2
49392	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 16:13:28-07	2
49402	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 16:14:20-07	2
49412	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 16:14:30-07	2
49422	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":"This is a test"},{"id":"recursion_problems","input":"These 5 problems..."}]	2019-07-23 16:15:09-07	2
49432	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:15:10-07	2
49442	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 16:15:35-07	2
49452	coding	demo	load		2019-07-23 16:15:36-07	2
49462	coding	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:15:44-07	2
49472	coding	demo	load		2019-07-23 16:15:45-07	2
49482	coding	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:15:51-07	2
49492	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 16:16:21-07	552
49502	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-23 16:16:22-07	552
49512	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:16:23-07	552
49522	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 16:16:25-07	552
49532	coding	demo	load		2019-07-23 16:16:26-07	552
49542	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 16:16:27-07	552
49552	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:16:27-07	552
49562	multi	19sum_blank_pilots/topic_confidence	submit	[{"id":"cond_write_code","id-input":"cond_write_code-1_(not_at_all_able)"},{"id":"cond_read_code","id-input":"cond_read_code-2"},{"id":"cond_help_friend","id-input":"cond_help_friend-3"},{"id":"game_write_code","id-input":"game_write_code-4"},{"id":"game_read_code","id-input":"game_read_code-5_(very_able)"},{"id":"game_help_friend","id-input":"game_help_friend-3"}]	2019-07-23 16:16:36-07	552
49572	coding	demo	load		2019-07-23 16:16:37-07	552
49582	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 16:17:44-07	552
49592	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return x\\n"}	2019-07-23 16:17:58-07	552
49602	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 16:17:59-07	552
49612	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:18:02-07	552
50192	multi	19sum_blank_pilots/conf_cog_survey	submit	[]	2019-07-23 16:26:19-07	562
49652	coding	demo	move_on	{"code":"def return_three()\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:18:06-07	552
49662	coding	demo	unload	{"code":"def return_three()\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:18:06-07	552
49672	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:18:07-07	552
49682	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 16:18:15-07	552
49692	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 16:18:17-07	552
49702	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 16:18:17-07	552
49712	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:18:18-07	552
49722	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:18:50-07	552
49732	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:20:51-07	552
49742	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:20:51-07	552
49752	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 16:21:05-07	552
49762	coding	demo	load		2019-07-23 16:21:06-07	552
49772	coding	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:11-07	552
49782	coding	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:12-07	552
49792	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:12-07	552
49802	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:15-07	552
49812	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:16-07	552
49822	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:21:16-07	552
49832	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:18-07	552
49842	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:21-07	552
49852	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:22-07	552
49862	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:21:39-07	552
49872	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 16:21:52-07	562
49882	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-23 16:21:55-07	562
49892	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:21:56-07	562
49902	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 16:21:56-07	562
49912	coding	demo	load		2019-07-23 16:21:57-07	562
49922	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 16:21:59-07	562
49932	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 16:22:00-07	562
49942	parsons	demo_parsons	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:22:00-07	562
49952	parsons	demo_parsons	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:22:02-07	562
49962	parsons	demo_parsons	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:22:02-07	562
49972	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:22:03-07	562
49982	parsons	demo_parsons	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:22:12-07	562
49992	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:24:38-07	562
50002	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:24:40-07	562
50012	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:24:40-07	562
50022	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:24:41-07	562
50032	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:24:50-07	562
50042	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:24:51-07	562
50052	multi	19sum_blank_pilots/start	load		2019-07-23 16:25:16-07	562
50062	multi	19sum_blank_pilots/start	submit	[]	2019-07-23 16:25:18-07	562
50072	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-23 16:25:34-07	562
50082	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":""}	2019-07-23 16:25:42-07	562
50092	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":""}	2019-07-23 16:25:43-07	562
50102	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:25:43-07	562
50112	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-23 16:26:09-07	562
50122	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":""}	2019-07-23 16:26:10-07	562
50132	multi	19sum_blank_pilots/start	load		2019-07-23 16:26:11-07	562
50142	multi	19sum_blank_pilots/start	submit	[]	2019-07-23 16:26:12-07	562
50152	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-23 16:26:13-07	562
50162	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":""}	2019-07-23 16:26:15-07	562
50172	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":""}	2019-07-23 16:26:15-07	562
50182	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-23 16:26:16-07	562
50292	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-23 16:27:11-07	562
50302	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-23 16:27:12-07	562
50312	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[]	2019-07-23 16:27:14-07	562
50322	coding	19sum_blank_pilots/coin_game	load		2019-07-23 16:27:15-07	562
50332	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-23 16:27:19-07	562
50342	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-23 16:27:19-07	562
50352	coding	19sum_blank_pilots/plusses	load		2019-07-23 16:27:20-07	562
50362	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-23 16:27:21-07	562
50372	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-23 16:27:22-07	562
50382	coding	19sum_blank_pilots/coin_game	load		2019-07-23 16:27:23-07	562
50392	coding	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-23 16:27:24-07	562
50402	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-23 16:27:25-07	562
50412	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-23 16:27:25-07	562
50422	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[]	2019-07-23 16:27:26-07	562
50432	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-23 16:27:27-07	562
50442	parsons	19sum_blank_pilots/plusses	unload	{"code":""}	2019-07-23 16:28:33-07	562
50452	multi	19sum_blank_pilots/conf_cog_survey_5	load		2019-07-23 16:28:34-07	562
50462	multi	19sum_blank_pilots/conf_cog_survey_5	submit	[]	2019-07-23 16:28:36-07	562
50472	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-23 16:28:36-07	562
50482	multi	19sum_blank_pilots/post_survey_pt_1	submit	[]	2019-07-23 16:28:39-07	562
50492	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-23 16:28:42-07	562
50502	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":"tree recursion, tail recursion and mutual recursions."},{"id":"recursion_problems","input":"deletechild(tree) and other tree recursion problems"}]	2019-07-23 16:37:09-07	572
50512	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 16:37:10-07	572
50522	coding	demo	load		2019-07-23 16:39:45-07	572
50532	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 16:41:13-07	572
50542	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:41:54-07	572
50552	coding	demo	results	<div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 16:41:54-07	572
50562	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x);\\n  return 3\\n"}	2019-07-23 16:42:04-07	572
50572	coding	demo	results	<div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 16:42:04-07	572
50582	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x):\\n  return 3\\n"}	2019-07-23 16:42:13-07	572
50592	coding	demo	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">invalid syntax (<string>, line 4)</span><br /></div>	2019-07-23 16:42:14-07	572
50602	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:42:24-07	572
50612	coding	demo	results	<div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 16:42:24-07	572
50622	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:42:34-07	572
50632	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-23 16:42:35-07	572
50642	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:42:36-07	572
50652	parsons	demo	move_on	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\n  print(x)\\n  return x\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:43:50-07	572
50662	parsons	demo	unload	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\n  print(x)\\n  return x\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:43:51-07	572
50672	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:43:51-07	572
50682	parsons	demo_blanks	submit	{"code":"def return_three():\\nx = 6\\nreturn x // 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:44:22-07	572
50692	parsons	demo_blanks	submit	{"code":"def return_three():\\n  x = 6\\n  return x // 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:44:40-07	572
50702	parsons	demo_blanks	unload	{"code":"def return_three():\\n  x = 6\\n  return x // 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:44:46-07	572
50712	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  x = 6\\n  return x // 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 16:44:47-07	572
50722	multi	19sum_blank_pilots/start	load		2019-07-23 16:44:47-07	572
50732	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-23 16:46:13-07	572
51562	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":"Recursion, other recursion, etc."},{"id":"recursion_problems","input":"deleting a child (from) a (tree)"}]	2019-07-23 18:36:13-07	582
50742	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  tens = a + n % 10\\n  hundreds = b + n % 100\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:51:13-07	572
50752	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  tens = a + n % 10\\n  hundreds = b + n % 100\\n  print(tens)\\n  print(hundreds)\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:52:07-07	572
50762	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    tens = a + n % 10\\n    hundreds = b + n % 100\\n  print(tens)\\n  print(hundreds)\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:52:54-07	572
50772	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  tens = a + n % 10\\n  hundreds = b + n % 100\\n  print(tens)\\n  print(hundreds)\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:53:09-07	572
50782	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  tens = a + n % 10\\n  hundreds = b + n % 100\\n  print(tens)\\n  print(hundreds)\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:55:03-07	572
50792	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  tens = a + n % 10\\n  hundreds = b + n % 100\\n  print(tens)\\n  print(hundreds)\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:56:22-07	572
50802	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  tens = a + n % 10\\n  hundreds = b + n % 100\\n  print(tens)\\n  print(hundreds)\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:57:13-07	572
50812	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  tens = a + n % 10\\n  hundreds = b + n % 100\\n  print(tens)\\n  print(hundreds)\\n  return max(tens, hundreds)\\n"}	2019-07-23 16:57:13-07	572
50822	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-23 16:57:14-07	572
50832	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-2"},{"id":"understanding_topic","id-input":"understanding_topic-3"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 16:57:41-07	572
50842	coding	19s_algo_study/fizz_buzz	load		2019-07-23 16:57:42-07	572
50852	coding	19s_algo_study/fizz_buzz	results	<div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz']</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 16:58:42-07	572
50862	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">invalid syntax (<string>, line 7)</span><br /></div>	2019-07-23 17:00:36-07	572
50872	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(1, n+1):\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = 'fizzbuzz'\\n        if array[i]%3==0:\\n            array[i] = 'fizz'\\n        if array[i]%5==0:\\n            array[i] = 'buzz'\\n    return array"}	2019-07-23 17:00:55-07	572
50882	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:00:55-07	572
50892	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(1, n+1):\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = 'fizzbuzz'\\n        if array[i]%3==0:\\n            array[i] = 'fizz'\\n        if array[i]%5==0:\\n            array[i] = 'buzz'\\n    print(array)\\n    return array"}	2019-07-23 17:01:14-07	572
50902	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:01:14-07	572
50912	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    for i in range(1, n+1):\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = 'fizzbuzz'\\n        if array[i]%3==0:\\n            array[i] = 'fizz'\\n        if array[i]%5==0:\\n            array[i] = 'buzz'\\n    print(array)\\n    return array"}	2019-07-23 17:01:27-07	572
50922	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 10</span><br /></div>	2019-07-23 17:01:27-07	572
50932	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = 'fizzbuzz'\\n        if array[i]%3==0:\\n            array[i] = 'fizz'\\n        if array[i]%5==0:\\n            array[i] = 'buzz'\\n    print(array)\\n    return array"}	2019-07-23 17:02:07-07	572
50942	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">list index out of range, line 5</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">list index out of range, line 5</span><br /></div>	2019-07-23 17:02:07-07	572
50952	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    for i in range(0, len(n)):\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = 'fizzbuzz'\\n        if array[i]%3==0:\\n            array[i] = 'fizz'\\n        if array[i]%5==0:\\n            array[i] = 'buzz'\\n    print(array)\\n    return array"}	2019-07-23 17:02:24-07	572
50962	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">object of type 'int' has no len(), line 5</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">object of type 'int' has no len(), line 5</span><br /></div>	2019-07-23 17:02:25-07	572
50972	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = 'fizzbuzz'\\n        if array[i]%3==0:\\n            array[i] = 'fizz'\\n        if array[i]%5==0:\\n            array[i] = 'buzz'\\n    print(array)\\n    return array"}	2019-07-23 17:02:37-07	572
50982	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 10</span><br /></div>	2019-07-23 17:02:37-07	572
50992	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = \\"fizzbuzz\\"\\n        if array[i]%3==0:\\n            array[i] = \\"fizz\\"\\n        if array[i]%5==0:\\n            array[i] = \\"buzz\\"\\n    print(array)\\n    return array"}	2019-07-23 17:03:13-07	572
51002	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 10</span><br /></div>	2019-07-23 17:03:14-07	572
51012	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n        print(array)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5 == 0:\\n            array[i] = \\"fizzbuzz\\"\\n        if array[i]%3==0:\\n            array[i] = \\"fizz\\"\\n        if array[i]%5==0:\\n            array[i] = \\"buzz\\"\\n    print(array)\\n    return array"}	2019-07-23 17:03:49-07	572
51022	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1]\n[1, 2]\n[1, 2, 3]\n[1, 2, 3, 4]\n[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1]\n[1, 2]\n[1, 2, 3]\n[1, 2, 3, 4]\n[1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5, 6]\n[1, 2, 3, 4, 5, 6, 7]\n[1, 2, 3, 4, 5, 6, 7, 8]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:03:50-07	572
51032	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n        print(array)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if array[i]%3==0:\\n            array[i] = \\"fizz\\"\\n        if array[i]%5==0:\\n            array[i] = \\"buzz\\"\\n    print(array)\\n    return array"}	2019-07-23 17:04:23-07	572
51152	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">invalid literal for int() with base 10: 'fizz', line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">invalid literal for int() with base 10: 'fizz', line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:07:43-07	572
51162	coding	19s_algo_study/fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(0, len(array)):\\n        if int(array[i])%3==0 and int(array[i])%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if int(array[i])%3==0:\\n            array[i] = \\"fizz\\"\\n        if int(array[i])%5==0:\\n            array[i] = \\"buzz\\"\\n    return array"}	2019-07-23 17:08:18-07	572
51042	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1]\n[1, 2]\n[1, 2, 3]\n[1, 2, 3, 4]\n[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1]\n[1, 2]\n[1, 2, 3]\n[1, 2, 3, 4]\n[1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5, 6]\n[1, 2, 3, 4, 5, 6, 7]\n[1, 2, 3, 4, 5, 6, 7, 8]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:04:23-07	572
51052	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if array[i]%3==0:\\n            array[i] = \\"fizz\\"\\n        if array[i]%5==0:\\n            array[i] = \\"buzz\\"\\n    print(array)\\n    return array"}	2019-07-23 17:04:32-07	572
51062	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:04:33-07	572
51072	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if array[i]%3==0:\\n            array[i] = \\"fizz\\"\\n        if array[i]%5==0:\\n            array[i] = \\"buzz\\"\\n    print(array)\\n    return array"}	2019-07-23 17:04:58-07	572
51082	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:04:59-07	572
51092	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if array[i]%3==0:\\n            array[i] = \\"fizz\\"\\n        if array[i]%5==0:\\n            array[i] = \\"buzz\\"\\n    return array"}	2019-07-23 17:05:43-07	572
51102	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:05:44-07	572
51112	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(0, len(array)):\\n        if array[i]%3==0 and array[i]%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if array[i]%3==0:\\n            array[i] = \\"fizz\\"\\n        if array[i]%5==0:\\n            array[i] = \\"buzz\\""}	2019-07-23 17:05:47-07	572
51122	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:05:48-07	572
51132	coding	19s_algo_study/fizz_buzz	results	<div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5]\n</pre></span></div><div class="testcase error"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">not all arguments converted during string formatting, line 11</span><br /><span class="msg">Print Output: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</pre></span></div>	2019-07-23 17:06:51-07	572
51142	coding	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(0, len(array)):\\n        if int(array[i])%3==0 and int(array[i])%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if int(array[i])%3==0:\\n            array[i] = \\"fizz\\"\\n        if int(array[i])%5==0:\\n            array[i] = \\"buzz\\"\\n    return array"}	2019-07-23 17:07:42-07	572
51172	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n    array = []\\n    for i in range(1, n+1):\\n        array.append(i)\\n    print(array)\\n    for i in range(0, len(array)):\\n        if int(array[i])%3==0 and int(array[i])%5==0:\\n            array[i] = \\"fizzbuzz\\"\\n        if int(array[i])%3==0:\\n            array[i] = \\"fizz\\"\\n        if int(array[i])%5==0:\\n            array[i] = \\"buzz\\"\\n    return array"}	2019-07-23 17:08:19-07	572
51182	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-23 17:08:19-07	572
51192	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-3"},{"id":"understanding_topic","id-input":"understanding_topic-3"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 17:08:38-07	572
51202	coding	19sum_blank_pilots/plusses	load		2019-07-23 17:08:39-07	572
51212	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1329)</code>.</span><br /><span class="msg">Expected result to be <code>42</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>38</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>138</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>46</code></span> <br /></div>	2019-07-23 17:10:13-07	572
51222	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    tens = n % 10\\n    hundreds = n % 100\\n    return max(max_odd_plus(n//10) + tens, max_odd_plus(n//100) + hundreds)"}	2019-07-23 17:10:36-07	572
51232	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1329)</code>.</span><br /><span class="msg">Expected result to be <code>42</code> , your code returned <code>42</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>38</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>138</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>91</code></span> <br /></div>	2019-07-23 17:10:36-07	572
51242	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    tens = n % 10\\n    hundreds = n % 100\\n    if tens%2 == 1:\\n        tens = 1\\n    if hundreds%2 == 1:\\n        hundreds = 1\\n    return max(max_odd_plus(n//10) + tens, max_odd_plus(n//100) + hundreds)"}	2019-07-23 17:11:20-07	572
51252	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1329)</code>.</span><br /><span class="msg">Expected result to be <code>42</code> , your code returned <code>34</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>4</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>38</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>138</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>46</code></span> <br /></div>	2019-07-23 17:11:21-07	572
51262	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    tens = n % 10\\n    hundreds = n % 100\\n    \\n    return max(max_odd_plus(n//10) + tens, max_odd_plus(n//100) + hundreds)"}	2019-07-23 17:11:32-07	572
51272	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1329)</code>.</span><br /><span class="msg">Expected result to be <code>42</code> , your code returned <code>42</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>38</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>138</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>91</code></span> <br /></div>	2019-07-23 17:11:33-07	572
51282	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1329)</code>.</span><br /><span class="msg">Expected result to be <code>42</code> , your code returned <code>42</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-07-23 17:13:29-07	572
51532	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 18:35:51-07	582
51292	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    tens = n % 10\\n    hundreds = n % 100\\n    if (hundreds % 2 == 0):\\n        hundreds = 0\\n    if (tens % 2 == 0):\\n        tens = 0\\n    return max(max_odd_plus(n//10) + tens, max_odd_plus(n//100) + hundreds)"}	2019-07-23 17:13:34-07	572
51302	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    tens = n % 10\\n    hundreds = n % 100\\n    if (hundreds % 2 == 0):\\n        hundreds = 0\\n    if (tens % 2 == 0):\\n        tens = 0\\n    return max(max_odd_plus(n//10) + tens, max_odd_plus(n//100) + hundreds)"}	2019-07-23 17:13:34-07	572
51312	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-23 17:13:35-07	572
51322	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"complex","id-input":"complex-3"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-2"},{"id":"understanding_topic","id-input":"understanding_topic-4"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-3"}]	2019-07-23 17:13:48-07	572
51332	coding	19sum_blank_pilots/coin_game	load		2019-07-23 17:13:50-07	572
51342	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /><span class="msg">Print Output: <pre>Bob Bob\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /><span class="msg">Print Output: <pre>Alice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /><span class="msg">Print Output: <pre>Alice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\n...\nAlice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Alice\nAlice Bob\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Alice</code></span> <br /><span class="msg">Print Output: <pre>Alice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\n...\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\nBob Alice\nAlice Bob\n</pre></span></div>	2019-07-23 17:17:58-07	572
51352	coding	19sum_blank_pilots/coin_game	results	<div class="testcase fail"><span class="msg">Calling function <code>coin_winner(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-23 17:19:04-07	572
51362	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(n, current_player, other_player):\\n    winner = 1\\n    if n < 3:\\n        winner = current_player\\n    else:\\n        winner = coin_winner(n-1, other_player, current_player)\\n        winner2 = coin_winner(n-2, other_player, current_player)\\n        print(winner, winner2)\\n    return winner"}	2019-07-23 17:19:28-07	572
51372	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /><span class="msg">Print Output: <pre>Bob Bob\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /><span class="msg">Print Output: <pre>Alice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /><span class="msg">Print Output: <pre>Alice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\n...\nAlice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Alice\nAlice Bob\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Alice</code></span> <br /><span class="msg">Print Output: <pre>Alice Alice\nAlice Bob\nBob Bob\nAlice Bob\nBob Bob\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Bob\nBob Bob\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\n...\nBob Alice\nAlice Alice\nBob Alice\nAlice Alice\nAlice Bob\nBob Alice\nAlice Bob\nBob Alice\nAlice Bob\n</pre></span></div>	2019-07-23 17:19:31-07	572
51382	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n    winner = 1\\n    if n < 3:\\n        winner = current_player\\n    else:\\n        winner = coin_winner(n-1, other_player, current_player) coin_winner(n-2, other_player, current_player)\\n    return winner"}	2019-07-23 17:23:57-07	572
51392	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-23 17:23:58-07	572
51402	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"complex","id-input":"complex-3"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-2"},{"id":"understanding_topic","id-input":"understanding_topic-4"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 17:24:09-07	572
51412	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-23 17:24:10-07	572
51422	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  if n%2 == 1:\\n    single_digit = max_odd_plus(n // 10)\\n    double_digit = max_odd_plus(n // 100)\\n    single_digit = single_digit + n % 10\\n    double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 17:25:52-07	572
51432	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    single_digit = single_digit + n % 10\\n    double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 17:26:15-07	572
51442	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    single_digit = single_digit + n % 10\\n    double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 17:26:23-07	572
51452	parsons	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    single_digit = single_digit + n % 10\\n    double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 17:26:23-07	572
51462	multi	19sum_blank_pilots/conf_cog_survey_5	load		2019-07-23 17:26:24-07	572
51472	multi	19sum_blank_pilots/conf_cog_survey_5	submit	[{"id":"complex","id-input":"complex-3"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-2"},{"id":"understanding_topic","id-input":"understanding_topic-4"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-5_(very_enhanced)"}]	2019-07-23 17:26:41-07	572
51482	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-23 17:26:41-07	572
51492	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-23 17:28:35-07	572
51502	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 18:33:13-07	42
51512	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:33:53-07	42
51522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 18:35:50-07	582
51582	multi	19sum_blank_pilots/topic_confidence	submit	[{"id":"cond_write_code","id-input":"cond_write_code-4"},{"id":"cond_read_code","id-input":"cond_read_code-4"},{"id":"cond_help_friend","id-input":"cond_help_friend-1_(not_at_all_able)"},{"id":"game_write_code","id-input":"game_write_code-3"},{"id":"game_read_code","id-input":"game_read_code-5_(very_able)"},{"id":"game_help_friend","id-input":"game_help_friend-3"}]	2019-07-23 18:36:27-07	582
51592	coding	demo	load		2019-07-23 18:36:29-07	582
51602	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 18:36:35-07	582
51612	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 18:36:35-07	582
51622	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 18:36:46-07	582
51632	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 18:36:47-07	582
51642	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 18:36:48-07	582
51652	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print(x)\\n  x = x + 1\\n  return x\\n"}	2019-07-23 18:37:05-07	582
51662	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print(x)\\n  x = x + 1\\n  return x\\n"}	2019-07-23 18:38:10-07	582
51672	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print(x)\\n  x = x + 1\\n  return x\\n"}	2019-07-23 18:38:57-07	582
51682	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print(x)\\n  x = x + 1\\n  return x\\n"}	2019-07-23 18:38:58-07	582
51692	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 18:38:59-07	582
51702	parsons	demo_blanks	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\n  return x // 2\\n"}	2019-07-23 18:39:09-07	582
51712	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\n  return x // 2\\n"}	2019-07-23 18:39:14-07	582
51722	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\n  return x // 2\\n"}	2019-07-23 18:39:14-07	582
51732	multi	19sum_blank_pilots/start	load		2019-07-23 18:39:15-07	582
51742	multi	19sum_blank_pilots/start	submit	[]	2019-07-23 18:39:17-07	582
51752	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-23 18:39:18-07	582
51762	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus():\\n"}	2019-07-23 18:39:29-07	582
51772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:40:04-07	42
51782	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:40:16-07	42
51792	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:40:17-07	42
51802	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-23 18:41:04-07	582
51812	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:42:57-07	42
51822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:42:59-07	42
51832	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:43:43-07	42
51842	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:43:44-07	42
51852	parsons	19s_algo_study/binary_search_1	unload	{"code":""}	2019-07-23 18:53:41-07	42
51862	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":""}	2019-07-23 18:54:54-07	582
51872	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":""}	2019-07-23 18:54:54-07	582
51882	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":""}	2019-07-23 18:54:54-07	582
51892	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":""}	2019-07-23 18:54:55-07	582
51902	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"  this =  + n % 10\\n"}	2019-07-23 18:55:11-07	582
51912	parsons	19s_algo_study/binary_search_1	unload	{"code":""}	2019-07-23 18:55:12-07	42
51922	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this  =  + n % 10\\n"}	2019-07-23 18:55:18-07	582
51932	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is =  + n % 10\\n"}	2019-07-23 18:55:19-07	582
51942	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is =  + n % 10\\n"}	2019-07-23 18:55:19-07	582
51952	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is  =  + n % 10\\n"}	2019-07-23 18:55:20-07	582
51962	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a  =  + n % 10\\n"}	2019-07-23 18:55:21-07	582
51972	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a b =  + n % 10\\n"}	2019-07-23 18:55:21-07	582
51982	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a bl =  + n % 10\\n"}	2019-07-23 18:55:22-07	582
51992	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a bla =  + n % 10\\n"}	2019-07-23 18:55:22-07	582
52002	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a blan =  + n % 10\\n"}	2019-07-23 18:55:23-07	582
52012	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a blank =  + n % 10\\n"}	2019-07-23 18:55:24-07	582
52022	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a blank =  + n % 10\\n"}	2019-07-23 18:55:24-07	582
52032	parsons	19s_algo_study/binary_search_1	unload	{"code":""}	2019-07-23 18:55:36-07	42
55722	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-24 00:22:11-07	222
52042	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 18:55:37-07	42
52052	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:55:54-07	42
52062	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:55:55-07	42
52072	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a blank =  + n % 10\\n"}	2019-07-23 18:55:57-07	582
52082	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a blank =  + n % 10\\n"}	2019-07-23 18:56:06-07	582
52092	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"  this is a blank =  + n % 10\\n"}	2019-07-23 18:56:06-07	582
52102	parsons	19sum_blank_pilots/plusses_blanks	keyup	{"code":"   =  + n % 10\\n"}	2019-07-23 18:56:07-07	582
52112	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"   =  + n % 10\\n"}	2019-07-23 18:56:08-07	582
52122	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:56:19-07	42
52132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:56:20-07	42
52142	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:56:24-07	42
52152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value #!ORIGINAL# !BLANK #blankcheck value\\n"}	2019-07-23 18:56:25-07	42
52162	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:56:52-07	42
52172	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check value of arr #!ORIGINAL# !BLANK #blankcheck value of arr\\n"}	2019-07-23 18:56:54-07	42
52182	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check #!ORIGINAL# !BLANK #blankcheck\\n"}	2019-07-23 18:56:59-07	42
52192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  # check #!ORIGINAL# !BLANK #blankcheck\\n"}	2019-07-23 18:57:00-07	42
52202	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # check #!ORIGINAL# !BLANK #blankcheck\\n"}	2019-07-23 18:57:55-07	42
52212	parsons	19s_algo_study/binary_search_1	unload	{"code":""}	2019-07-23 18:58:06-07	42
52222	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 18:58:07-07	42
52232	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-23 18:58:18-07	42
52242	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-23 18:58:19-07	42
52252	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(value) #!ORIGINALprint(!BLANK) #blankvalue\\n"}	2019-07-23 18:58:24-07	42
52262	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value) #!ORIGINALprint(!BLANK) #blankvalue\\n"}	2019-07-23 18:58:25-07	42
52272	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 18:58:45-07	132
52282	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-23 18:58:48-07	132
52292	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 18:58:49-07	132
52302	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 18:58:50-07	132
52312	coding	demo	coding_keyup	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 18:59:20-07	132
52322	coding	demo	load		2019-07-23 18:59:21-07	132
52332	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(value) #!ORIGINALprint(!BLANK) #blankvalue\\n"}	2019-07-23 18:59:59-07	42
52342	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value) #!ORIGINALprint(!BLANK) #blankvalue\\n"}	2019-07-23 19:00:00-07	42
52352	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n\\nThis"}	2019-07-23 19:00:20-07	132
52362	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(value of arr) #!ORIGINALprint(!BLANK) #blankvalue of arr\\n"}	2019-07-23 19:00:22-07	42
52372	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value of arr) #!ORIGINALprint(!BLANK) #blankvalue of arr\\n"}	2019-07-23 19:00:23-07	42
52382	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(value of arr) #!ORIGINALprint(!BLANK) #blankvalue of arr\\n"}	2019-07-23 19:00:28-07	42
52392	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value of arr) #!ORIGINALprint(!BLANK) #blankvalue of arr\\n"}	2019-07-23 19:00:30-07	42
52402	coding	demo	load		2019-07-23 19:00:38-07	132
52412	coding	demo	coding_keyup	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = \\n  print('The code is running! x =', x)\\n  return 2\\n\\nThis"}	2019-07-23 19:00:47-07	132
52422	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 8\\n  print('The code is running! x =', x)\\n  return 2\\n\\nThis"}	2019-07-23 19:01:32-07	132
52432	coding	demo	load		2019-07-23 19:01:33-07	132
52442	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 8\\n  print('The code is running! x =', x)\\n  return 2\\n\\nThis"}	2019-07-23 19:01:34-07	132
52452	coding	demo	load		2019-07-23 19:01:35-07	132
52462	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 8\\n  print('The code is running! x =', x)\\n  return 2\\n\\nThis"}	2019-07-23 19:01:36-07	132
52472	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value) #!ORIGINALprint(!BLANK) #blankvalue\\n"}	2019-07-23 19:01:44-07	42
52482	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value) #!ORIGINALprint(!BLANK) #blankvalue\\n"}	2019-07-23 20:08:49-07	42
52882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-23 20:51:11-07	602
52492	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:08:57-07	42
52502	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:08:59-07	42
52512	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:10:30-07	42
52522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:12:08-07	42
52532	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:12:23-07	42
52542	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:12:24-07	42
52552	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:14:29-07	42
52562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:15:44-07	42
52572	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:16:14-07	42
52582	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:16:16-07	42
52592	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(value is a character) #!ORIGINALprint(!BLANK) #blankvalue is a character\\n"}	2019-07-23 20:17:23-07	42
52602	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-23 20:19:16-07	42
52612	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint(hello this is me ) #!ORIGINALprint(!BLANK) #blankhello this is me \\n"}	2019-07-23 20:20:05-07	42
52622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(hello this is me) #!ORIGINALprint(!BLANK) #blankhello this is me\\n"}	2019-07-23 20:20:07-07	42
52632	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint(hello this is me) #!ORIGINALprint(!BLANK) #blankhello this is me\\n"}	2019-07-23 20:20:08-07	42
52642	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(hello this is me) #!ORIGINALprint(!BLANK) #blankhello this is me\\n"}	2019-07-23 20:20:31-07	42
52652	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(hello this is me) #!ORIGINALprint(!BLANK) #blankhello this is me\\n"}	2019-07-23 20:22:34-07	42
52662	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(so this is real life eh) #!ORIGINALprint(!BLANK) #blankso this is real life eh\\n"}	2019-07-23 20:24:49-07	42
52672	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint(hello testing) #!ORIGINALprint(!BLANK) #blankhello testing\\n"}	2019-07-23 20:25:21-07	42
52682	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(hello testing) #!ORIGINALprint(!BLANK) #blankhello testing\\n"}	2019-07-23 20:25:22-07	42
52692	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(hello testing) #!ORIGINALprint(!BLANK) #blankhello testing\\n"}	2019-07-23 20:27:36-07	42
52702	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(hello testing #!ORIGINALprint(!BLANK #blankhello testing\\n"}	2019-07-23 20:28:52-07	42
52712	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint(hello testing #!ORIGINALprint(!BLANK #blankhello testing\\n"}	2019-07-23 20:31:31-07	42
52722	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello testing #!ORIGINALprint(!BLANK #blankhello testing\\n"}	2019-07-23 20:31:39-07	42
52732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 20:33:08-07	592
52742	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint(hello this is a test #!ORIGINALprint(!BLANK #blankhello this is a test\\n"}	2019-07-23 20:33:40-07	592
52752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 20:35:56-07	2
52762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-07-23 20:37:40-07	2
52772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 20:40:18-07	2
52782	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 20:40:39-07	2
52792	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 20:41:21-07	2
52802	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  print(hello this is a test #!ORIGINALprint(!BLANK #blankhello this is a test\\n"}	2019-07-23 20:41:57-07	2
52812	multi	19s_algo_study/pre_test_comp	load		2019-07-23 20:42:51-07	2
52822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test #!ORIGINALprint(!BLANK #blankhello this is a test\\n"}	2019-07-23 20:43:03-07	2
52832	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello this is a test #!ORIGINALprint(!BLANK #blankhello this is a test\\n"}	2019-07-23 20:43:25-07	2
52842	multi	19s_algo_study/pre_test_comp	load		2019-07-23 20:45:48-07	2
52852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 20:46:38-07	602
52862	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 20:47:27-07	602
52872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 20:47:28-07	602
52892	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-23 20:54:17-07	602
52902	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 21:11:50-07	612
52912	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-23 21:11:51-07	612
52922	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-23 21:11:53-07	612
52932	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 21:12:01-07	612
52942	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 21:12:01-07	612
52952	multi	19sum_blank_pilots/topic_confidence	backup_submit	[]	2019-07-23 21:12:02-07	612
52962	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 21:12:02-07	612
52972	multi	19sum_blank_pilots/topic_confidence	backup_submit	[]	2019-07-23 21:12:02-07	612
52982	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-23 21:12:03-07	612
52992	multi	19sum_blank_pilots/topic_confidence	backup_submit	[]	2019-07-23 21:12:03-07	612
53002	coding	demo	load		2019-07-23 21:12:53-07	612
53012	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  x = 3\\n  print()\\n  return 2\\n"}	2019-07-23 21:16:19-07	612
53022	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  x = 3\\n  print()\\n  return 2\\n"}	2019-07-23 21:16:20-07	612
53032	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:20-07	612
53042	parsons	demo	drag	{"code":"def return_three():\\nx = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:25-07	612
53052	parsons	demo	drag	{"code":"def return_three():\\nx = 2\\nx = x + 1\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:27-07	612
53062	parsons	demo	move_on	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:29-07	612
53072	parsons	demo	unload	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:30-07	612
53082	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:31-07	612
53092	parsons	demo_blanks	drag	{"code":"def return_three():\\n   = 6\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:36-07	612
53102	parsons	demo_blanks	drag	{"code":"def return_three():\\n   = 6\\n  return  // 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:16:38-07	612
53112	parsons	demo_blanks	unload	{"code":"def return_three():\\n  x = 6\\n  return x // 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:17:20-07	612
53122	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:17:21-07	612
53132	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n"}	2019-07-23 21:17:34-07	612
53142	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\nreturn x\\n"}	2019-07-23 21:17:37-07	612
53152	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 21:17:40-07	612
53162	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 21:19:28-07	612
53172	multi	19sum_blank_pilots/pre_survey	load		2019-07-23 22:08:31-07	622
53182	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 22:08:59-07	612
53192	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":"solving recursion questions iteratively\\nruntime\\nsql\\n"},{"id":"recursion_problems","input":"interesting: tree problems\\nchallenging: complicated problems that's hard to  visualize"}]	2019-07-23 22:10:11-07	622
53202	multi	19sum_blank_pilots/topic_confidence	load		2019-07-23 22:10:12-07	622
53212	multi	19sum_blank_pilots/topic_confidence	backup_submit	[{"id":"cond_write_code","id-input":"cond_write_code-5_(very_able)"},{"id":"cond_read_code","id-input":"cond_read_code-4"},{"id":"cond_help_friend","id-input":"cond_help_friend-4"},{"id":"game_write_code","id-input":"game_write_code-4"},{"id":"game_read_code","id-input":"game_read_code-4"},{"id":"game_help_friend","id-input":"game_help_friend-4"}]	2019-07-23 22:12:11-07	622
53222	coding	demo	load		2019-07-23 22:12:13-07	622
53232	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 22:12:30-07	622
53242	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-23 22:12:30-07	622
53252	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 22:12:54-07	622
53262	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-23 22:12:54-07	622
53272	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 22:12:55-07	622
53282	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n"}	2019-07-23 22:13:09-07	622
53292	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n"}	2019-07-23 22:13:12-07	622
53302	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\nreturn x\\n"}	2019-07-23 22:13:14-07	622
54252	coding	19sum_blank_pilots/plusses	coding_keyup	{"code":"def max_odd_plus(n):\\n    "}	2019-07-23 22:31:18-07	622
53312	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 22:13:20-07	622
53322	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 22:13:22-07	622
53332	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 22:13:25-07	622
53342	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-23 22:13:26-07	622
53352	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 22:13:26-07	622
53362	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 22:13:58-07	622
53372	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-23 22:13:58-07	622
53382	multi	19sum_blank_pilots/start	load		2019-07-23 22:13:59-07	622
53392	multi	19sum_blank_pilots/start	submit	[]	2019-07-23 22:14:00-07	622
53402	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-23 22:14:00-07	622
53412	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-23 22:14:01-07	622
53422	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(x):\\n  return max(, )\\n"}	2019-07-23 22:16:59-07	622
53432	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(x):\\nif  == 0:\\n  return max(, )\\n"}	2019-07-23 22:17:06-07	622
53442	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(x):\\n  if x == 0:\\n        return 0\\n  return max(, )\\n"}	2019-07-23 22:17:18-07	622
53452	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n     =  + n % 10\\n  return max(, )\\n"}	2019-07-23 22:18:04-07	622
53462	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n = max_odd_plus( // 100)\\n  return max(, )\\n"}	2019-07-23 22:18:49-07	622
53472	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n = max_odd_plus( // 10)\\n = max_odd_plus( // 100)\\n  return max(, )\\n"}	2019-07-23 22:18:51-07	622
53482	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n       =  + n % 100\\n  x = max_odd_plus( // 10)\\n  y = max_odd_plus( // 100)\\n  return max(x, y)\\n"}	2019-07-23 22:19:08-07	622
53492	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  x = max_odd_plus( // 10)\\n       =  + n % 100\\n  y = max_odd_plus( // 100)\\n  return max(x, y)\\n"}	2019-07-23 22:19:16-07	622
53502	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  x = max_odd_plus( // 10)\\n  one =  + n % 100\\n  y = max_odd_plus( // 100)\\n   =  + n % 10\\n  return max(x, y)\\n"}	2019-07-23 22:19:25-07	622
53512	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  x = max_odd_plus( // 10)\\n  y = max_odd_plus( // 100)\\n  one =  + n % 100\\n   =  + n % 10\\n  return max(x, y)\\n"}	2019-07-23 22:19:26-07	622
53522	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\nif %2 == 1:\\n  x = max_odd_plus(n // 10)\\n  y = max_odd_plus(n // 100)\\n  one = y + n % 100\\n  two = x + n % 10\\n  return max(one, two)\\n"}	2019-07-23 22:21:09-07	622
53532	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  x = max_odd_plus(n // 10)\\n  y = max_odd_plus(n // 100)\\n  if %2 == 1:\\n  one = y + n % 100\\n  two = x + n % 10\\n  return max(one, two)\\n"}	2019-07-23 22:21:16-07	622
53542	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  x = max_odd_plus(n // 10)\\n  y = max_odd_plus(n // 100)\\n  if y%2 == 1:\\n    one = y + n % 100\\n    two = x + n % 10\\n  return max(one, two)\\n"}	2019-07-23 22:22:08-07	622
53552	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if y%2 == 1:\\n  if n == 0:\\n    return 0\\n  y = max_odd_plus(n // 100)\\n  x = max_odd_plus(n // 10)\\n    one = y + n % 100\\n    two = x + n % 10\\n  return max(one, two)\\n"}	2019-07-23 22:23:09-07	622
53562	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n%2 == 1:\\n  y = max_odd_plus(n // 100)\\n  if n == 0:\\n    return 0\\n  x = max_odd_plus(n // 10)\\n    one = y + n % 100\\n    two = x + n % 10\\n  return max(one, two)\\n"}	2019-07-23 22:23:16-07	622
53572	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n%2 == 1:\\n    y = max_odd_plus(n // 100)\\n  x = max_odd_plus(n // 10)\\n  if n == 0:\\n    return 0\\n    one = y + n % 100\\n    two = x + n % 10\\n  return max(one, two)\\n"}	2019-07-23 22:23:18-07	622
53582	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n%2 == 1:\\n    y = max_odd_plus(n // 100)\\n    x = max_odd_plus(n // 10)\\n  return max(one, two)\\n  if n == 0:\\n    return 0\\n    one = y + n % 100\\n    two = x + n % 10\\n"}	2019-07-23 22:23:20-07	622
53592	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n%2 == 1:\\n    y = max_odd_plus(n // 100)\\n    x = max_odd_plus(n // 10)\\n    one = y + n % 100\\n    return max(one, two)\\n  if n == 0:\\n    return 0\\n    two = x + n % 10\\n"}	2019-07-23 22:23:35-07	622
53602	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n%2 == 1:\\n    y = max_odd_plus(n // 100)\\n    x = max_odd_plus(n // 10)\\n    one = y + n % 100\\n    two = x + n % 10\\n    return max(one, two)\\n  if n == 0:\\n    return 0\\n"}	2019-07-23 22:23:37-07	622
53612	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    y = max_odd_plus(n // 100)\\n    x = max_odd_plus(n // 10)\\n    if n%2 == 1:\\n      y = y + n % 100\\n      x = x + n % 10\\n    return max(x, y)\\n    return 0\\n"}	2019-07-23 22:25:01-07	622
53622	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n    y = max_odd_plus(n // 100)\\n    x = max_odd_plus(n // 10)\\n    if n%2 == 1:\\n      y = y + n % 100\\n      x = x + n % 10\\n    return max(x, y)\\n"}	2019-07-23 22:25:02-07	622
53632	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  y = max_odd_plus(n // 100)\\n  x = max_odd_plus(n // 10)\\n  if n%2 == 1:\\n    y = y + n % 100\\n    x = x + n % 10\\n  return max(x, y)\\n"}	2019-07-23 22:25:10-07	622
53642	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  y = max_odd_plus(n // 100)\\n  x = max_odd_plus(n // 10)\\n  if n%2 == 1:\\n    y = y + n % 100\\n    x = x + n % 10\\n  return max(x, y)\\n"}	2019-07-23 22:25:23-07	622
53652	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  y = max_odd_plus(n // 100)\\n  x = max_odd_plus(n // 10)\\n  if n%2 == 1:\\n    y = y + n % 100\\n    x = x + n % 10\\n  return max(x, y)\\n"}	2019-07-23 22:25:23-07	622
53662	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-23 22:25:24-07	622
53672	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-3"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 22:26:22-07	622
53682	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-3"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 22:26:23-07	622
53692	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz():\\n"}	2019-07-23 22:27:03-07	622
53702	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n        for  in range(1, +1):\\n"}	2019-07-23 22:27:49-07	622
53712	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  for i in range(1, n+1):\\n                    if  % 15 == 0:\\n"}	2019-07-23 22:28:05-07	622
53722	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  for i in range(1, n+1):\\n"}	2019-07-23 22:28:08-07	622
53732	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  for i in range(1, n+1):\\n  if  % 15 == 0:\\n"}	2019-07-23 22:28:11-07	622
53742	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n          result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n"}	2019-07-23 22:28:19-07	622
53752	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n                              result.append(\\"fizzbuzz\\")\\n"}	2019-07-23 22:28:29-07	622
53762	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n                    elif  % 5 == 0:\\n"}	2019-07-23 22:28:40-07	622
53772	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n"}	2019-07-23 22:28:42-07	622
53782	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n  elif  % 5 == 0:\\n"}	2019-07-23 22:28:47-07	622
53792	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n                            result.append(\\"buzz\\")\\n"}	2019-07-23 22:28:58-07	622
53802	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n                    elif  % 3 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n"}	2019-07-23 22:29:06-07	622
53812	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n                    elif  % 3 == 0:\\n      result.append(\\"fizzbuzz\\")\\n      result.append(\\"buzz\\")\\n"}	2019-07-23 22:29:09-07	622
53822	\N	\N	\N	\N	2019-07-23 22:29:09-07	\N
53832	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n      result.append(\\"buzz\\")\\n"}	2019-07-23 22:29:15-07	622
53842	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n"}	2019-07-23 22:29:16-07	622
53852	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n  elif n % 5 == 0:\\n"}	2019-07-23 22:29:22-07	622
53862	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n    result.append(\\"buzz\\")\\n"}	2019-07-23 22:29:37-07	622
53872	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n"}	2019-07-23 22:29:43-07	622
53882	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz():\\n"}	2019-07-23 22:29:47-07	2
53892	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n                          result.append(\\"fizz\\")\\n"}	2019-07-23 22:29:51-07	622
53902	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n      result.append(\\"fizz\\")\\n                  else:\\n"}	2019-07-23 22:29:57-07	622
53912	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n        result = []\\n"}	2019-07-23 22:29:58-07	2
53922	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n      result.append(\\"fizz\\")\\n"}	2019-07-23 22:29:59-07	622
53932	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n          for  in range(1, +1):\\n"}	2019-07-23 22:30:02-07	2
53942	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n      result.append(\\"fizz\\")\\n  else:\\n"}	2019-07-23 22:30:03-07	622
53952	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n                              result.append()\\n"}	2019-07-23 22:30:09-07	622
53962	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n                  if  % 15 == 0:\\n"}	2019-07-23 22:30:11-07	2
57492	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 22:27:28-07	2
53972	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n"}	2019-07-23 22:30:13-07	2
53982	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n  if  % 15 == 0:\\n"}	2019-07-23 22:30:16-07	2
53992	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n                  elif  % 5 == 0:\\n"}	2019-07-23 22:30:20-07	2
54002	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n      result.append(\\"fizz\\")\\n          return result\\n    else:\\n      result.append(i)\\n"}	2019-07-23 22:30:20-07	622
54012	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n          return result\\n"}	2019-07-23 22:30:22-07	622
54022	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n"}	2019-07-23 22:30:23-07	2
54032	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif n % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif n % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-23 22:30:24-07	622
54042	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\nelif  % 5 == 0:\\n"}	2019-07-23 22:30:25-07	2
54052	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n                          result.append(\\"buzz\\")\\n"}	2019-07-23 22:30:32-07	2
54062	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-23 22:30:39-07	622
54072	parsons	19s_algo_study/fizz_buzz_blanks	move_on	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-23 22:30:43-07	622
54082	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-23 22:30:44-07	622
54092	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-23 22:30:44-07	622
54102	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:30:49-07	2
54112	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n"}	2019-07-23 22:30:50-07	2
54122	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n"}	2019-07-23 22:30:53-07	2
54132	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n                        result.append()\\n"}	2019-07-23 22:30:55-07	2
54142	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"complex","id-input":"complex-1_(not_at_all_complex)"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-3"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-2"}]	2019-07-23 22:31:03-07	622
54152	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"complex","id-input":"complex-1_(not_at_all_complex)"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-3"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-2"}]	2019-07-23 22:31:03-07	622
54162	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n          return result\\n"}	2019-07-23 22:31:04-07	2
54172	coding	19sum_blank_pilots/plusses	load		2019-07-23 22:31:05-07	622
54182	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n                  else:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:11-07	2
54192	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:31:12-07	602
54202	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:13-07	2
54212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:31:13-07	602
54222	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\nelse:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:15-07	2
54232	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:16-07	2
54242	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n      else:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:17-07	2
54262	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:18-07	2
54272	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n                        result.append(\\"fizzbuzz\\")\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:19-07	2
54282	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:22-07	2
54292	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\nresult.append(\\"fizzbuzz\\")\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:53-07	2
54302	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:54-07	2
54312	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz():\\n  result = []\\n  for  in range(1, +1):\\n    if  % 15 == 0:\\n  elif  % 5 == 0:\\n    result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    result.append()\\n  return result\\n"}	2019-07-23 22:31:55-07	2
54322	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz():\\n"}	2019-07-23 22:31:56-07	2
54332	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"              elif  % 3 == 0:\\ndef fizz_buzz():\\n"}	2019-07-23 22:32:11-07	2
54342	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"              elif  % 3 == 0:\\ndef fizz_buzz():\\n                  else:\\n"}	2019-07-23 22:32:28-07	2
54352	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"              elif  % 3 == 0:\\ndef fizz_buzz():\\n                  else:\\n"}	2019-07-23 22:32:39-07	2
54362	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz():\\n"}	2019-07-23 22:32:40-07	2
54372	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    x = max_odd_plus(n//10)\\n    y = max_odd_plus(n//100)\\n    if n % 10 == 1:\\n        x = x + n  % 10\\n        y = y + n % 100\\n    return max(x, y)"}	2019-07-23 22:33:05-07	622
54382	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1529)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-07-23 22:33:05-07	622
54392	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:33:18-07	602
54402	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:33:46-07	2
54412	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:33:48-07	2
54422	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:33:50-07	2
54432	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:33:53-07	2
54442	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:33:56-07	2
54452	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:33:58-07	2
54462	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                        result.append()\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:34:00-07	2
54472	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                        result.append(\\"buzz\\")\\n                        result.append()\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:34:03-07	2
54482	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                      result.append(\\"fizz\\")\\n                        result.append(\\"buzz\\")\\n                        result.append()\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:34:05-07	2
54492	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:34:07-07	602
54502	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                      result.append(\\"fizzbuzz\\")\\n                      result.append(\\"fizz\\")\\n                        result.append(\\"buzz\\")\\n                        result.append()\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:34:08-07	2
54512	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:34:09-07	602
55242	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:23:04-07	2
54522	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                      result.append(\\"fizz\\")\\n                        result.append(\\"buzz\\")\\n                        result.append()\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:34:17-07	2
54532	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                        result.append(\\"buzz\\")\\n                        result.append()\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:34:18-07	2
54542	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz():\\n                        result.append()\\n        result = []\\n                if  % 15 == 0:\\n      for  in range(1, +1):\\n              else:\\n                elif  % 5 == 0:\\n                elif  % 3 == 0:\\n"}	2019-07-23 22:34:20-07	2
54552	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:34:48-07	602
54562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:34:49-07	602
54572	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz():\\n"}	2019-07-23 22:35:29-07	2
54582	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"elif  % 3 == 0:\\ndef fizz_buzz():\\n"}	2019-07-23 22:35:31-07	2
54592	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"elif  % 5 == 0:\\nelif  % 3 == 0:\\ndef fizz_buzz():\\n"}	2019-07-23 22:35:32-07	2
54602	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    x = max_odd_plus(n//10)\\n    y = max_odd_plus(n//100)\\n    if n % 10 == 1:\\n        x = x + n  % 10\\n        y = y + n % 100\\n        print(x)\\n        print(y)\\n    return max(x, y)"}	2019-07-23 22:35:33-07	622
54612	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1529)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>1\n1\n1\n1\n1\n1\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>1\n1\n1\n1\n1\n1\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>1\n1\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /><span class="msg">Print Output: <pre>1\n81\n</pre></span></div>	2019-07-23 22:35:34-07	622
54622	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"elif  % 5 == 0:\\nelif  % 3 == 0:\\ndef fizz_buzz():\\n      else:\\n"}	2019-07-23 22:35:35-07	2
54632	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"elif  % 5 == 0:\\nelif  % 3 == 0:\\ndef fizz_buzz():\\n      else:\\n"}	2019-07-23 22:35:36-07	2
54642	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:35:47-07	602
54652	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-23 22:35:48-07	602
54662	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    x = max_odd_plus(n//10)\\n    y = max_odd_plus(n//100)\\n    if n % 10 == 1:\\n        x = x + (n  % 10)\\n        y = y + (n % 100)\\n        print(x)\\n        print(y)\\n    return max(x, y)"}	2019-07-23 22:36:22-07	622
54672	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1529)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>1\n1\n1\n1\n1\n1\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>1\n1\n1\n1\n1\n1\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>1\n1\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /><span class="msg">Print Output: <pre>1\n81\n</pre></span></div>	2019-07-23 22:36:22-07	622
54872	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-4"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 22:45:56-07	622
54882	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-23 22:45:57-07	622
54892	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n"}	2019-07-23 22:46:10-07	622
54902	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nsingle_digit = max_odd_plus(n // 10)\\n"}	2019-07-23 22:46:18-07	622
54912	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n"}	2019-07-23 22:46:19-07	622
54922	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nif n == 0:\\n"}	2019-07-23 22:46:22-07	622
54932	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n        return 0\\n"}	2019-07-23 22:46:26-07	622
54942	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\nsingle_digit = max_odd_plus(n // 10)\\n"}	2019-07-23 22:46:46-07	622
54952	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\nsingle_digit = max_odd_plus(n // 10)\\ndouble_digit = max_odd_plus(n // 100)\\n"}	2019-07-23 22:46:53-07	622
54682	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1529)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>29\n29\n29\n29\n29\n29\n1\n1\n29\n29\n29\n29\n1\n1\n29\n29\n29\n29\n1\n1\n29\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>29\n29\n29\n29\n29\n29\n1\n1\n29\n29\n29\n29\n1\n1\n29\n29\n29\n29\n1\n1\n29\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n1\n1\n29\n29\n29\n29\n29\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n...\n29\n29\n29\n29\n29\n29\n29\n29\n29\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /><span class="msg">Print Output: <pre>29\n29\n29\n29\n29\n29\n29\n29\n29\n29\n1\n81\n29\n29\n29\n29\n29\n</pre></span></div>	2019-07-23 22:37:55-07	622
54692	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n    print (1529 //10)\\n    if n == 0:\\n        return 0\\n    x = max_odd_plus(n//10)\\n    y = max_odd_plus(n//100)\\n    if n % 10 == 1:\\n        x = x + (n  % 10)\\n        y = y + (n % 100)\\n        print(x)\\n        print(y)\\n    return max(x, y)"}	2019-07-23 22:38:08-07	622
54702	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1529)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>152\n152\n152\n152\n152\n152\n1\n1\n152\n152\n152\n152\n1\n1\n152\n152\n152\n152\n1\n1\n152\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_odd_plus(1953)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>152\n152\n152\n152\n152\n152\n1\n1\n152\n152\n152\n152\n1\n1\n152\n152\n152\n152\n1\n1\n152\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n1\n1\n152\n152\n152\n152\n152\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n...\n152\n152\n152\n152\n152\n152\n152\n152\n152\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /><span class="msg">Print Output: <pre>152\n152\n152\n152\n152\n152\n152\n152\n152\n152\n1\n81\n152\n152\n152\n152\n152\n</pre></span></div>	2019-07-23 22:38:08-07	622
54712	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n    if n == 0:\\n        return 0\\n    x = max_odd_plus(n//10)\\n    y = max_odd_plus(n//100)\\n    if n % 10 == 1:\\n        x = x + (n  % 10)\\n        y = y + (n % 100)\\n        print(x)\\n        print(y)\\n    return max(x, y)"}	2019-07-23 22:39:34-07	622
54722	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-23 22:39:35-07	622
54732	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-1_(not_at_all_enhanced)"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-2"}]	2019-07-23 22:40:05-07	622
54742	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-1_(not_at_all_enhanced)"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-2"}]	2019-07-23 22:40:05-07	622
54752	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-23 22:40:06-07	622
54762	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, a, b):\\n  if  == 1 or  == 2:\\n"}	2019-07-23 22:42:55-07	622
54772	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n  return \\n"}	2019-07-23 22:43:06-07	622
54782	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n    return a\\nif coin_winner(-1, , ) ==  or coin_winner(-2, , ) == :\\n"}	2019-07-23 22:43:29-07	622
54792	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n    return a\\n  if coin_winner(-1, , ) ==  or coin_winner(-2, , ) == :\\n    return \\n"}	2019-07-23 22:43:42-07	622
54802	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n    return a\\n  if coin_winner(-1, , ) ==  or coin_winner(-2, , ) == :\\nelse:\\n    return \\n"}	2019-07-23 22:43:45-07	622
54812	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n    return a\\n  if coin_winner(-1, , ) ==  or coin_winner(-2, , ) == :\\n    return \\nelse:\\n"}	2019-07-23 22:43:47-07	622
54822	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n    return a\\n  if coin_winner(-1, , ) ==  or coin_winner(-2, , ) == :\\n    return \\n  else:\\n    return \\n"}	2019-07-23 22:43:50-07	622
54832	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n    return a\\n  if coin_winner(n-1, b, a) == a or coin_winner(n-2, b, a) == a:\\n    return a\\n  else:\\n    return b\\n"}	2019-07-23 22:45:42-07	622
54842	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(n, a, b):\\n  if n == 1 or n == 2:\\n    return a\\n  if coin_winner(n-1, b, a) == a or coin_winner(n-2, b, a) == a:\\n    return a\\n  else:\\n    return b\\n"}	2019-07-23 22:45:43-07	622
54852	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-23 22:45:43-07	622
54862	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-4"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 22:45:55-07	622
54962	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\nsingle_digit = max_odd_plus(n // 10)\\ndouble_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n"}	2019-07-23 22:46:58-07	622
54972	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n      double_digit = double_digit + n % 100\\n"}	2019-07-23 22:47:16-07	622
54982	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit = double_digit + n % 100\\n        single_digit = single_digit + n % 10\\n"}	2019-07-23 22:47:18-07	622
54992	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit = double_digit + n % 100\\n    single_digit = single_digit + n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 22:47:23-07	622
55002	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit = double_digit + n % 100\\n    single_digit = single_digit + n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 22:47:26-07	622
55012	parsons	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit = double_digit + n % 100\\n    single_digit = single_digit + n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 22:47:29-07	622
55022	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit = double_digit + n % 100\\n    single_digit = single_digit + n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-23 22:47:29-07	622
55032	multi	19sum_blank_pilots/conf_cog_survey_5	load		2019-07-23 22:47:29-07	622
55042	multi	19sum_blank_pilots/conf_cog_survey_5	submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-4"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 22:47:46-07	622
55052	multi	19sum_blank_pilots/conf_cog_survey_5	backup_submit	[{"id":"complex","id-input":"complex-2"},{"id":"instructions_ineffective","id-input":"instructions_ineffective-1_(very_effective)"},{"id":"understanding_topic","id-input":"understanding_topic-4"},{"id":"interface_understanding_topic","id-input":"interface_understanding_topic-4"}]	2019-07-23 22:47:46-07	622
55062	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-23 22:47:47-07	622
55072	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"cond_write_code","id-input":"cond_write_code-5_(very_able)"},{"id":"cond_read_code","id-input":"cond_read_code-5_(very_able)"},{"id":"cond_help_friend","id-input":"cond_help_friend-5_(very_able)"},{"id":"cond_conf","id-input":"cond_conf-4"},{"id":"game_write_code","id-input":"game_write_code-5_(very_able)"},{"id":"game_read_code","id-input":"game_read_code-5_(very_able)"},{"id":"game_help_friend","id-input":"game_help_friend-5_(very_able)"},{"id":"game_conf","id-input":"game_conf-4"},{"id":"cond_conf_inp","input":"i see myself being able to complete problems similar to this"},{"id":"game_conf_inp","input":"more confident because  able to solve this problem and can see problems similar approach to this"}]	2019-07-23 22:50:14-07	622
55082	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-23 22:51:00-07	622
55092	multi	19sum_blank_pilots/post_survey_pt_2	backup_submit	[{"id":"learn_best_choice","id-input":"learn_best_choice-Code_Writing"},{"id":"learn_worst_choice","id-input":"learn_worst_choice-Code_Arrangement_with_Blanks"},{"id":"review_best_choice","id-input":"review_best_choice-Code_Arrangement"},{"id":"review_worst_choice","id-input":"review_worst_choice-Code_Arrangement_with_Blanks"},{"id":"gender","id-input":"gender-Female"},{"id":"year","id-input":"year-Third_Year_(Undergrad)"},{"id":"program","id-input":"program-L&S"},{"id":"learn_best","input":"able to  internalize, experiment with different approaches"},{"id":"learn_worst","input":"confusing, unnessesary"},{"id":"review_best","input":"fast, reinforcing"},{"id":"review_worst","input":"unnessesary, more tiem consuming versus benefits"},{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":"cs10"},{"id":"think","input":"yes, \\nfor the parsons with blank, I had more self-doubt because i wan't  confident that solutions is same with my personal way of solving it. versus parsons, I know what the code is already doing for each line in terms of big picture. Coding, there is more freedom but less confidence as well"},{"id":"combo_use","input":"first  parsons with  blanks then parsons then coding would be most effective. "},{"id":"general_use","input":"during labs, \\nmaybe exams if it is the most efficient solution.\\ngames (in class activity)"}]	2019-07-23 22:59:23-07	622
55102	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:19:52-07	2
55112	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:19:54-07	2
55122	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:20:42-07	2
55132	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:20:43-07	2
55142	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:20:44-07	2
55152	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:20:45-07	2
55162	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:21:42-07	2
55172	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:21:43-07	2
55182	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:21:53-07	2
55192	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:21:54-07	2
55202	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:22:25-07	2
55212	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:22:27-07	2
55222	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:23:02-07	2
55232	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:23:03-07	2
55252	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:23:06-07	2
55262	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:23:27-07	2
55272	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-23 23:23:28-07	2
55282	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 23:33:22-07	632
55292	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(this is a test) #!ORIGINALprint(!BLANK) #blankthis is a test\\n"}	2019-07-23 23:33:34-07	632
55302	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(this is a test) #!ORIGINALprint(!BLANK) #blankthis is a test\\n"}	2019-07-23 23:33:53-07	632
55312	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 23:34:09-07	642
55322	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(this is a test #!ORIGINALprint(!BLANK #blankthis is a test\\n"}	2019-07-23 23:34:33-07	642
55332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 23:35:37-07	672
55342	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(this is a test) #!ORIGINALprint(!BLANK) #blankthis is a test\\n"}	2019-07-23 23:39:37-07	632
55352	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 23:39:44-07	672
55362	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 23:39:48-07	672
55372	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-23 23:39:50-07	672
55382	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(this is an example of a test) #!ORIGINALprint(!BLANK) #blankthis is an example of a test\\n"}	2019-07-23 23:40:14-07	672
55392	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(this is an example of a test) #!ORIGINALprint(!BLANK) #blankthis is an example of a test\\n"}	2019-07-23 23:40:15-07	672
55402	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-23 23:40:48-07	672
55412	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-23 23:40:49-07	672
55422	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 00:13:06-07	2
55432	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 00:13:38-07	2
55442	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 00:13:39-07	2
55452	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 00:14:28-07	2
55462	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-24 00:15:20-07	2
55472	coding	19sum_blank_pilots/mario_1	unload	{"code":"def mario(mario_map):\\n    if len(mario_map) <= 1:\\n      return int(mario_map == [1])\\n    if mario_map[0] == 0:\\n      return 0\\n    return mario(mario_map[1:]) + mario(mario_map[2:])"}	2019-07-24 00:15:21-07	2
55482	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 00:15:24-07	2
55492	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 00:15:24-07	2
55502	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 00:15:25-07	2
55512	coding	19sum_blank_pilots/mario_1	load		2019-07-24 00:18:01-07	222
55522	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-24 00:18:02-07	222
55532	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-24 00:20:11-07	222
55542	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-24 00:20:12-07	222
55552	multi	19sum_blank_pilots/topic_confidence	load		2019-07-24 00:20:12-07	222
55562	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-24 00:20:13-07	222
55572	multi	19sum_blank_pilots/topic_confidence	backup_submit	[]	2019-07-24 00:20:13-07	222
55582	coding	demo	load		2019-07-24 00:20:14-07	222
55592	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-24 00:20:15-07	222
55602	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-24 00:20:15-07	222
55612	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-24 00:20:16-07	222
55622	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-24 00:20:17-07	222
55632	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 00:20:17-07	222
55642	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:20:33-07	672
55652	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 00:22:06-07	222
55662	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 00:22:07-07	222
55672	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 00:22:08-07	222
55682	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 00:22:09-07	222
55692	multi	19sum_blank_pilots/start	load		2019-07-24 00:22:09-07	222
55702	multi	19sum_blank_pilots/start	submit	[]	2019-07-24 00:22:10-07	222
55712	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-24 00:22:10-07	222
55732	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":""}	2019-07-24 00:22:15-07	222
55742	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":""}	2019-07-24 00:22:15-07	222
55752	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-24 00:22:15-07	222
55762	multi	19sum_blank_pilots/conf_cog_survey	submit	[]	2019-07-24 00:22:16-07	222
55772	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[]	2019-07-24 00:22:16-07	222
55782	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz():\\n"}	2019-07-24 00:22:17-07	222
55792	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz():\\n"}	2019-07-24 00:22:18-07	222
55802	parsons	19s_algo_study/fizz_buzz_blanks	move_on	{"code":"def fizz_buzz():\\n"}	2019-07-24 00:22:19-07	222
55812	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz():\\n"}	2019-07-24 00:22:19-07	222
55822	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-24 00:22:20-07	222
55832	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[]	2019-07-24 00:22:22-07	222
55842	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[]	2019-07-24 00:22:22-07	222
55852	coding	19sum_blank_pilots/plusses	load		2019-07-24 00:22:23-07	222
55862	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-24 00:22:25-07	222
55872	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-24 00:22:26-07	222
55882	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-24 00:22:26-07	222
55892	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[]	2019-07-24 00:22:27-07	222
55902	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[]	2019-07-24 00:22:27-07	222
55912	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 00:22:28-07	222
55922	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":""}	2019-07-24 00:22:29-07	222
55932	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 00:22:30-07	222
55942	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-24 00:22:30-07	222
55952	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[]	2019-07-24 00:22:31-07	222
55962	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[]	2019-07-24 00:22:31-07	222
55972	parsons	19sum_blank_pilots/plusses	load	{"code":""}	2019-07-24 00:22:32-07	222
55982	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n"}	2019-07-24 00:22:43-07	222
55992	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\ndouble_digit = max_odd_plus(n // 100)\\n"}	2019-07-24 00:22:46-07	222
56002	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\ndouble_digit = max_odd_plus(n // 100)\\n    double_digit = double_digit + n % 100\\n"}	2019-07-24 00:22:47-07	222
56012	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nsingle_digit = max_odd_plus(n // 10)\\ndouble_digit = max_odd_plus(n // 100)\\ndouble_digit = double_digit + n % 100\\n"}	2019-07-24 00:22:52-07	222
56022	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nsingle_digit = max_odd_plus(n // 10)\\ndouble_digit = max_odd_plus(n // 100)\\n    single_digit = single_digit + n % 10\\ndouble_digit = double_digit + n % 100\\n"}	2019-07-24 00:22:54-07	222
56032	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nif n == 0:\\nsingle_digit = max_odd_plus(n // 10)\\ndouble_digit = max_odd_plus(n // 100)\\nsingle_digit = single_digit + n % 10\\ndouble_digit = double_digit + n % 100\\n"}	2019-07-24 00:23:05-07	222
56042	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nif n == 0:\\n    return 0\\nsingle_digit = max_odd_plus(n // 10)\\ndouble_digit = max_odd_plus(n // 100)\\nsingle_digit = single_digit + n % 10\\ndouble_digit = double_digit + n % 100\\n"}	2019-07-24 00:23:08-07	222
56052	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  single_digit = single_digit + n % 10\\n  double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-24 00:23:16-07	222
56062	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:23:22-07	672
56072	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:23:31-07	672
56082	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  single_digit = single_digit + n % 10\\n  double_digit = double_digit + n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-24 00:23:31-07	222
56092	parsons	19sum_blank_pilots/coin_game	load	{"code":""}	2019-07-24 00:23:32-07	222
56102	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, starting_player, other_player):\\n"}	2019-07-24 00:23:35-07	222
56112	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, starting_player, other_player):\\nif n == 1 or n == 2:\\n"}	2019-07-24 00:23:38-07	222
56122	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, starting_player, other_player):\\n  if n == 1 or n == 2:\\n    return starting_player\\n"}	2019-07-24 00:23:42-07	222
56132	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, starting_player, other_player):\\n  if n == 1 or n == 2:\\n    return starting_player\\n  if coin_winner(n-1, other_player, starting_player) == starting_player or coin_game(n-2, other_player, starting_player) == starting_player:\\n"}	2019-07-24 00:23:45-07	222
56142	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, starting_player, other_player):\\n  if n == 1 or n == 2:\\n    return starting_player\\n  if coin_winner(n-1, other_player, starting_player) == starting_player or coin_game(n-2, other_player, starting_player) == starting_player:\\n  else:\\n"}	2019-07-24 00:23:48-07	222
56152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(this is a test) #!ORIGINALprint(!BLANK) #blankthis is a test\\n"}	2019-07-24 00:51:28-07	632
56162	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(this is a test) #!ORIGINALprint(!BLANK) #blankthis is a test\\n"}	2019-07-24 00:51:36-07	632
56172	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:51:41-07	672
56182	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:51:42-07	672
56192	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:51:58-07	672
56202	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:52:29-07	672
56212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:52:30-07	672
56222	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:52:40-07	672
56232	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:52:51-07	672
56242	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:52:53-07	672
56252	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:57:22-07	672
56262	solution	19s_algo_study/binary_search_1	load		2019-07-24 00:57:23-07	672
56272	coding	19s_algo_study/dfs_all_paths	load		2019-07-24 00:58:53-07	672
56282	coding	19s_algo_study/dfs_all_paths	submit	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-07-24 00:58:58-07	672
56292	coding	19s_algo_study/dfs_all_paths	results	<div class="testcase error"><span class="msg">Error connecting to Redis server. Contact someone!</span></div>	2019-07-24 00:58:58-07	672
56302	coding	19s_algo_study/dfs_all_paths	unload	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-07-24 00:59:09-07	672
56312	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 00:59:18-07	672
56322	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(test) #!ORIGINALprint(!BLANK) #blanktest\\n"}	2019-07-24 01:00:01-07	672
56332	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-24 01:00:08-07	222
56342	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-24 01:00:09-07	222
56352	multi	19sum_blank_pilots/topic_confidence	load		2019-07-24 01:00:09-07	222
56362	multi	19sum_blank_pilots/topic_confidence	backup_submit	[]	2019-07-24 01:01:04-07	222
56372	multi	19sum_blank_pilots/topic_confidence	submit	[]	2019-07-24 01:01:05-07	222
56382	coding	demo	load		2019-07-24 01:01:05-07	222
56392	coding	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:07-07	222
56402	coding	demo	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected EOF while parsing (<string>, line 3)</span><br /></div>	2019-07-24 01:01:07-07	222
56412	coding	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:08-07	222
56422	coding	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:08-07	222
56432	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:09-07	222
56442	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:10-07	222
56452	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:10-07	222
56462	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:11-07	222
56472	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:12-07	222
56482	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 01:01:12-07	222
56492	multi	19sum_blank_pilots/start	load		2019-07-24 01:01:13-07	222
56502	multi	19sum_blank_pilots/start	submit	[]	2019-07-24 01:01:13-07	222
56512	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-24 01:01:14-07	222
56522	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-24 01:01:14-07	222
56532	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":""}	2019-07-24 01:01:17-07	222
56542	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":""}	2019-07-24 01:01:17-07	222
56552	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-24 01:01:18-07	222
56562	multi	19sum_blank_pilots/conf_cog_survey	submit	[]	2019-07-24 01:01:54-07	222
56572	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[]	2019-07-24 01:01:55-07	222
56582	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz():\\n"}	2019-07-24 01:01:55-07	222
56592	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz():\\n"}	2019-07-24 01:01:56-07	222
56602	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-24 01:01:56-07	222
56612	multi	19sum_blank_pilots/conf_cog_survey_5	load		2019-07-24 01:01:59-07	222
56622	multi	19sum_blank_pilots/conf_cog_survey_5	submit	[]	2019-07-24 01:02:00-07	222
56632	multi	19sum_blank_pilots/conf_cog_survey_5	backup_submit	[]	2019-07-24 01:02:01-07	222
56642	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 01:02:24-07	222
56652	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"cond_conf_inp","input":""}]	2019-07-24 01:03:32-07	222
56662	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-24 01:03:33-07	222
56672	coding	19sum_blank_pilots/mario_1	unload	{"code":"def mario(mario_map):\\n"}	2019-07-24 01:05:47-07	222
56682	multi	19sum_blank_pilots/topic_confidence	load		2019-07-24 01:06:23-07	222
56692	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:06:32-07	222
56702	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:06:37-07	222
56712	coding	19sum_blank_pilots/coin_game_blanks	load		2019-07-24 01:08:21-07	222
56722	coding	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-24 01:08:23-07	222
56732	coding	19sum_blank_pilots/coin_game_blanks	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected EOF while parsing (<string>, line 2)</span><br /></div>	2019-07-24 01:08:24-07	222
57502	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 22:27:56-07	2
56742	coding	19sum_blank_pilots/coin_game_blanks	coding_keyup	{"code":"def coin_winner(n, current_player, other_player):\\n    "}	2019-07-24 01:08:38-07	222
56752	coding	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(n, current_player, other_player):\\n    return"}	2019-07-24 01:08:40-07	222
56762	coding	19sum_blank_pilots/coin_game_blanks	results	<div class="testcase fail"><span class="msg">Calling function <code>coin_winner(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>None</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>None</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>None</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>None</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>None</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>None</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>None</code></span> <br /></div>	2019-07-24 01:08:41-07	222
56772	coding	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n    return"}	2019-07-24 01:09:17-07	222
56782	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:09:18-07	222
56792	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:10:09-07	222
56802	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:10:10-07	222
56812	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:10:11-07	222
56822	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:10:15-07	222
56832	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:10:16-07	222
56842	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:10:42-07	222
56852	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:10:43-07	222
56862	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:11:22-07	222
56872	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:11:23-07	222
56882	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:11:32-07	222
56892	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:11:33-07	222
56902	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:11:37-07	222
56912	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:11:38-07	222
56922	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-24 01:11:48-07	222
56932	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:11:50-07	222
56942	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"if coin_winner(-1, , ) ==  or coin_winner(-2, , ) == :\\n"}	2019-07-24 01:12:29-07	222
56952	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":""}	2019-07-24 01:12:32-07	222
56962	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:14:20-07	222
56972	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n"}	2019-07-24 01:14:38-07	222
56982	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n"}	2019-07-24 01:14:46-07	222
56992	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n      return \\n"}	2019-07-24 01:14:48-07	222
57002	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n    return \\n   = coin_winner(-1, , )\\n"}	2019-07-24 01:14:53-07	222
57012	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n    return \\n   = coin_winner(-1, , )\\n   = coin_winner(-2, , )\\n"}	2019-07-24 01:14:55-07	222
57022	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n    return \\n   = coin_winner(-1, , )\\n   = coin_winner(-2, , )\\n  if  ==  or  == ::\\n"}	2019-07-24 01:15:02-07	222
57032	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n    return \\n   = coin_winner(-1, , )\\n   = coin_winner(-2, , )\\n  if  ==  or  == ::\\n    return \\n"}	2019-07-24 01:15:03-07	222
57042	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n    return \\n   = coin_winner(-1, , )\\n   = coin_winner(-2, , )\\n  if  ==  or  == ::\\n    return \\n  else:\\n"}	2019-07-24 01:15:08-07	222
57052	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n    return \\n   = coin_winner(-1, , )\\n   = coin_winner(-2, , )\\n  if  ==  or  == ::\\n    return \\n  else:\\n    return \\n"}	2019-07-24 01:15:09-07	222
57062	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(, , ):\\n  if  == 1 or  == 2:\\n    return \\n   = coin_winner(-1, , )\\n   = coin_winner(-2, , )\\n  if  ==  or  == ::\\n    return \\n  else:\\n    return \\n"}	2019-07-24 01:15:29-07	222
57072	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-24 01:15:30-07	222
57082	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus():\\n"}	2019-07-24 01:15:33-07	222
57092	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_odd_plus():\\n"}	2019-07-24 01:15:57-07	222
57102	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-24 01:15:58-07	222
57112	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 16:47:47-07	2
57122	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 16:47:49-07	2
57132	coding	19sum_blank_pilots/coin_game	load		2019-07-24 16:58:59-07	2
57142	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 17:52:13-07	282
57512	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 22:28:53-07	2
57522	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 22:29:18-07	2
57152	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(hello this is a test) #!ORIGINALprint(!BLANK) #blankhello this is a test\\n"}	2019-07-24 17:56:04-07	282
57162	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:56:15-07	282
57172	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:56:42-07	282
57182	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:56:43-07	282
57192	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:57:01-07	282
57202	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:57:05-07	282
57212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:57:06-07	282
57222	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:57:08-07	282
57232	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 17:57:21-07	282
57242	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 18:01:33-07	282
57252	parsons	19s_algo_study/binary_search_1	move_on	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 18:01:34-07	282
57262	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-24 18:01:35-07	282
57272	solution	19s_algo_study/binary_search_1	load		2019-07-24 18:01:35-07	282
57282	solution	19s_algo_study/binary_search_1	move_on		2019-07-24 18:01:49-07	282
57292	coding	19s_algo_study/dfs_all_paths	load		2019-07-24 18:01:50-07	282
57302	coding	19s_algo_study/dfs_all_paths	submit	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n"}	2019-07-24 18:01:56-07	282
57312	coding	19s_algo_study/dfs_all_paths	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">expected an indented block (<string>, line 4)</span><br /></div>	2019-07-24 18:01:56-07	282
57322	coding	19s_algo_study/dfs_all_paths	submit	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n    return find_paths"}	2019-07-24 18:02:04-07	282
57332	coding	19s_algo_study/dfs_all_paths	results	<div class="testcase error"><span class="msg">Calling function <code>dfs_all_paths_test('A', 'D', ['A', 'B', 'C', 'D', 'E'], [['A', 'B'], ['B', 'D'], ['A', 'C'], ['C', 'D'], ['E', 'A']])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">'function' object has no attribute 'sort', line 38</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dfs_all_paths_test('Start', 'D', ['Start', 'B', 'C', 'D', 'E'], [['Start', 'B'], ['B', 'D'], ['B', 'C'], ['Start', 'C'], ['C', 'D'], ['E', 'Start']])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">'function' object has no attribute 'sort', line 38</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dfs_all_paths_test('D', 'A', 'ABCDE', [['A', 'B'], ['B', 'D'], ['A', 'C'], ['C', 'D'], ['E', 'A']])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">'function' object has no attribute 'sort', line 38</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dfs_all_paths_test('C', 'D', 'ABCD', [['A', 'C'], ['C', 'A'], ['C', 'B'], ['A', 'B'], ['B', 'D'], ['A', 'D']])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">'function' object has no attribute 'sort', line 38</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>dfs_all_paths_test('B', 'E', 'ABCDE', [['A', 'D'], ['B', 'A'], ['B', 'D'], ['A', 'C'], ['C', 'E'], ['D', 'E']])</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">'function' object has no attribute 'sort', line 38</span><br /></div>	2019-07-24 18:02:04-07	282
57342	coding	19s_algo_study/dfs_all_paths	unload	{"code":"def find_paths(source, destination):\\n\\t# source and destination are both Nodes\\n    return find_paths"}	2019-07-24 18:02:09-07	282
57352	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 18:18:23-07	282
57362	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 18:28:38-07	2
57372	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 18:28:41-07	2
57382	coding	demo	load		2019-07-24 18:28:42-07	2
57392	coding	demo	coding_keyup	{"code":"def return_three():\\n  \\n"}	2019-07-24 18:28:45-07	2
57402	coding	demo	submit	{"code":"print('this is a test')\\nx = 2\\nprint(x)\\nprint(x // 2)\\n\\ndef return_three():\\n  return 2\\n"}	2019-07-24 18:29:03-07	2
57412	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /></div>	2019-07-24 18:29:03-07	2
57422	coding	demo	submit	{"code":"def my_code():\\n    print('this is a test')\\n    x = 2\\n    print(x)\\n    print(x // 2)\\n\\ndef return_three():\\n  return 2\\n"}	2019-07-24 18:29:25-07	2
57432	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>my_code()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>this is a test\n2\n1\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>my_code()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>None</code></span> <br /><span class="msg">Print Output: <pre>this is a test\n2\n1\n</pre></span></div>	2019-07-24 18:29:26-07	2
57442	coding	demo	unload	{"code":"def my_code():\\n    print('this is a test')\\n    x = 2\\n    print(x)\\n    print(x // 2)\\n\\ndef return_three():\\n  return 2\\n"}	2019-07-24 18:29:28-07	2
57452	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-07-24 19:05:12-07	282
57462	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-07-24 19:13:43-07	282
57472	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-07-24 19:20:31-07	282
57482	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-07-24 19:20:35-07	282
57532	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"code_writing_rank","input":""},{"id":"code_arrangement_rank","input":""},{"id":"code_arrangement_with_blanks_rank","input":""},{"id":"only_code_writing_rank","input":""},{"id":"only_code_arrangement_rank","input":""},{"id":"only_code_arrangement_with_blanks_rank","input":""},{"id":"three_custom_order_rank","input":""},{"id":"three_study_order_rank","input":""},{"id":"","input":""},{"id":"","input":""}]	2019-07-24 22:29:24-07	2
57542	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"code_writing_rank","input":""},{"id":"code_arrangement_rank","input":""},{"id":"code_arrangement_with_blanks_rank","input":""},{"id":"only_code_writing_rank","input":""},{"id":"only_code_arrangement_rank","input":""},{"id":"only_code_arrangement_with_blanks_rank","input":""},{"id":"three_custom_order_rank","input":""},{"id":"three_study_order_rank","input":""},{"id":"","input":""},{"id":"","input":""}]	2019-07-24 22:29:26-07	2
57552	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 22:29:27-07	2
57562	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-24 22:29:27-07	2
57572	multi	19sum_blank_pilots/cog_load_survey	load		2019-07-24 22:29:50-07	2
57582	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-24 22:30:00-07	2
57592	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-24 22:30:06-07	2
57602	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-24 22:30:08-07	2
57612	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-24 22:30:11-07	2
57622	multi	19sum_blank_pilots/conf_cog_survey_5	load		2019-07-24 22:30:12-07	2
57632	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-24 22:30:15-07	2
57642	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-24 22:30:16-07	2
57652	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-24 22:30:16-07	2
57662	multi	19sum_blank_pilots/conf_cog_survey_5	load		2019-07-24 22:30:17-07	2
57672	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-07-24 22:44:53-07	282
57682	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 22:49:41-07	282
57692	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 22:49:45-07	282
57702	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:06:35-07	282
57712	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:07:19-07	282
57722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:07:21-07	282
57732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:10:23-07	282
57742	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  high = mid - 1\\n"}	2019-07-24 23:10:50-07	282
57752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:10:51-07	282
57762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:15:04-07	282
57772	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:16:01-07	282
57782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:16:03-07	282
57792	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:16:31-07	282
57802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:16:32-07	282
57812	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:17:14-07	282
57822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:17:15-07	282
57832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:19:57-07	282
57842	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:22:06-07	282
57852	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 23:30:59-07	2
57862	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 23:31:29-07	2
57872	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 23:31:36-07	2
57882	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 23:31:49-07	2
57892	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 23:32:04-07	2
57902	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"code_writing_rank","input":""},{"id":"code_arrangement_rank","input":""},{"id":"code_arrangement_with_blanks_rank","input":""},{"id":"only_code_writing_rank","input":""},{"id":"only_code_arrangement_rank","input":""},{"id":"only_code_arrangement_with_blanks_rank","input":""},{"id":"three_custom_order_rank","input":""},{"id":"three_study_order_rank","input":""},{"id":"","input":""},{"id":"","input":""}]	2019-07-24 23:32:38-07	2
57912	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"code_writing_rank","input":""},{"id":"code_arrangement_rank","input":""},{"id":"code_arrangement_with_blanks_rank","input":""},{"id":"only_code_writing_rank","input":""},{"id":"only_code_arrangement_rank","input":""},{"id":"only_code_arrangement_with_blanks_rank","input":""},{"id":"three_custom_order_rank","input":""},{"id":"three_study_order_rank","input":""},{"id":"","input":""},{"id":"","input":""}]	2019-07-24 23:32:38-07	2
57922	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-24 23:32:41-07	2
57932	parsons	demo	load	{"code":""}	2019-07-24 23:34:30-07	2
57942	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-24 23:35:19-07	2
57952	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:38:19-07	282
57962	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:39:42-07	282
57972	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:42:31-07	282
57982	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:43:49-07	282
57992	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:45:50-07	282
58002	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:46:46-07	282
59592	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:39:48-07	202
58012	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:46:48-07	282
58022	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:49:14-07	282
58032	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:50:59-07	282
58042	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:51:33-07	282
58052	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:51:35-07	282
58062	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:52:14-07	282
58072	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:52:16-07	282
58082	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:52:57-07	282
58092	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:52:58-07	282
58102	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:53:25-07	282
58112	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:53:27-07	282
58122	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:54:05-07	282
58132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:54:06-07	282
58142	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:54:32-07	282
58152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:54:33-07	282
58162	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:55:54-07	282
58172	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:56:45-07	282
58182	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:56:47-07	282
58192	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-24 23:57:20-07	282
58202	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:57:22-07	282
58212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:58:44-07	282
58222	parsons	19s_algo_study/binary_search_1	unload	{"code":"print() #!ORIGINALprint(!BLANK) #blank\\ndef binary_search(target, arr):\\n"}	2019-07-24 23:59:35-07	282
58232	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-24 23:59:37-07	282
58242	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:00:39-07	282
58252	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:04:26-07	282
58262	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:05:58-07	282
58272	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:27:19-07	282
58282	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:39:24-07	282
58292	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:43:52-07	282
58302	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:47:11-07	282
58312	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:47:20-07	282
58322	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:47:22-07	282
58332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:51:17-07	282
58342	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 00:52:13-07	282
58352	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:52:15-07	282
58362	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-25 00:55:38-07	2
58372	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-07-25 00:55:54-07	2
58382	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:58:00-07	282
58392	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:59:17-07	282
58402	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 00:59:44-07	282
58412	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 00:59:58-07	282
58422	parsons	19s_algo_study/binary_search_1	unload	{"code":"print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 01:00:50-07	282
58432	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 01:00:52-07	282
58442	multi	19sum_blank_pilots/pre_survey	load		2019-07-25 17:12:16-07	2
58452	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-25 17:12:17-07	2
58462	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-25 17:12:17-07	2
58472	coding	demo	load		2019-07-25 17:12:19-07	2
58482	coding	demo	move_on	{"code":"def my_code():\\n    print('this is a test')\\n    x = 2\\n    print(x)\\n    print(x // 2)\\n\\ndef return_three():\\n  return 2\\n"}	2019-07-25 17:12:28-07	2
58492	coding	demo	unload	{"code":"def my_code():\\n    print('this is a test')\\n    x = 2\\n    print(x)\\n    print(x // 2)\\n\\ndef return_three():\\n  return 2\\n"}	2019-07-25 17:12:28-07	2
58502	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 17:12:28-07	2
58512	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 17:12:38-07	2
58522	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 17:12:38-07	2
58532	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 17:12:39-07	2
58542	parsons	demo_blanks	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n   = 6\\n"}	2019-07-25 17:12:56-07	2
58552	parsons	demo_blanks	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return  // 2\\n  x = 6\\n"}	2019-07-25 17:12:59-07	2
58562	parsons	demo_blanks	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\n  return  // 2\\n"}	2019-07-25 17:13:00-07	2
58572	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 17:13:18-07	2
58582	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n"}	2019-07-25 17:13:27-07	2
58592	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return x\\n  x = 2\\n"}	2019-07-25 17:13:30-07	2
58602	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  return x\\n"}	2019-07-25 17:13:31-07	2
58612	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-25 17:13:34-07	2
58622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 17:54:19-07	282
58632	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:13:59-07	282
58642	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 18:14:31-07	282
58652	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:14:33-07	282
58662	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 18:15:02-07	282
58672	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  return mid\\n"}	2019-07-25 18:15:09-07	282
58682	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(op) #!ORIGINALprint(!BLANK) #blankop\\n  return mid\\n"}	2019-07-25 18:15:33-07	282
58692	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(op) #!ORIGINALprint(!BLANK) #blankop\\n  return mid\\n  # #!ORIGINAL# !BLANK #blank\\n"}	2019-07-25 18:16:05-07	282
58702	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:16:06-07	282
58712	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:16:55-07	282
58722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:16:57-07	282
58732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:22:20-07	282
58742	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:27:20-07	282
58752	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  return mid\\n"}	2019-07-25 18:27:24-07	282
58762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:52:59-07	282
58772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 18:55:25-07	282
58782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:03:25-07	282
58792	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:06:36-07	282
58802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:08:30-07	282
58812	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:08:53-07	282
58822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:08:54-07	282
58832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:14:42-07	282
58842	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 19:15:07-07	282
58852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:15:09-07	282
58862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:16:02-07	282
58872	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:22:55-07	2
58882	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:22:56-07	2
58892	multi	19sum_blank_pilots/pre_survey	load		2019-07-25 19:22:59-07	2
58902	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-25 19:23:01-07	2
58912	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-25 19:23:01-07	2
58922	coding	demo	load		2019-07-25 19:23:02-07	2
58932	coding	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:05-07	2
58942	coding	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:05-07	2
58952	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:05-07	2
58962	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:07-07	2
58972	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:07-07	2
58982	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:07-07	2
58992	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:10-07	2
59602	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:39:49-07	202
59002	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-25 19:23:10-07	2
59012	multi	19sum_blank_pilots/start	load		2019-07-25 19:23:10-07	2
59022	multi	19sum_blank_pilots/start	submit	[]	2019-07-25 19:23:11-07	2
59032	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-25 19:23:11-07	2
59042	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":""}	2019-07-25 19:23:12-07	2
59052	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:35:15-07	282
59062	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:36:23-07	282
59072	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:38:10-07	282
59082	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 19:39:09-07	282
59092	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:39:11-07	282
59102	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 19:39:38-07	282
59112	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:39:40-07	282
59122	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:41:11-07	282
59132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:42:05-07	282
59142	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n      print() #!ORIGINALprint(!BLANK) #blank\\n      print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 19:42:58-07	282
59152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:42:59-07	282
59162	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:47:15-07	282
59172	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:48:04-07	282
59182	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 19:48:53-07	282
59192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 19:48:54-07	282
59202	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-25 19:59:11-07	2
59212	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:04:48-07	282
59222	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:16:07-07	282
59232	multi	19sum_blank_pilots/pre_survey	load		2019-07-25 21:23:07-07	202
59242	multi	19sum_blank_pilots/coin_game_blanks	load		2019-07-25 21:23:21-07	202
59252	multi	19sum_blank_pilots/coin_game_blanks	load		2019-07-25 21:23:24-07	202
59262	multi	19sum_blank_pilots/coin_game_blanks	load		2019-07-25 21:23:27-07	202
59272	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:23:36-07	202
59282	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":""}	2019-07-25 21:24:02-07	202
59292	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:26:26-07	202
59302	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:26:39-07	202
59312	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:26:40-07	202
59322	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:26:47-07	202
59332	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:26:48-07	202
59342	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:27:02-07	282
59352	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:27:29-07	282
59362	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:27:35-07	282
59372	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:27:37-07	282
59382	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:29:05-07	202
59392	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:29:30-07	202
59402	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:29:31-07	202
59412	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:29:38-07	282
59422	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:29:38-07	282
59432	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:30:06-07	202
59442	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:30:07-07	202
59452	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:32:06-07	202
59462	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:32:45-07	202
59472	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:32:46-07	202
59482	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:36:58-07	282
59492	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:36:58-07	282
59502	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:37:00-07	282
59512	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:37:16-07	202
59522	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:38:56-07	202
59532	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:38:57-07	202
59542	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:39:08-07	202
59552	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:39:18-07	202
59562	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:39:19-07	202
59572	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:39:24-07	202
59582	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:39:25-07	202
59612	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-25 21:40:06-07	202
59622	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":""}	2019-07-25 21:40:07-07	202
59632	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  return -1\\n"}	2019-07-25 21:54:24-07	282
59642	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:55:06-07	282
59652	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:55:07-07	282
59662	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:56:22-07	282
59672	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 21:56:38-07	282
59682	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 21:56:39-07	282
59692	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:56:49-07	282
59702	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 21:56:50-07	282
59712	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:57:05-07	282
59722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 21:57:06-07	282
59732	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:57:56-07	282
59742	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 21:57:57-07	282
59752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 21:59:34-07	282
59762	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 21:59:55-07	282
59772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 21:59:56-07	282
59782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:01:58-07	282
59792	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:03:48-07	282
59802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:11:03-07	282
59812	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:16:02-07	282
59822	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:16:28-07	282
59832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:16:29-07	282
59842	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  while low <= high:\\n"}	2019-07-25 22:17:18-07	282
59852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:17:19-07	282
59862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:18:29-07	282
59872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:20:54-07	282
59882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:24:07-07	282
59892	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 22:26:17-07	282
59902	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:21:46-07	282
59912	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:23:04-07	282
59922	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:24:16-07	282
59932	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 23:25:14-07	282
59942	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:25:15-07	282
59952	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-25 23:35:02-07	2
59962	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:49:31-07	282
59972	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:52:05-07	282
59982	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-25 23:52:32-07	282
59992	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:52:33-07	282
60002	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:53:45-07	282
60012	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:56:57-07	282
60022	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:57:14-07	282
60032	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-25 23:57:16-07	282
60042	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 00:04:26-07	282
60052	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 00:10:46-07	282
60062	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:11:00-07	2
60072	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:11:15-07	2
60082	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:11:43-07	2
60092	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:12:03-07	2
60102	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 00:12:23-07	282
60112	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-26 00:13:06-07	282
60122	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 00:13:07-07	282
60132	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:06-07	2
60142	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:08-07	2
60152	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:33-07	2
60162	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:35-07	2
60172	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:37-07	2
60182	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:38-07	2
60192	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:38-07	2
60202	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:39-07	2
60212	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:39-07	2
60222	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:40-07	2
60232	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:41-07	2
60242	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:41-07	2
60252	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 00:17:42-07	2
60262	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:43-07	2
60272	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:17:45-07	2
60282	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:48-07	2
60292	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:17:48-07	2
60302	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:49-07	2
60312	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:17:49-07	2
60322	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 00:17:50-07	2
60332	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:17:50-07	2
60342	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 00:17:59-07	2
60352	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 00:18:01-07	282
60362	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:18:04-07	2
60372	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 00:18:06-07	2
60382	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:18:07-07	2
60392	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 00:18:07-07	2
60402	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:18:08-07	2
60412	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 00:18:08-07	2
60422	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 00:18:09-07	2
60432	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 00:18:10-07	2
60442	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 00:26:13-07	282
60452	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 00:32:41-07	282
60462	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 00:49:48-07	2
60472	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 00:50:38-07	2
60482	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 00:51:08-07	2
60492	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""}]	2019-07-26 00:51:13-07	2
60502	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""}]	2019-07-26 00:51:13-07	2
60512	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-26 00:51:13-07	2
60522	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 01:05:44-07	2
60532	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 01:05:46-07	2
60542	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":""}	2019-07-26 01:30:32-07	202
60552	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 01:30:49-07	682
60562	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:30:52-07	682
60572	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:30:52-07	682
60582	coding	demo	load		2019-07-26 01:30:53-07	682
60592	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-26 01:30:56-07	682
60602	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 2\\n"}	2019-07-26 01:30:56-07	682
60612	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:30:56-07	682
60622	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:30:59-07	682
60632	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:30:59-07	682
60642	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:31:00-07	682
60652	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:31:04-07	682
60662	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:31:04-07	682
60672	multi	19sum_blank_pilots/start	load		2019-07-26 01:31:04-07	682
60682	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:31:06-07	682
60692	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:31:06-07	682
60702	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:31:06-07	682
60712	parsons	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:31:26-07	682
60722	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:31:26-07	682
60732	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 01:31:26-07	682
60742	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:31:32-07	682
60752	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:31:32-07	682
60762	coding	19s_algo_study/fizz_buzz	load		2019-07-26 01:31:33-07	682
60772	coding	19s_algo_study/fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:31:36-07	682
60782	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:31:36-07	682
60792	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 01:31:36-07	682
60802	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:31:38-07	682
60812	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:31:38-07	682
60822	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:31:39-07	682
60832	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:31:45-07	682
60842	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:31:45-07	682
60852	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 01:31:45-07	682
60862	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:31:47-07	682
60872	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:31:47-07	682
60882	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:31:48-07	682
60892	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:31:50-07	682
60902	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:31:50-07	682
60912	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 01:31:50-07	682
60922	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:31:52-07	682
60932	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:31:52-07	682
60942	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 01:33:58-07	692
60952	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:34:00-07	692
60962	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:34:00-07	692
60972	coding	demo	load		2019-07-26 01:34:01-07	692
60982	coding	demo	coding_keyup	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return \\n"}	2019-07-26 01:34:04-07	692
60992	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-26 01:34:05-07	692
61002	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  print('The code is running! x =', x)\\n  return 3\\n"}	2019-07-26 01:34:05-07	692
61012	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:34:06-07	692
61022	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:34:08-07	692
61032	coding	demo	load		2019-07-26 01:34:09-07	692
61042	coding	demo	coding_keyup	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n    "}	2019-07-26 01:34:11-07	692
61052	coding	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return 3"}	2019-07-26 01:34:14-07	692
61062	coding	demo	results	<div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /></div>	2019-07-26 01:34:14-07	692
61072	coding	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return 3"}	2019-07-26 01:34:16-07	692
61082	coding	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return 3"}	2019-07-26 01:34:16-07	692
61092	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:34:17-07	692
61102	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n"}	2019-07-26 01:34:58-07	692
61112	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n"}	2019-07-26 01:35:00-07	692
61122	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\nreturn x\\n"}	2019-07-26 01:35:01-07	692
61132	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-26 01:35:03-07	692
61142	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-26 01:35:04-07	692
61152	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-07-26 01:35:04-07	692
61162	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:35:05-07	692
61172	parsons	demo_blanks	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n   = 6\\n"}	2019-07-26 01:35:06-07	692
61182	parsons	demo_blanks	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\nreturn  // 2\\n"}	2019-07-26 01:35:09-07	692
62672	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 01:50:02-07	692
61192	parsons	demo_blanks	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\n  return x // 2\\n"}	2019-07-26 01:35:11-07	692
61202	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\n  return x // 2\\n"}	2019-07-26 01:35:12-07	692
61212	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 6\\n  return x // 2\\n"}	2019-07-26 01:35:12-07	692
61222	multi	19sum_blank_pilots/start	load		2019-07-26 01:35:12-07	692
61232	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:35:14-07	692
61242	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:35:14-07	692
61252	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:35:14-07	692
61262	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nif n == 0:\\n"}	2019-07-26 01:35:19-07	692
61272	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n"}	2019-07-26 01:35:22-07	692
61282	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:25-07	692
61292	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  double_digit = max_odd_plus(n // 100)\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:30-07	692
61302	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:33-07	692
61312	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:35-07	692
61322	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n  double_digit += n % 100\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:37-07	692
61332	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit += n % 100\\n    single_digit += n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:42-07	692
61342	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit += n % 100\\n    single_digit += n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:44-07	692
61352	parsons	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit += n % 100\\n    single_digit += n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:46-07	692
61362	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit += n % 100\\n    single_digit += n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:35:46-07	692
61372	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 01:35:46-07	692
61382	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":"1"},{"id":"tlx_temporal","input":"3"},{"id":"tlx_performance","input":"4"},{"id":"tlx_effort","input":"5"},{"id":"tlx_frustration","input":"6"}]	2019-07-26 01:35:55-07	692
61392	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":"1"},{"id":"tlx_temporal","input":"3"},{"id":"tlx_performance","input":"4"},{"id":"tlx_effort","input":"5"},{"id":"tlx_frustration","input":"6"}]	2019-07-26 01:35:55-07	692
61402	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:35:56-07	692
61412	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n   = []\\n"}	2019-07-26 01:36:03-07	692
61422	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for  in range(1, +1):\\n"}	2019-07-26 01:36:07-07	692
61432	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n  if  % 15 == 0:\\n"}	2019-07-26 01:36:12-07	692
61442	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      .append(\\"fizz\\")\\n"}	2019-07-26 01:36:19-07	692
61452	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      .append(\\"fizzbuzz\\")\\n      r.append(\\"fizz\\")\\n"}	2019-07-26 01:36:22-07	692
61462	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif  % 3 == 0:\\n      r.append(\\"fizz\\")\\n"}	2019-07-26 01:36:24-07	692
61472	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n    elif  % 5 == 0:\\n      r.append(\\"fizz\\")\\n"}	2019-07-26 01:36:31-07	692
61482	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif  % 5 == 0:\\n"}	2019-07-26 01:36:32-07	692
61492	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      .append(\\"buzz\\")\\n"}	2019-07-26 01:36:36-07	692
61502	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      r.append(\\"buzz\\")\\n  else:\\n"}	2019-07-26 01:36:38-07	692
61512	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      r.append(\\"buzz\\")\\n      .append()\\n    else:\\n"}	2019-07-26 01:36:42-07	692
61522	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      r.append(\\"buzz\\")\\n    else:\\n      .append()\\n"}	2019-07-26 01:36:43-07	692
61532	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      r.append(\\"buzz\\")\\n    else:\\n      r.append(i)\\n    return \\n"}	2019-07-26 01:36:51-07	692
61542	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      r.append(\\"buzz\\")\\n    else:\\n      r.append(i)\\n  return r\\n"}	2019-07-26 01:36:56-07	692
61552	parsons	19s_algo_study/fizz_buzz_blanks	move_on	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      r.append(\\"buzz\\")\\n    else:\\n      r.append(i)\\n  return r\\n"}	2019-07-26 01:36:58-07	692
61562	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz(n):\\n  r = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      r.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      r.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      r.append(\\"buzz\\")\\n    else:\\n      r.append(i)\\n  return r\\n"}	2019-07-26 01:36:58-07	692
61572	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 01:36:58-07	692
61582	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:37:07-07	692
61592	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:37:07-07	692
61602	coding	19sum_blank_pilots/coin_game	load		2019-07-26 01:37:08-07	692
61612	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(n, current_player, other_player):\\n    if n < 3:\\n        return current_player\\n    if coin_winner(n-1, other_player, current_player) == current_player or coin_winner(n-2, other_player, current_player) == current_player:\\n        return current_player\\n    else:\\n        return other_player\\n        "}	2019-07-26 01:38:49-07	692
61622	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(2, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(2, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(8, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(10, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(12, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-26 01:38:49-07	692
61632	coding	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n    if n < 3:\\n        return current_player\\n    if coin_winner(n-1, other_player, current_player) == current_player or coin_winner(n-2, other_player, current_player) == current_player:\\n        return current_player\\n    else:\\n        return other_player\\n        "}	2019-07-26 01:38:50-07	692
61642	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n    if n < 3:\\n        return current_player\\n    if coin_winner(n-1, other_player, current_player) == current_player or coin_winner(n-2, other_player, current_player) == current_player:\\n        return current_player\\n    else:\\n        return other_player\\n        "}	2019-07-26 01:38:50-07	692
61652	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 01:38:51-07	692
61662	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:38:53-07	692
61672	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:38:53-07	692
61682	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:38:54-07	692
61692	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n    return 0\\n  single_digit = max_odd_plus(n // 10)\\n  double_digit = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n    double_digit += n % 100\\n    single_digit += n % 10\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:39:42-07	692
61702	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:39:44-07	692
61712	coding	19sum_blank_pilots/plusses	coding_keyup	{"code":"def max_odd_plus(n):\\n    "}	2019-07-26 01:39:45-07	692
61722	coding	19sum_blank_pilots/plusses	move_on	{"code":""}	2019-07-26 01:39:55-07	692
61732	coding	19sum_blank_pilots/plusses	unload	{"code":""}	2019-07-26 01:39:55-07	692
61742	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 01:39:55-07	692
61752	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:39:57-07	692
61762	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:39:57-07	692
61772	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 01:39:57-07	692
61782	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:39:59-07	692
72272	solution	19sum_blank_pilots/coin_game	load		2019-08-05 21:50:37-07	2
61792	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:39:59-07	692
61802	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-26 01:39:59-07	692
61812	multi	19sum_blank_pilots/post_survey_pt_2	submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:40:01-07	692
61822	multi	19sum_blank_pilots/post_survey_pt_2	backup_submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:40:01-07	692
61832	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 01:40:18-07	692
61842	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:40:19-07	692
61852	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:40:19-07	692
61862	coding	demo	load		2019-07-26 01:40:20-07	692
61872	coding	demo	submit	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:40:21-07	692
61882	coding	demo	results	<div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>2</code></span> <br /><span class="msg">Print Output: <pre>The code is running! x = 2\n</pre></span></div>	2019-07-26 01:40:21-07	692
61892	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:40:22-07	692
61902	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:40:22-07	692
61912	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:40:23-07	692
61922	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:40:24-07	692
61932	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:40:24-07	692
61942	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:40:25-07	692
61952	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:40:26-07	692
61962	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:40:26-07	692
61972	multi	19sum_blank_pilots/start	load		2019-07-26 01:40:26-07	692
61982	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:40:28-07	692
61992	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:40:28-07	692
62002	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:40:29-07	692
62012	parsons	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:40:33-07	692
62022	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:40:33-07	692
62032	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 01:40:34-07	692
62042	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:40:36-07	692
62052	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  double_digit += n % 100\\n"}	2019-07-26 01:40:57-07	692
62062	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  double_digit += n % 100\\n"}	2019-07-26 01:44:40-07	692
62072	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:44:43-07	692
62082	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\nreturn max(single_digit, double_digit)\\n"}	2019-07-26 01:44:48-07	692
62092	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_odd_plus(n):\\n  double_digit = max_odd_plus(n // 100)\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:44:50-07	692
62102	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n):\\n  double_digit = max_odd_plus(n // 100)\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:44:52-07	692
62112	parsons	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n  double_digit = max_odd_plus(n // 100)\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:45:42-07	692
62122	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n  double_digit = max_odd_plus(n // 100)\\n  return max(single_digit, double_digit)\\n"}	2019-07-26 01:45:42-07	692
62132	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 01:45:42-07	692
62142	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:45:48-07	692
62152	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:45:48-07	692
62162	coding	19s_algo_study/fizz_buzz	load		2019-07-26 01:45:49-07	692
62172	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:45:49-07	692
62182	coding	19s_algo_study/fizz_buzz	load		2019-07-26 01:45:50-07	692
62192	coding	19s_algo_study/fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:45:54-07	692
62202	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:45:54-07	692
62212	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 01:45:54-07	692
62222	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:45:56-07	692
72282	solution	19sum_blank_pilots/coin_game	move_on		2019-08-05 21:50:39-07	2
62232	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:45:56-07	692
62242	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:45:57-07	692
62252	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:48:18-07	692
62262	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:48:18-07	692
62272	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:48:18-07	692
62282	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 01:48:19-07	692
62292	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:48:21-07	692
62302	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:48:21-07	692
62312	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:48:21-07	692
62322	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:48:23-07	692
62332	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:48:23-07	692
62342	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 01:48:23-07	692
62352	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:48:25-07	692
62362	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:48:25-07	692
62372	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 01:48:25-07	692
62382	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:48:30-07	692
62392	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:48:30-07	692
62402	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-26 01:48:30-07	692
62412	multi	19sum_blank_pilots/post_survey_pt_2	backup_submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:48:32-07	692
62422	multi	19sum_blank_pilots/post_survey_pt_2	submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:48:32-07	692
62432	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 01:48:47-07	692
62442	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:48:48-07	692
62452	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:48:48-07	692
62462	coding	demo	load		2019-07-26 01:48:49-07	692
62472	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:49:22-07	692
62482	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:49:22-07	692
62492	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:49:23-07	692
62502	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:49:32-07	692
62512	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:49:32-07	692
62522	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:49:33-07	692
62532	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:49:34-07	692
62542	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:49:34-07	692
62552	multi	19sum_blank_pilots/start	load		2019-07-26 01:49:34-07	692
62562	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:49:36-07	692
62572	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:49:36-07	692
62582	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:49:37-07	692
62592	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:49:47-07	692
62602	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:49:47-07	692
62612	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 01:49:47-07	692
62622	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:49:51-07	692
62632	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:49:51-07	692
62642	parsons	19s_algo_study/fizz_buzz	load	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:49:52-07	692
62652	parsons	19s_algo_study/fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:50:02-07	692
62662	parsons	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:50:02-07	692
62682	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:50:03-07	692
62692	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:50:03-07	692
62702	coding	19sum_blank_pilots/coin_game	load		2019-07-26 01:50:04-07	692
62712	coding	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:50:07-07	692
62722	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:50:08-07	692
62732	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 01:50:08-07	692
62742	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:50:09-07	692
62752	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:50:09-07	692
62762	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:50:10-07	692
62772	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:50:13-07	692
62782	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:50:13-07	692
62792	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 01:50:13-07	692
62802	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:50:23-07	692
62812	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:50:23-07	692
62822	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 01:50:24-07	692
62832	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:50:27-07	692
62842	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:50:27-07	692
62852	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-26 01:50:27-07	692
62862	multi	19sum_blank_pilots/post_survey_pt_2	submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:50:41-07	692
62872	multi	19sum_blank_pilots/post_survey_pt_2	backup_submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:50:41-07	692
62882	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 01:50:51-07	692
62892	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:50:53-07	692
62902	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:50:53-07	692
62912	coding	demo	load		2019-07-26 01:50:54-07	692
62922	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:50:55-07	692
62932	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:50:55-07	692
62942	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:50:56-07	692
62952	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:50:57-07	692
62962	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:50:57-07	692
62972	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:50:58-07	692
62982	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:50:59-07	692
62992	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:50:59-07	692
63002	multi	19sum_blank_pilots/start	load		2019-07-26 01:51:00-07	692
63012	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:51:01-07	692
63022	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:51:01-07	692
63032	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:51:02-07	692
63042	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if  == 0:\\n"}	2019-07-26 01:51:08-07	692
63052	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n        return 0\\n"}	2019-07-26 01:51:11-07	692
63062	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  return max(, )\\n"}	2019-07-26 01:51:13-07	692
63072	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n   = max_odd_plus( // 10)\\n  return max(a, b)\\n"}	2019-07-26 01:51:17-07	692
63082	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n   = max_odd_plus( // 100)\\n  return max(a, b)\\n"}	2019-07-26 01:51:21-07	692
63092	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if %2 == 1:\\n  return max(a, b)\\n"}	2019-07-26 01:51:26-07	692
72292	week2_resume		load		2019-08-05 21:50:40-07	2
63102	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n         +=  % 100\\n  return max(a, b)\\n"}	2019-07-26 01:51:29-07	692
63112	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if na%2 == 1:\\n        b += n % 100\\n             += % 10\\n  return max(a, b)\\n"}	2019-07-26 01:51:36-07	692
63122	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if na%2 == 1:\\n        b += n % 100\\n        a +=n % 10\\n  return max(a, b)\\n"}	2019-07-26 01:51:57-07	692
63132	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n        b += n % 100\\n        a +=n % 10\\n  return max(a, b)\\n"}	2019-07-26 01:52:02-07	692
63142	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n        b += n % 100\\n        a +=n % 10\\n  return max(a, b)\\n"}	2019-07-26 01:52:04-07	692
63152	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_odd_plus(n):\\n  if n == 0:\\n      return 0\\n  a = max_odd_plus(n // 10)\\n  b = max_odd_plus(n // 100)\\n  if n%2 == 1:\\n        b += n % 100\\n        a +=n % 10\\n  return max(a, b)\\n"}	2019-07-26 01:52:04-07	692
63162	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 01:52:04-07	692
63172	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:52:06-07	692
63182	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:52:06-07	692
63192	coding	19s_algo_study/fizz_buzz	load		2019-07-26 01:52:07-07	692
63202	coding	19s_algo_study/fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:52:09-07	692
63212	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:52:09-07	692
63222	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 01:52:10-07	692
63232	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:52:11-07	692
63242	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:52:11-07	692
63252	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:52:12-07	692
63262	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n    if n == 1 or n == 2:\\n"}	2019-07-26 01:52:16-07	692
63272	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n  return current_player\\n"}	2019-07-26 01:52:21-07	692
63282	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n"}	2019-07-26 01:52:24-07	692
63292	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n"}	2019-07-26 01:52:26-07	692
63302	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n"}	2019-07-26 01:52:27-07	692
63312	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n"}	2019-07-26 01:52:29-07	692
63322	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n"}	2019-07-26 01:52:31-07	692
63332	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:52:34-07	692
63342	parsons	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:52:35-07	692
63352	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:52:35-07	692
63362	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 01:52:36-07	692
63372	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:52:38-07	692
63382	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n"}	2019-07-26 01:52:42-07	692
63392	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n"}	2019-07-26 01:52:45-07	692
64992	coding	19sum_blank_pilots/plusses_	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 02:02:50-07	692
63402	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\ntake_one = coin_winner(n-1, other_player, current_player)\\n"}	2019-07-26 01:52:47-07	692
63412	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n"}	2019-07-26 01:52:49-07	692
63422	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n"}	2019-07-26 01:52:51-07	692
63432	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n"}	2019-07-26 01:52:53-07	692
63442	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n"}	2019-07-26 01:52:55-07	692
63452	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:52:57-07	692
63462	parsons	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:52:58-07	692
63472	parsons	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:53:00-07	692
63482	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  take_one = coin_winner(n-1, other_player, current_player)\\n  take_two = coin_winner(n-2, other_player, current_player)\\n  if take_one == current_player or take_two == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:53:00-07	692
63492	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 01:53:00-07	692
63502	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:53:07-07	692
63512	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:53:07-07	692
63522	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:53:08-07	692
63532	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:53:09-07	692
63542	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 01:53:09-07	692
63552	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:53:12-07	692
63562	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:53:14-07	692
63572	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:53:14-07	692
63582	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 01:53:15-07	692
63592	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:53:16-07	692
63602	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:53:16-07	692
63612	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 01:53:16-07	692
63622	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:53:18-07	692
63632	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"prev_hw","input":""},{"id":"code_arrangement_explain","input":""},{"id":"code_arrangement_with_blanks_explain","input":""},{"id":"hw_interface_preference","input":""},{"id":"code_arrangement_place","input":""},{"id":"code_arrangement_place","input":""}]	2019-07-26 01:53:18-07	692
63642	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-26 01:53:18-07	692
63652	multi	19sum_blank_pilots/post_survey_pt_2	submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:53:19-07	692
63662	multi	19sum_blank_pilots/post_survey_pt_2	backup_submit	[{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":""},{"id":"experience","input":""},{"id":"misc_interface","input":""},{"id":"misc_repeated","input":""},{"id":"misc_study","input":""}]	2019-07-26 01:53:19-07	692
63672	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 01:53:42-07	692
63682	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:53:43-07	692
63692	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 01:53:43-07	692
63702	coding	demo	load		2019-07-26 01:53:44-07	692
64422	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if  == 1 or  == 2:\\n"}	2019-07-26 01:59:18-07	692
63712	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:53:46-07	692
63722	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 01:53:46-07	692
63732	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:53:47-07	692
63742	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:53:48-07	692
63752	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:53:48-07	692
63762	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:53:49-07	692
63772	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:53:51-07	692
63782	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 01:53:51-07	692
63792	multi	19sum_blank_pilots/start	load		2019-07-26 01:53:51-07	692
63802	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:53:53-07	692
63812	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:53:53-07	692
63822	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:53:54-07	692
63832	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:53:56-07	692
63842	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:53:56-07	692
63852	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 01:53:56-07	692
63862	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:53:59-07	692
63872	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 01:53:59-07	692
63882	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 01:53:59-07	692
63892	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 01:54:48-07	692
63902	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:54:50-07	692
63912	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:54:51-07	692
63922	multi	19sum_blank_pilots/start	load		2019-07-26 01:54:51-07	692
63932	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:54:54-07	692
63942	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:54:54-07	692
63952	coding	19sum_blank_pilots/plusses	load		2019-07-26 01:54:54-07	692
63962	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 01:55:49-07	692
63972	multi	19sum_blank_pilots/start	load		2019-07-26 01:55:50-07	692
63982	multi	19sum_blank_pilots/start	load		2019-07-26 01:55:50-07	692
63992	multi	19sum_blank_pilots/start	load		2019-07-26 01:55:53-07	692
64002	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 01:55:53-07	692
64012	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 01:55:53-07	692
64022	coding	19sum_blank_pilots/plusses_	load		2019-07-26 01:55:54-07	692
64032	coding	19sum_blank_pilots/plusses_	coding_keyup	{"code":"def max_odd_plus(n):\\n    "}	2019-07-26 01:56:02-07	692
64042	coding	19sum_blank_pilots/plusses_	move_on	{"code":"def max_odd_plus(n):\\n    "}	2019-07-26 01:56:05-07	692
64052	coding	19sum_blank_pilots/plusses_	unload	{"code":"def max_odd_plus(n):\\n    "}	2019-07-26 01:56:05-07	692
64062	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 01:56:05-07	692
64072	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"conf_similar","id-input":"conf_similar-1_(strongly_disagree)"},{"id":"conf_explain","id-input":"conf_explain-5_(strongly_agree)"},{"id":"learn_this","id-input":"learn_this-Yes"},{"id":"learn_recursion","id-input":"learn_recursion-No"},{"id":"learn_python","id-input":"learn_python-No"},{"id":"learn_syntax","id-input":"learn_syntax-Yes"},{"id":"tlx_mental","input":"1"},{"id":"tlx_temporal","input":"2"},{"id":"tlx_performance","input":"3"},{"id":"tlx_effort","input":"4"},{"id":"tlx_frustration","input":"5"}]	2019-07-26 01:56:31-07	692
64082	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"conf_similar","id-input":"conf_similar-1_(strongly_disagree)"},{"id":"conf_explain","id-input":"conf_explain-5_(strongly_agree)"},{"id":"learn_this","id-input":"learn_this-Yes"},{"id":"learn_recursion","id-input":"learn_recursion-No"},{"id":"learn_python","id-input":"learn_python-No"},{"id":"learn_syntax","id-input":"learn_syntax-Yes"},{"id":"tlx_mental","input":"1"},{"id":"tlx_temporal","input":"2"},{"id":"tlx_performance","input":"3"},{"id":"tlx_effort","input":"4"},{"id":"tlx_frustration","input":"5"}]	2019-07-26 01:56:31-07	692
64092	parsons	19s_algo_study/fizz_buzz	load	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 01:56:32-07	692
64102	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  for i in range(1, n+1):\\n"}	2019-07-26 01:57:01-07	692
64112	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n"}	2019-07-26 01:57:02-07	692
64122	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n  if i % 15 == 0:\\n"}	2019-07-26 01:57:05-07	692
64132	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n"}	2019-07-26 01:57:07-07	692
64142	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n"}	2019-07-26 01:57:09-07	692
64152	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n"}	2019-07-26 01:57:11-07	692
64162	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n    elif i % 3 == 0:\\n      result.append(\\"buzz\\")\\n"}	2019-07-26 01:57:14-07	692
64432	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return \\n"}	2019-07-26 01:59:21-07	692
64172	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n"}	2019-07-26 01:57:15-07	692
64182	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n"}	2019-07-26 01:57:18-07	692
64192	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n"}	2019-07-26 01:57:20-07	692
64202	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n"}	2019-07-26 01:57:22-07	692
64212	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n  return result\\n      result.append(i)\\n"}	2019-07-26 01:57:24-07	692
64222	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-26 01:57:25-07	692
64232	parsons	19s_algo_study/fizz_buzz	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-26 01:57:26-07	692
64242	parsons	19s_algo_study/fizz_buzz	move_on	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-26 01:57:28-07	692
64252	parsons	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-07-26 01:57:28-07	692
64262	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 01:57:28-07	692
64272	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:57:33-07	692
64282	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 01:57:33-07	692
64292	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:57:33-07	692
64302	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if  ==  or  == ::\\n"}	2019-07-26 01:57:40-07	692
64312	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2::\\n    return \\n"}	2019-07-26 01:57:46-07	692
64322	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2::\\n    return current_player\\n   = coin_winner(-1, , )\\n"}	2019-07-26 01:57:51-07	692
64332	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2::\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n   = coin_winner(-2, , )\\n"}	2019-07-26 01:58:09-07	692
64342	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if  == 1 or  == 2:\\n  if n == 1 or n == 2::\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n"}	2019-07-26 01:58:17-07	692
64352	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if n == 1 or n == 2::\\n"}	2019-07-26 01:58:20-07	692
64362	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player::\\n    return \\n"}	2019-07-26 01:58:46-07	692
64372	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player::\\n    return current_player\\n  else:\\n"}	2019-07-26 01:58:51-07	692
64382	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player::\\n    return current_player\\n  else:\\n    return \\n"}	2019-07-26 01:58:53-07	692
64392	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player::\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:58:59-07	692
64402	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player::\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 01:59:00-07	692
64412	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 01:59:01-07	692
64442	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  if  ==  or  == :\\n"}	2019-07-26 01:59:28-07	692
64452	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n   = coin_winner(-1, , )\\n  if a == current_player or b == current_player:\\n"}	2019-07-26 01:59:35-07	692
64462	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n   = coin_winner(-2, , )\\n  if a == current_player or b == current_player:\\n"}	2019-07-26 01:59:43-07	692
64472	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  else:\\n  if a == current_player or b == current_player:\\n"}	2019-07-26 01:59:52-07	692
64482	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n  else:\\n"}	2019-07-26 01:59:52-07	692
64492	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n    return \\n  else:\\n"}	2019-07-26 01:59:54-07	692
64502	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n  return \\n"}	2019-07-26 02:00:03-07	692
64512	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n    return ohter_player\\n"}	2019-07-26 02:00:08-07	692
64522	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n    return ohter_player\\n"}	2019-07-26 02:00:08-07	692
64532	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 02:00:08-07	692
64542	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 02:00:10-07	692
64552	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\nif  == 1 or  == 2:\\n"}	2019-07-26 02:00:14-07	692
64562	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return \\n"}	2019-07-26 02:00:19-07	692
64572	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n = coin_winner(-1, , )\\n"}	2019-07-26 02:00:25-07	692
64582	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, , current_player)\\n   = coin_winner(-2, , )\\n"}	2019-07-26 02:00:30-07	692
64592	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, , current_player)\\n  b = coin_winner(n-2, , current_player)\\n  if  ==  or  == :\\n"}	2019-07-26 02:00:34-07	692
64602	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, , current_player)\\n  b = coin_winner(n-2, , current_player)\\n    return \\n  if a == current_player or b == current_player:\\n"}	2019-07-26 02:00:38-07	692
64612	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, , current_player)\\n  b = coin_winner(n-2, , current_player)\\n  if a == current_player or b == current_player:\\n    return \\n"}	2019-07-26 02:00:39-07	692
64622	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, , current_player)\\n  b = coin_winner(n-2, , current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n"}	2019-07-26 02:00:42-07	692
64632	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, , current_player)\\n  b = coin_winner(n-2, , current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n  return \\n"}	2019-07-26 02:00:44-07	692
64642	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 02:00:53-07	692
64652	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 02:00:54-07	692
64662	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(n, current_player, other_player):\\n  if n == 1 or n == 2:\\n    return current_player\\n  a = coin_winner(n-1, other_player, current_player)\\n  b = coin_winner(n-2, other_player, current_player)\\n  if a == current_player or b == current_player:\\n    return current_player\\n  else:\\n    return other_player\\n"}	2019-07-26 02:00:54-07	692
64672	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 02:00:54-07	692
64982	coding	19sum_blank_pilots/plusses_	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 02:02:50-07	692
65002	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 02:02:50-07	692
64682	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:00:57-07	692
64692	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:00:57-07	692
64702	coding	19sum_blank_pilots/plusses	load		2019-07-26 02:00:57-07	692
64712	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 02:00:59-07	692
64722	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 02:00:59-07	692
64732	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 02:01:00-07	692
64742	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 02:01:01-07	692
64752	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 02:01:01-07	692
64762	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 02:01:01-07	692
64772	multi	19sum_blank_pilots/post_survey_pt_1	submit	[{"id":"problem_difficulty","id-input":"problem_difficulty-I_would_need_more_assistance_to_solve_The_Coin_Game_than_Odd_Plusses"},{"id":"coin_game_improvement","id-input":"coin_game_improvement-It_would_have_taken_me_longer_to_solve_before_the_study,_but_I_would_have_needed_similar_assistance."},{"id":"odd_plusses_improvement","id-input":"odd_plusses_improvement-I_would_have_needed_more_assistance_to_solve_it_before_the_study_than_I_would_need_now."},{"id":"relative_improvement","id-input":"relative_improvement-I_have_improved_more_on_problems_of_similar_type_and_difficulty_to_The_Coin_Game"},{"id":"code_arrangement_difficulty","id-input":"code_arrangement_difficulty-I_would_need_less_assistance_to_solve_a_Code_Arrangment_problem_(Code_Arrangement_is_much_easier)"},{"id":"code_arrangement_with_blanks_difficulty","id-input":"code_arrangement_with_blanks_difficulty-I_would_need_less_time_to_solve_a_Code_Arrangement_With_Blanks_problem,_but_I_would_need_similar_assistance"},{"id":"prev_hw","input":"open 1"},{"id":"code_arrangement_explain","input":"open 2"},{"id":"code_arrangement_with_blanks_explain","input":"open 3"},{"id":"hw_interface_preference","input":"open 4"},{"id":"code_arrangement_place","input":"opnen 5"},{"id":"code_arrangement_place","input":"open 6"}]	2019-07-26 02:01:31-07	692
64782	multi	19sum_blank_pilots/post_survey_pt_1	backup_submit	[{"id":"problem_difficulty","id-input":"problem_difficulty-I_would_need_more_assistance_to_solve_The_Coin_Game_than_Odd_Plusses"},{"id":"coin_game_improvement","id-input":"coin_game_improvement-It_would_have_taken_me_longer_to_solve_before_the_study,_but_I_would_have_needed_similar_assistance."},{"id":"odd_plusses_improvement","id-input":"odd_plusses_improvement-I_would_have_needed_more_assistance_to_solve_it_before_the_study_than_I_would_need_now."},{"id":"relative_improvement","id-input":"relative_improvement-I_have_improved_more_on_problems_of_similar_type_and_difficulty_to_The_Coin_Game"},{"id":"code_arrangement_difficulty","id-input":"code_arrangement_difficulty-I_would_need_less_assistance_to_solve_a_Code_Arrangment_problem_(Code_Arrangement_is_much_easier)"},{"id":"code_arrangement_with_blanks_difficulty","id-input":"code_arrangement_with_blanks_difficulty-I_would_need_less_time_to_solve_a_Code_Arrangement_With_Blanks_problem,_but_I_would_need_similar_assistance"},{"id":"prev_hw","input":"open 1"},{"id":"code_arrangement_explain","input":"open 2"},{"id":"code_arrangement_with_blanks_explain","input":"open 3"},{"id":"hw_interface_preference","input":"open 4"},{"id":"code_arrangement_place","input":"opnen 5"},{"id":"code_arrangement_place","input":"open 6"}]	2019-07-26 02:01:31-07	692
64792	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-07-26 02:01:31-07	692
64802	multi	19sum_blank_pilots/post_survey_pt_2	submit	[{"id":"gender","id-input":"gender-Male"},{"id":"year","id-input":"year-Second_Year_(Undergrad)"},{"id":"program","id-input":"program-Other_<input_type=\\"text\\"_name=\\"program\\">"},{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":"as"},{"id":"experience","input":"open 1"},{"id":"misc_interface","input":"open 2"},{"id":"misc_repeated","input":"open 3"},{"id":"misc_study","input":"open 5"}]	2019-07-26 02:01:43-07	692
64812	multi	19sum_blank_pilots/post_survey_pt_2	backup_submit	[{"id":"gender","id-input":"gender-Male"},{"id":"year","id-input":"year-Second_Year_(Undergrad)"},{"id":"program","id-input":"program-Other_<input_type=\\"text\\"_name=\\"program\\">"},{"id":"gender","input":""},{"id":"year","input":""},{"id":"program","input":"as"},{"id":"experience","input":"open 1"},{"id":"misc_interface","input":"open 2"},{"id":"misc_repeated","input":"open 3"},{"id":"misc_study","input":"open 5"}]	2019-07-26 02:01:43-07	692
64822	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 02:02:38-07	692
64832	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 02:02:40-07	692
64842	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 02:02:40-07	692
64852	coding	demo	load		2019-07-26 02:02:41-07	692
64862	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 02:02:42-07	692
64872	coding	demo	unload	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 02:02:42-07	692
64882	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 02:02:43-07	692
64892	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 02:02:44-07	692
64902	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 02:02:44-07	692
64912	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 02:02:45-07	692
64922	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 02:02:46-07	692
64932	parsons	demo_blanks	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 02:02:46-07	692
64942	multi	19sum_blank_pilots/start	load		2019-07-26 02:02:46-07	692
64952	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 02:02:47-07	692
64962	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 02:02:47-07	692
64972	coding	19sum_blank_pilots/plusses_	load		2019-07-26 02:02:48-07	692
65012	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:02:54-07	692
65022	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:02:54-07	692
65032	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 02:02:55-07	692
65042	parsons	19s_algo_study/fizz_buzz_blanks	move_on	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 02:02:57-07	692
65052	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 02:02:57-07	692
65062	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 02:02:57-07	692
65072	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:02:59-07	692
65082	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:02:59-07	692
65092	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 02:03:00-07	692
65102	parsons	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 02:03:01-07	692
65112	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 02:03:01-07	692
65122	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 02:03:01-07	692
65132	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:03:03-07	692
65142	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 02:03:03-07	692
65152	coding	19sum_blank_pilots/plusses	load		2019-07-26 02:03:03-07	692
65162	\N	\N	\N	\N	2019-07-26 02:03:05-07	\N
65172	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 17:17:45-07	282
65182	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 17:43:16-07	282
65192	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-26 17:44:08-07	282
65202	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 17:44:10-07	282
65212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 17:45:58-07	282
65222	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 17:49:39-07	282
65232	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 17:49:58-07	282
65242	coding	19sum_blank_pilots/coin_game	load		2019-07-26 18:03:47-07	2
65252	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(n, current_player, other_player):\\n"}	2019-07-26 18:04:28-07	2
65262	coding	19sum_blank_pilots/mario_1	load		2019-07-26 18:04:29-07	2
65272	coding	19sum_blank_pilots/mario_1	coding_keyup	{"code":"def mario(mario_map):\\n    "}	2019-07-26 18:04:33-07	2
65282	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 19:25:59-07	2
65292	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 19:26:08-07	2
65302	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 19:26:19-07	2
65312	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_odd_plus(n):\\n"}	2019-07-26 19:26:29-07	2
65322	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:36:57-07	2
65332	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:36:58-07	2
65342	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:37:07-07	612
65352	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:40:12-07	612
65362	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:44:11-07	612
65372	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:44:13-07	612
65382	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:44:14-07	612
65392	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:50:45-07	612
65402	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:52:38-07	612
65412	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:52:50-07	612
65422	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 19:52:52-07	612
65432	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:53:27-07	612
65442	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:54:03-07	612
65452	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:54:08-07	612
65462	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 19:54:09-07	612
65472	multi	19sum_blank_pilots/conf_cog_survey_2	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 19:54:09-07	612
65482	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:54:59-07	612
65492	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:54:59-07	612
65502	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:55:00-07	612
65512	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 19:55:03-07	612
65522	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:55:50-07	612
65532	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:55:50-07	612
65542	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:55:51-07	612
65552	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 19:55:52-07	612
65562	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:56:14-07	612
65572	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:56:16-07	612
65582	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:56:16-07	612
65592	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:56:17-07	612
65602	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:56:17-07	612
65612	multi	19sum_blank_pilots/conf_cog_survey_2	load		2019-07-26 19:56:17-07	612
65622	multi	19sum_blank_pilots/conf_cog_survey_2	submit	[{"id":"conf_similar","id-input":"conf_similar-3"},{"id":"conf_explain","id-input":"conf_explain-3"},{"id":"learn_this","id-input":"learn_this-Yes"},{"id":"learn_loops","id-input":"learn_loops-Yes"},{"id":"learn_python","id-input":"learn_python-Yes"},{"id":"learn_syntax","id-input":"learn_syntax-Yes"},{"id":"tlx_mental","input":"1"},{"id":"tlx_temporal","input":"2"},{"id":"tlx_performance","input":"3"},{"id":"tlx_effort","input":"4"},{"id":"tlx_frustration","input":"5"}]	2019-07-26 19:56:31-07	612
65632	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 19:57:01-07	612
65642	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":"asf"},{"id":"recursion_problems","input":"asdf"}]	2019-07-26 19:57:05-07	612
65652	coding	demo	load		2019-07-26 19:57:06-07	612
65662	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 19:57:23-07	612
65672	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":"afaf"},{"id":"recursion_problems","input":"afaf"}]	2019-07-26 19:57:30-07	612
65682	coding	demo	load		2019-07-26 19:57:31-07	612
65692	coding	demo	load		2019-07-26 19:58:28-07	612
65702	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":"as"},{"id":"recursion_problems","input":"as"}]	2019-07-26 20:00:09-07	612
65712	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":"as"},{"id":"recursion_problems","input":"as"}]	2019-07-26 20:00:09-07	612
65722	coding	demo	load		2019-07-26 20:00:10-07	612
65732	coding	19sum_blank_pilots/plusses	load		2019-07-26 21:41:00-07	2
65742	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    best_choice = max_odd_plus(n // 10, k)\\n    if n%2 == 1:\\n        best_choice = max(bast_choice, max_odd_plus(n // 10, k-1) + n % 10)\\n        best_choice = max(bast_choice, max_odd_plus(n // 100, k-1) + n % 100)\\n    return best_choice\\n"}	2019-07-26 21:46:18-07	2
65752	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Calling function <code>max_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'bast_choice' is not defined, line 8</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'bast_choice' is not defined, line 8</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'bast_choice' is not defined, line 8</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'bast_choice' is not defined, line 8</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase error"><span class="msg">Calling function <code>max_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'bast_choice' is not defined, line 8</span><br /></div>	2019-07-26 21:46:18-07	2
65762	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    best_choice = max_odd_plus(n // 10, k)\\n    if n%2 == 1:\\n        best_choice = max(best_choice, max_odd_plus(n // 10, k-1) + n % 10)\\n        best_choice = max(best_choice, max_odd_plus(n // 100, k-1) + n % 100)\\n    return best_choice\\n"}	2019-07-26 21:46:24-07	2
65772	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-07-26 21:46:24-07	2
65782	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    best_choice = max_odd_plus(n // 10, k)\\n    take_one = 0\\n    take_two = 0\\n    if n%2 == 1:\\n        take_one = max_odd_plus(n // 10, k-1) + n % 10\\n        take_two = max_odd_plus(n // 100, k-1) + n % 100\\n    return max(best_choice, take_one, take_two)\\n"}	2019-07-26 21:47:16-07	2
66672	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:30:28-07	712
65792	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-07-26 21:47:17-07	2
65802	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 6</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 6</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 6</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 6</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 6</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 6</span><br /></div>	2019-07-26 21:50:49-07	2
65812	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    skip = max_k_odd_plus(n // 10, k)\\n    if n%2 == 0:\\n        return skip\\n    take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n    take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n    return max(best_choice, take_one, take_two)\\n"}	2019-07-26 21:50:59-07	2
65822	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'best_choice' is not defined, line 11</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'best_choice' is not defined, line 11</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'best_choice' is not defined, line 11</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'best_choice' is not defined, line 11</span><br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'best_choice' is not defined, line 11</span><br /></div>	2019-07-26 21:50:59-07	2
65832	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    skip = max_k_odd_plus(n // 10, k)\\n    if n%2 == 0:\\n        return skip\\n    take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n    take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n    return max(skip, take_one, take_two)\\n"}	2019-07-26 21:51:09-07	2
65842	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-07-26 21:51:09-07	2
65852	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-26 21:51:26-07	282
65862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-26 21:51:27-07	282
65872	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    skip = max_k_odd_plus(n // 10, k)\\n    if n%2 == 0:\\n        return skip\\n    take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n    take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n    return max(skip, take_one, take_two)\\n"}	2019-07-26 21:54:01-07	2
65882	coding	19sum_blank_pilots/coin_game	load		2019-07-26 21:54:02-07	2
65892	coding	19sum_blank_pilots/coin_game	load		2019-07-26 22:01:01-07	2
65902	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(rows, current_player, other_player):\\n    if \\n    for row in rows:\\n        if"}	2019-07-26 22:07:57-07	2
65912	coding	19sum_blank_pilots/coin_game	load		2019-07-26 22:09:25-07	2
65922	coding	19sum_blank_pilots/coin_game	coding_keyup	{"code":"def coin_winner(rows, current_player, other_player):\\n    "}	2019-07-26 22:09:26-07	2
65932	coding	19sum_blank_pilots/coin_game	load		2019-07-26 22:13:21-07	2
65942	coding	19sum_blank_pilots/coin_game	coding_keyup	{"code":"def coin_winner(row1, row2, row3, current_player, other_player):\\n    "}	2019-07-26 22:13:22-07	2
65952	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(0, 5, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 1, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 1, 1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 0, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 5, 7, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 5, 6, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 4, 7, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(2, 5, 7, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div>	2019-07-26 22:15:02-07	2
65962	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n"}	2019-07-26 22:17:53-07	2
65972	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n"}	2019-07-26 22:17:55-07	2
65982	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n"}	2019-07-26 22:17:56-07	2
65992	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n"}	2019-07-26 22:17:56-07	2
66002	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n"}	2019-07-26 22:17:57-07	2
66012	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n"}	2019-07-26 22:17:59-07	2
66022	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\nfor i in range(row1):\\n"}	2019-07-26 22:18:01-07	2
66032	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    for i in range(row2):\\n"}	2019-07-26 22:18:03-07	2
66042	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n  for i in range(row2):\\n  for i in range(row3):\\n"}	2019-07-26 22:18:07-07	2
66052	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n  for i in range(row2):\\n  for i in range(row3):\\n"}	2019-07-26 22:18:10-07	2
66062	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n  for i in range(row3):\\n"}	2019-07-26 22:18:12-07	2
66072	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n"}	2019-07-26 22:18:14-07	2
66082	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n"}	2019-07-26 22:18:18-07	2
66092	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n"}	2019-07-26 22:18:20-07	2
66102	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n        return curr\\n"}	2019-07-26 22:18:22-07	2
66112	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:18:25-07	2
66122	parsons	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:18:41-07	2
66132	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if row1 == 0 and row2 == 0 and row3 == 0:\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:18:45-07	2
66142	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if row1 == 0 and row2 == 0 and row3 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:18:46-07	2
66152	parsons	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if row1 == 0 and row2 == 0 and row3 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:18:47-07	2
66162	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for  in range():\\n"}	2019-07-26 22:18:54-07	2
66172	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for  in range():\\n  for  in range():\\n"}	2019-07-26 22:18:55-07	2
66182	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for  in range():\\n  for  in range():\\n  for  in range():\\n"}	2019-07-26 22:18:57-07	2
66192	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for  in range():\\n    if  == 0 and  == 0 and  == 0:\\n  for  in range():\\n  for  in range():\\n"}	2019-07-26 22:18:59-07	2
66202	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  for  in range():\\n    if  == 0 and  == 0 and  == 0:\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n"}	2019-07-26 22:19:02-07	2
66212	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n    if  == 0 and  == 0 and  == 0:\\n  for  in range():\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n"}	2019-07-26 22:19:03-07	2
66222	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n"}	2019-07-26 22:19:05-07	2
66232	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n"}	2019-07-26 22:19:06-07	2
66242	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n"}	2019-07-26 22:19:08-07	2
66252	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n"}	2019-07-26 22:19:11-07	2
66262	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n"}	2019-07-26 22:19:14-07	2
66272	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n"}	2019-07-26 22:19:16-07	2
66282	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n"}	2019-07-26 22:19:18-07	2
66292	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if  == 0 and  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\n  for  in range():\\n    if coin_winner(, , , , ) == :\\n    return \\nreturn \\n"}	2019-07-26 22:19:21-07	2
66302	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if row1 == 0 and row2 == 0 and row3 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n    return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n    return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n    return curr\\n  return other\\n"}	2019-07-26 22:20:16-07	2
66312	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if row1 == 0 and row2 == 0 and row3 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:20:24-07	2
66322	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if row1 == 0 and row2 == 0 and row3 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:20:49-07	2
66332	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:24:34-07	2
66342	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\nfor i in range(row1):\\n"}	2019-07-26 22:24:38-07	2
66352	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n  for i in range(row2):\\n"}	2019-07-26 22:24:41-07	2
66362	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n"}	2019-07-26 22:24:43-07	2
66372	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n"}	2019-07-26 22:24:45-07	2
66382	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n"}	2019-07-26 22:24:46-07	2
66392	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n    return curr\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n"}	2019-07-26 22:24:49-07	2
66402	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n"}	2019-07-26 22:24:51-07	2
66682	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:30:29-07	712
66412	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n"}	2019-07-26 22:24:53-07	2
66422	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n    return other\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n"}	2019-07-26 22:24:55-07	2
66432	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n    return other\\n"}	2019-07-26 22:24:58-07	2
66442	parsons	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:24:59-07	2
66452	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:25:05-07	2
66462	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:25:06-07	2
66472	parsons	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:25:07-07	2
66482	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, row3, curr, other):\\n  if row1 == 0 and row2 == 0 and row3 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, row3, other, curr) == curr:\\n      return curr\\n  for i in range(row3):\\n    if coin_winner(row1, row2, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:25:47-07	2
66492	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:25:48-07	2
66502	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for  in range():\\n"}	2019-07-26 22:25:50-07	2
66512	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for  in range():\\n  for  in range():\\n"}	2019-07-26 22:25:53-07	2
66522	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n  for  in range():\\n  for  in range():\\n"}	2019-07-26 22:25:55-07	2
66532	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n    return \\n  for  in range():\\n  for  in range():\\n"}	2019-07-26 22:25:57-07	2
66542	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n  for  in range():\\n"}	2019-07-26 22:26:00-07	2
66552	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n  for  in range():\\n    if coin_winner(, , , ) == :\\n"}	2019-07-26 22:26:02-07	2
66562	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-07-26 22:26:03-07	282
66572	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n"}	2019-07-26 22:26:05-07	2
66582	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n"}	2019-07-26 22:26:07-07	2
66592	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n  return \\n      return \\n"}	2019-07-26 22:26:11-07	2
66602	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n    print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-07-26 22:26:14-07	282
66612	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n    return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  return \\n"}	2019-07-26 22:26:14-07	2
66622	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:26:43-07	2
66632	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:29:25-07	702
66642	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:29:47-07	702
66652	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-07-26 22:30:14-07	2
66662	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:30:15-07	2
66692	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:31:22-07	2
66702	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:31:24-07	2
66712	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:34:21-07	2
66722	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:35:57-07	2
66732	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:36:02-07	2
66742	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:36:02-07	2
66752	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 22:36:03-07	2
66762	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:36:10-07	2
66772	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:37:12-07	2
66782	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:37:14-07	2
66792	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:37:16-07	2
66802	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 22:37:17-07	2
66812	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 22:37:21-07	2
66822	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 22:37:21-07	2
66832	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-26 22:37:24-07	2
66842	coding	demo	load		2019-07-26 22:37:32-07	612
66852	coding	demo	load		2019-07-26 22:37:34-07	612
66862	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 22:37:37-07	612
66872	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:37:40-07	612
66882	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:37:54-07	612
66892	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:37:56-07	612
66902	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:37:58-07	612
66912	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:37:59-07	612
66922	multi	19sum_blank_pilots/start	load		2019-07-26 22:38:00-07	612
66932	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 22:38:02-07	612
66942	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 22:38:02-07	612
66952	coding	19sum_blank_pilots/plusses_	load		2019-07-26 22:38:04-07	612
66962	coding	19sum_blank_pilots/plusses_	move_on	{"code":"def max_odd_plus(n, k):\\n"}	2019-07-26 22:38:06-07	612
66972	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 22:38:07-07	612
66982	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 22:38:09-07	612
66992	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 22:38:09-07	612
67002	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 22:38:11-07	612
67012	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:38:59-07	612
67022	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:00-07	612
67032	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:01-07	612
67042	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:02-07	612
67052	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:04-07	612
67062	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:05-07	612
67072	multi	19sum_blank_pilots/pre_survey	load		2019-07-26 22:39:22-07	722
67082	multi	19sum_blank_pilots/pre_survey	submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 22:39:24-07	722
67092	multi	19sum_blank_pilots/pre_survey	backup_submit	[{"id":"more_practice","input":""},{"id":"recursion_problems","input":""}]	2019-07-26 22:39:24-07	722
67102	coding	demo	load		2019-07-26 22:39:26-07	722
67112	coding	demo	move_on	{"code":"def return_three():\\n\\t# You can insert tabbed lines as well (necessary to Python)\\n\\tx = 2\\n\\tprint('The code is running! x =', x)\\n\\treturn 2\\n"}	2019-07-26 22:39:28-07	722
67122	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:30-07	722
67132	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:32-07	722
67142	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:34-07	722
67152	parsons	demo_blanks	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-26 22:39:37-07	722
67162	multi	19sum_blank_pilots/start	load		2019-07-26 22:39:38-07	722
67172	multi	19sum_blank_pilots/start	submit	[]	2019-07-26 22:39:39-07	722
67182	multi	19sum_blank_pilots/start	backup_submit	[]	2019-07-26 22:39:39-07	722
67192	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-26 22:39:41-07	722
67202	parsons	19sum_blank_pilots/plusses_blanks	move_on	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-26 22:39:43-07	722
67212	multi	19sum_blank_pilots/conf_cog_survey	load		2019-07-26 22:39:44-07	722
67222	multi	19sum_blank_pilots/conf_cog_survey	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 22:39:46-07	722
67232	multi	19sum_blank_pilots/conf_cog_survey	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 22:39:46-07	722
67242	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 22:39:48-07	722
67252	parsons	19s_algo_study/fizz_buzz_blanks	move_on	{"code":"def fizz_buzz(n):\\n"}	2019-07-26 22:39:49-07	722
67262	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-07-26 22:39:50-07	722
67272	multi	19sum_blank_pilots/conf_cog_survey_3	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 22:39:52-07	722
67282	multi	19sum_blank_pilots/conf_cog_survey_3	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""}]	2019-07-26 22:39:52-07	722
67292	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:39:54-07	722
67302	parsons	19sum_blank_pilots/coin_game_blanks	move_on	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-07-26 22:39:56-07	722
67312	multi	19sum_blank_pilots/conf_cog_survey_4	load		2019-07-26 22:39:57-07	722
67322	multi	19sum_blank_pilots/conf_cog_survey_4	submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 22:39:58-07	722
67332	multi	19sum_blank_pilots/conf_cog_survey_4	backup_submit	[{"id":"tlx_mental","input":""},{"id":"tlx_temporal","input":""},{"id":"tlx_performance","input":""},{"id":"tlx_effort","input":""},{"id":"tlx_frustration","input":""},{"id":"any_benefit","input":""}]	2019-07-26 22:39:58-07	722
67342	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-26 22:40:00-07	722
67352	parsons	19sum_blank_pilots/plusses	move_on	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-26 22:40:04-07	722
67362	multi	19sum_blank_pilots/conf_cog_survey_5	load		2019-07-26 22:40:06-07	722
67372	multi	19sum_blank_pilots/conf_cog_survey_5	submit	[{"id":"time_needed","input":""},{"id":"understanding","input":""}]	2019-07-26 22:40:07-07	722
67382	multi	19sum_blank_pilots/conf_cog_survey_5	backup_submit	[{"id":"time_needed","input":""},{"id":"understanding","input":""}]	2019-07-26 22:40:07-07	722
67392	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-07-26 22:40:08-07	722
67402	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":""}	2019-07-29 18:10:47-07	2
67412	coding	19sum_blank_pilots/coin_game	load		2019-07-30 00:03:43-07	2
67422	coding	19sum_blank_pilots/coin_game	coding_keyup	{"code":""}	2019-07-30 00:03:45-07	2
67432	coding	19sum_blank_pilots/coin_game	coding_keyup_backup	{"code":"def coin_winner(row1, row2, curr, other):\\\\n  if row1 == 0 and row2 == 0:\\\\n    return other\\\\n  for i in range(row1):\\\\n    if coin_winner(row1 - i, row2, other, curr) == curr:\\\\n      return curr\\\\n  for j in range(row2):\\\\n    if coin_winner(row1, row2-j, other, curr) == curr:\\\\n      return curr\\\\n  return other\\\\n"}	2019-07-30 00:03:46-07	2
67442	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n    if row1 == 0 and row2 == 0:\\n        return other\\n    for i in range(row1):\\n        if coin_winner(row1 - i, row2, other, curr) == curr:\\n            return curr\\\\n  for j in range(row2):\\n        if coin_winner(row1, row2-j, other, curr) == curr:\\n            return curr\\n    return other\\\\n"}	2019-07-30 00:04:21-07	2
67452	coding	19sum_blank_pilots/coin_game	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected character after line continuation character (<string>, line 6)</span><br /></div>	2019-07-30 00:04:21-07	2
67462	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n    if row1 == 0 and row2 == 0:\\n        return other\\n    for i in range(row1):\\n        if coin_winner(row1 - i, row2, other, curr) == curr:\\n            return curr\\\\n  for j in range(row2)\\n        if coin_winner(row1, row2-j, other, curr) == curr:\\n            return curr\\n    return other\\\\n"}	2019-07-30 00:04:30-07	2
67472	coding	19sum_blank_pilots/coin_game	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected character after line continuation character (<string>, line 6)</span><br /></div>	2019-07-30 00:04:30-07	2
67482	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n    if row1 == 0 and row2 == 0:\\n        return other\\n    for i in range(row1):\\n        if coin_winner(row1 - i, row2, other, curr) == curr:\\n            return curr\\n    for j in range(row2):\\n        if coin_winner(row1, row2-j, other, curr) == curr:\\n            return curr\\n    return other\\\\n"}	2019-07-30 00:04:38-07	2
67492	coding	19sum_blank_pilots/coin_game	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected character after line continuation character (<string>, line 10)</span><br /></div>	2019-07-30 00:04:39-07	2
67502	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n    if row1 == 0 and row2 == 0:\\n        return other\\n    for i in range(row1):\\n        if coin_winner(row1 - i, row2, other, curr) == curr:\\n            return curr\\n    for j in range(row2):\\n        if coin_winner(row1, row2-j, other, curr) == curr:\\n            return curr\\n    return other"}	2019-07-30 00:04:43-07	2
67512	coding	19sum_blank_pilots/coin_game	results	<div class="testcase error"><span class="msg">Calling function <code>coin_winner(1, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">maximum recursion depth exceeded in comparison, line 4</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_winner(0, 5, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">maximum recursion depth exceeded in comparison, line 4</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_winner(1, 1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">maximum recursion depth exceeded in comparison, line 4</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_winner(1, 0, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">maximum recursion depth exceeded in comparison, line 4</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_winner(3, 3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">maximum recursion depth exceeded in comparison, line 4</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_winner(3, 4, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">maximum recursion depth exceeded in comparison, line 4</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_winner(3, 20, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">maximum recursion depth exceeded in comparison, line 4</span><br /></div>	2019-07-30 00:04:43-07	2
67522	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n    if row1 == 0 and row2 == 0:\\n        return other\\n    for i in range(row1):\\n        if coin_winner(row1 - i, row2, other, curr) == curr:\\n            return curr\\n    for j in range(row2):\\n        if coin_winner(row1, row2-j, other, curr) == curr:\\n            return curr\\n    return other"}	2019-07-30 00:04:49-07	2
67532	coding	19sum_blank_pilots/plusses	load		2019-07-30 00:17:30-07	2
67552	coding	19sum_blank_pilots/plusses	coding_keyup	{"code":""}	2019-07-30 00:20:37-07	2
67562	coding	19sum_blank_pilots/plusses	coding_keyup_backup	{"code":"{\\"code\\":\\"def max_odd_plus(n, k):\\\\n    if k == 0:\\\\n        return 0 \\\\n    if n == 0:\\\\n        return 0\\\\n    if n < 10 and isodd(n):\\\\n        return n \\\\n    lasto = n % 10\\\\n    lastt = n % 100\\\\n    wo = 0 \\\\n    wt = 0 \\\\n    \\\\n    if isodd(lasto):\\\\n        wo = lasto + max_odd_plus(n // 10, k - 1)\\\\n    if isodd(lastt):\\\\n        wt = lastt + max_odd_plus(n // 100, k - 1)\\\\n    if not isodd(lasto) and not isodd(lastt):\\\\n        return max(max_odd_plus(n//10, k), max_odd_plus(n//100, k))\\\\n    \\\\n    return max(wo, wt)\\\\n    \\\\ndef isodd(n):\\\\n    return n % 2 == 1\\"}"}	2019-07-30 00:20:38-07	2
67572	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">max_k_odd_plus not defined! Check for any typos</span><br /></div>	2019-07-30 00:22:01-07	2
67582	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if k == 0:\\n        return 0 \\n    if n == 0:\\n        return 0\\n    if n < 10 and isodd(n):\\n        return n \\n    lasto = n % 10\\n    lastt = n % 100\\n    wo = 0 \\n    wt = 0 \\n    \\n    if isodd(lasto):\\n        wo = lasto + max_odd_plus(n // 10, k - 1)\\n    if isodd(lastt):\\n        wt = lastt + max_odd_plus(n // 100, k - 1)\\n    if not isodd(lasto) and not isodd(lastt):\\n        return max(max_odd_plus(n//10, k), max_odd_plus(n//100, k))\\n    \\n    return max(wo, wt)\\ndef isodd(n):\\n    return n % 2 == 1"}	2019-07-30 00:22:07-07	2
67592	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 14</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 14</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 14</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 14</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 18</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'max_odd_plus' is not defined, line 18</span><br /></div>	2019-07-30 00:22:07-07	2
67602	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if k == 0:\\n        return 0 \\n    if n == 0:\\n        return 0\\n    if n < 10 and isodd(n):\\n        return n \\n    lasto = n % 10\\n    lastt = n % 100\\n    wo = 0 \\n    wt = 0 \\n    \\n    if isodd(lasto):\\n        wo = lasto + max_k_odd_plus(n // 10, k - 1)\\n    if isodd(lastt):\\n        wt = lastt + max_k_odd_plus(n // 100, k - 1)\\n    if not isodd(lasto) and not isodd(lastt):\\n        return max(max_k_odd_plus(n//10, k), max_k_odd_plus(n//100, k))\\n    \\n    return max(wo, wt)\\ndef isodd(n):\\n    return n % 2 == 1"}	2019-07-30 00:22:22-07	2
67612	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>53</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-07-30 00:22:22-07	2
67622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-30 18:27:16-07	632
67632	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-30 18:27:28-07	632
67642	coding	19sum_blank_pilots/coin_game	load		2019-07-30 20:52:55-07	2
67652	coding	19sum_blank_pilots/coin_game	coding_keyup	{"code":""}	2019-07-30 20:52:56-07	2
67662	coding	19sum_blank_pilots/coin_game	coding_keyup_backup	{"code":"def coin_winner(row1, row2, current_player, other_player):\\\\n    \\\\n    if not row1 or not row2:\\\\n        return current_player\\\\n    else:\\\\n        if row1 >= row2:\\\\n            row1 -= 1\\\\n            return coin_winner(row1, row2, other_player, current_player)\\\\n        elif row1 < row2:\\\\n            row2 -= 1\\\\n            return coin_winner(row1, row2, other_player, current_player)\\\\n"}	2019-07-30 20:52:57-07	2
67672	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n    if not row1 or not row2:\\n        return current_player\\n    else:\\n        if row1 >= row2:\\n            row1 -= 1\\n            return coin_winner(row1, row2, other_player, current_player)\\n        elif row1 < row2:\\n            row2 -= 1\\n            return coin_winner(row1, row2, other_player, current_player)"}	2019-07-30 20:53:31-07	2
67822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:53:39-07	632
67832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:54:09-07	632
67842	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:55:21-07	632
67682	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(0, 5, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 4, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 20, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div>	2019-07-30 20:53:31-07	2
67692	coding	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n    if not row1 or not row2:\\n        return current_player\\n    else:\\n        if row1 >= row2:\\n            row1 -= 1\\n            return coin_winner(row1, row2, other_player, current_player)\\n        elif row1 < row2:\\n            row2 -= 1\\n            return coin_winner(row1, row2, other_player, current_player)"}	2019-07-30 20:53:46-07	2
67702	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(0, 5, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 4, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>coin_winner(3, 19, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 20, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div>	2019-07-30 20:53:46-07	2
67712	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(0, 5, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 4, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 19, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(3, 20, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div>	2019-07-30 20:55:52-07	2
67722	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, curr, other): #0given\\n    if row1 == 0 and row2 == 0:\\n        return other\\n    for i in range(row1):\\n        if coin_winner(i, row2, other, curr) == curr:\\n            return curr\\n    for i in range(row2):\\n        if coin_winner(row1, i, other, curr) == curr:\\n            return curr\\n    return other"}	2019-07-30 20:55:55-07	2
67732	coding	19sum_blank_pilots/coin_game	load		2019-07-30 20:56:08-07	2
67742	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-30 20:58:23-07	632
67752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:12:35-07	632
67762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:16:13-07	632
67772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:35:05-07	632
67782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:43:13-07	632
67792	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:43:42-07	632
67802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:50:58-07	632
67812	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:52:13-07	632
72302	parsons	19s_algo_study/fizz_buzz	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-05 21:50:42-07	2
67852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:55:39-07	632
67862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:56:19-07	632
67872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 18:57:57-07	632
67882	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-31 21:06:14-07	2
67892	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\nif k == 0:\\n"}	2019-07-31 21:06:18-07	2
67902	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n"}	2019-07-31 21:06:20-07	2
67912	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  return skip\\n"}	2019-07-31 21:06:23-07	2
67922	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  return skip\\n"}	2019-07-31 21:06:25-07	2
67932	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  return skip\\n"}	2019-07-31 21:06:28-07	2
67942	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-31 21:06:44-07	2
67952	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-07-31 21:08:11-07	2
67962	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n"}	2019-07-31 21:08:14-07	2
67972	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n"}	2019-07-31 21:08:16-07	2
67982	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n"}	2019-07-31 21:08:17-07	2
67992	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n"}	2019-07-31 21:08:19-07	2
68002	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  if n%2 == 0:\\n"}	2019-07-31 21:08:21-07	2
68012	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  if n%2 == 0:\\n    return skip\\n"}	2019-07-31 21:08:22-07	2
68022	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  if n%2 == 0:\\n    skip = max_k_odd_plus(n // 10, k)\\n    return skip\\n"}	2019-07-31 21:08:24-07	2
68032	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n          take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  if n%2 == 0:\\n    skip = max_k_odd_plus(n // 10, k)\\n    return skip\\n"}	2019-07-31 21:08:25-07	2
68042	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  if n%2 == 0:\\n    skip = max_k_odd_plus(n // 10, k)\\n    return skip\\n          take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n"}	2019-07-31 21:08:27-07	2
68052	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  if n%2 == 0:\\n    skip = max_k_odd_plus(n // 10, k)\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n"}	2019-07-31 21:08:29-07	2
68062	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  if n%2 == 0:\\n    skip = max_k_odd_plus(n // 10, k)\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\nreturn max(skip, take_one, take_two)\\n"}	2019-07-31 21:08:30-07	2
68072	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  if n%2 == 0:\\n    skip = max_k_odd_plus(n // 10, k)\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-07-31 21:08:33-07	2
68082	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n    skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-07-31 21:08:38-07	2
68092	parsons	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-07-31 21:08:39-07	2
68102	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-07-31 21:08:41-07	2
68112	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 21:49:48-07	632
68122	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 21:49:49-07	632
68132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 21:55:30-07	632
68142	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 21:57:02-07	632
68152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 21:58:35-07	632
68162	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 21:58:59-07	632
68172	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:02:28-07	632
68182	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:20:45-07	632
68192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:21:20-07	632
68202	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:23:58-07	632
68212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:28:30-07	632
68222	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:28:49-07	632
68232	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:29:43-07	632
68242	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:31:17-07	632
68252	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:56:29-07	632
68262	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-31 22:56:55-07	632
68272	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-31 22:56:58-07	2
68282	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-07-31 22:57:01-07	2
68292	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:57:03-07	2
68302	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n    print() #!ORIGINALprint(!BLANK) #blank\\n    print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-31 22:57:25-07	2
68312	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:57:34-07	282
68322	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:58:35-07	282
68332	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n    print() #!ORIGINALprint(!BLANK) #blank\\n    print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-31 22:59:25-07	282
68342	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:59:27-07	282
68352	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n    print() #!ORIGINALprint(!BLANK) #blank\\n    print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-31 22:59:42-07	282
68362	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 22:59:43-07	282
68372	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:01:40-07	282
68382	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:01:56-07	282
68392	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n    print() #!ORIGINALprint(!BLANK) #blank\\n  # #!ORIGINAL# !BLANK #blank\\n    print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-07-31 23:02:42-07	282
68402	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:02:44-07	282
68412	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:03:35-07	282
68422	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:04:28-07	282
68432	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:06:33-07	282
68442	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:13:04-07	282
68452	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-07-31 23:23:02-07	282
68462	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-01 17:42:46-07	2
68472	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:12:52-07	632
68482	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:17:10-07	282
68492	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:18:34-07	282
68502	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:20:23-07	282
68512	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:21:00-07	282
68522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:21:01-07	282
68532	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:21:18-07	282
68542	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 18:22:10-07	282
68552	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:22:12-07	282
68562	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 18:22:59-07	282
68572	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:23:01-07	282
68582	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 18:23:36-07	282
68592	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:23:38-07	282
68602	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:34:00-07	282
68612	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:46:24-07	282
68622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 18:58:47-07	282
68632	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-01 22:07:04-07	2
68642	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n"}	2019-08-01 22:07:50-07	2
68652	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n"}	2019-08-01 22:07:52-07	2
68662	parsons	demo	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = 2\\n  x = x + 1\\n  # \\n"}	2019-08-01 22:07:53-07	2
68672	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-01 22:19:07-07	2
68682	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n    print() #!ORIGINALprint(!BLANK) #blank\\nreturn -1\\n"}	2019-08-01 22:28:22-07	282
68692	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n    print() #!ORIGINALprint(!BLANK) #blank\\nreturn -1\\n"}	2019-08-01 22:28:22-07	282
68702	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:28:24-07	282
68712	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:29:16-07	282
68722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:29:18-07	282
68732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:30:41-07	282
68742	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:31:16-07	282
68752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:31:17-07	282
68762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:32:23-07	282
68772	parsons	19s_algo_study/binary_search_1	submit	{"code":"def binary_search(target, arr):\\n  print(target) #!ORIGINALprint(!BLANK) #blanktarget\\n  print(arr) #!ORIGINALprint(!BLANK) #blankarr\\n"}	2019-08-01 22:33:14-07	282
68782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:34:55-07	282
68792	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:35:04-07	282
68802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:35:05-07	282
68812	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:35:18-07	282
68822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:35:19-07	282
68832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:42:09-07	282
68842	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:44:35-07	282
68852	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:45:01-07	282
68862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:45:02-07	282
68872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:47:11-07	282
68882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:51:23-07	282
68892	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:51:49-07	282
68902	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:51:50-07	282
68912	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:52:12-07	282
68922	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:52:14-07	282
68932	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:53:03-07	282
68942	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:53:04-07	282
68952	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:53:24-07	282
68962	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:53:25-07	282
68972	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:53:59-07	282
68982	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:54:00-07	282
68992	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:54:40-07	282
69002	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:54:42-07	282
69012	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:54:51-07	282
69022	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:54:52-07	282
69032	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:55:55-07	282
69042	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:57:41-07	282
69052	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:57:54-07	282
69062	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:57:55-07	282
69072	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:58:32-07	282
69082	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:58:33-07	282
69092	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:58:56-07	282
69102	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:58:58-07	282
69112	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 22:59:31-07	282
69122	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 22:59:33-07	282
69132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:00:49-07	282
69142	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 23:01:15-07	282
69152	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:01:16-07	282
69162	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 23:01:42-07	282
69172	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:01:44-07	282
69182	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 23:01:57-07	282
69192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:01:59-07	282
69202	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 23:02:56-07	282
69212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:02:57-07	282
69222	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 23:03:27-07	282
69232	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:03:28-07	282
69242	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 23:03:50-07	282
69252	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:03:51-07	282
69262	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:05:09-07	282
69272	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:06:55-07	282
69282	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:09:06-07	282
69292	parsons	19s_algo_study/binary_search_1	unload	{"code":""}	2019-08-01 23:09:35-07	282
69302	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:09:36-07	282
69312	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:11:00-07	282
69322	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:20:47-07	282
69332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:23:19-07	282
69342	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-01 23:24:13-07	282
69352	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:24:14-07	282
69362	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:34:12-07	282
69372	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:37:17-07	282
69382	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  # #!ORIGINAL# !BLANK #blank\\n"}	2019-08-01 23:37:40-07	282
69392	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:37:42-07	282
69402	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:40:52-07	282
69412	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-01 23:42:02-07	282
69422	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:11:00-07	282
69432	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:12:34-07	282
69442	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:13:39-07	282
69452	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 00:14:13-07	282
69462	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:14:14-07	282
69472	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:30:53-07	282
69482	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:35:36-07	282
69492	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:47:29-07	282
69502	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  # #!ORIGINAL# !BLANK #blank\\n"}	2019-08-02 00:47:54-07	282
69512	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:47:55-07	282
69522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:49:06-07	282
69532	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 00:49:33-07	282
69542	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:49:34-07	282
69552	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:51:21-07	282
69562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:52:32-07	282
69572	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n    print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 00:53:09-07	282
69582	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:53:10-07	282
69592	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 00:54:42-07	282
69602	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 00:54:48-07	282
69612	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 18:08:37-07	282
69622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 18:09:55-07	282
69632	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 18:10:16-07	282
69642	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 18:10:18-07	282
69652	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n      x = x + 1\\n"}	2019-08-02 18:34:03-07	2
69662	multi	19sum_blank_pilots/start	load		2019-08-02 18:48:18-07	2
69672	multi	19sum_blank_pilots/start	submit	[]	2019-08-02 18:48:20-07	2
69682	multi	19sum_blank_pilots/start	backup_submit	[]	2019-08-02 18:48:20-07	2
69692	coding	19sum_blank_pilots/coin_game	load		2019-08-02 18:48:22-07	2
69862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:18:26-07	282
69872	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:18:36-07	282
69882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:18:38-07	282
72312	parsons	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-08-05 21:50:43-07	2
69702	coding	19sum_blank_pilots/coin_game	coding_keyup_backup	{"code":"def coin_winner(row1, row2, current_player, other_player):\\\\n# so each action leads to a different recursive call.  What's the base case?\\\\n    # what's the logic here?\\\\n    if row1 == 0 or row2 == 0:\\\\n        return current_player\\\\n    if row1 == 1 and row2 == 1:\\\\n        return other_player\\\\n    if row1 == 1 and row2 == 0 or row1 == 0 and row2 == 0:\\\\n        return current_player\\\\n    # # current takes 1 from row1\\\\n    # coin_winner(row1 - 1, row2, other_player, current_player)\\\\n    # # current takes 1 from row2\\\\n    # coin_winner(row1, row2 - 1, other_player, current_player)\\\\n    # # ok how to loop this pattern?\\\\n    while row1 > 0 and row2 > 0:\\\\n        #print('row1, row2 :', row1, row2)\\\\n        for i in range(1, max(row1, row2)):\\\\n            #print(current_player, 'drew')\\\\n            coin_winner(row1 - i, row2, other_player, current_player) or (row1, row2 - i, other_player, current_player)"}	2019-08-02 18:55:05-07	2
69712	coding	19sum_blank_pilots/coin_game	results	<div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(0, 5, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Alice</code> , your code returned <code>Alice</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 1, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>coin_winner(1, 0, 'Bob', 'Alice')</code>.</span><br /><span class="msg">Expected result to be <code>Bob</code> , your code returned <code>Bob</code></span> <br /></div><div class="testcase error"><span class="msg">Calling function <code>coin_winner(3, 3, 'Alice', 'Bob')</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">Function call took too long! Check for any infinite loops.</span><br /></div>	2019-08-02 18:56:59-07	2
69722	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 18:58:54-07	282
69732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 18:58:55-07	282
69742	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n# so each action leads to a different recursive call.  What's the base case?\\n    # what's the logic here?\\n    if row1 == 0 or row2 == 0:\\n        return current_player\\n    if row1 == 1 and row2 == 1:\\n        return other_player\\n    if row1 == 1 and row2 == 0 or row1 == 0 and row2 == 0:\\n        return current_player\\n    # # current takes 1 from row1\\n    # coin_winner(row1 - 1, row2, other_player, current_player)\\n    # # current takes 1 from row2\\n    # coin_winner(row1, row2 - 1, other_player, current_player)\\n    # # ok how to loop this pattern?\\n    while row1 > 0 and row2 > 0:\\n        #print('row1, row2 :', row1, row2)\\n        for i in range(1, max(row1, row2)):\\n            #print(current_player, 'drew')\\n            coin_winner(row1 - i, row2, other_player, current_player) or (row1, row2 - i, other_player, current_player)"}	2019-08-02 19:05:03-07	2
69752	coding	19sum_blank_pilots/plusses	load		2019-08-02 19:05:07-07	2
69762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:06:23-07	282
69772	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  # #!ORIGINAL# !BLANK #blank\\n"}	2019-08-02 19:06:57-07	282
69782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:06:59-07	282
69792	coding	19sum_blank_pilots/plusses	coding_keyup_backup	{"code":"def max_k_odd_plus(n, k):\\\\n  if n == 0:\\\\n    return 0\\\\n  if k == 0:\\\\n    return 0\\\\n  if n%2 == 0:\\\\n    lastdigiteven = max_k_odd_plus(n // 10, k)\\\\n    # drops last digit.\\\\n    a = max_k_odd_plus(lastdigiteven // 10, k-1) + n % 10\\\\n    # drops last digit and decrements k by 1, also adds last digit\\\\n    b = max_k_odd_plus(lastdigiteven // 100, k-1) + n % 100\\\\n    # drops last two digits, decrements by one, aand uses last two digits. \\\\n    return max(lastdigiteven, a, b)\\\\n    # Probably at the end.\\\\n  return max_k_odd_plus(n//10, k)\\\\n"}	2019-08-02 19:07:02-07	2
69802	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    if n%2 == 0:\\n        lastdigiteven = max_k_odd_plus(n // 10, k)\\n    # drops last digit.\\n    a = max_k_odd_plus(lastdigiteven // 10, k-1) + n % 10\\n    # drops last digit and decrements k by 1, also adds last digit\\n    b = max_k_odd_plus(lastdigiteven // 100, k-1) + n % 100\\n    # drops last two digits, decrements by one, aand uses last two digits. \\n    return max(lastdigiteven, a, b)\\n    # Probably at the end.\\n    return max_k_odd_plus(n//10, k)\\\\n"}	2019-08-02 19:07:41-07	2
69812	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected character after line continuation character (<string>, line 15)</span><br /></div>	2019-08-02 19:07:41-07	2
69822	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    if n%2 == 0:\\n        lastdigiteven = max_k_odd_plus(n // 10, k)\\n    # drops last digit.\\n    a = max_k_odd_plus(lastdigiteven // 10, k-1) + n % 10\\n    # drops last digit and decrements k by 1, also adds last digit\\n    b = max_k_odd_plus(lastdigiteven // 100, k-1) + n % 100\\n    # drops last two digits, decrements by one, aand uses last two digits. \\n    return max(lastdigiteven, a, b)\\n    # Probably at the end.\\n    return max_k_odd_plus(n//10, k)"}	2019-08-02 19:07:48-07	2
69832	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">local variable 'lastdigiteven' referenced before assignment, line 9</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">local variable 'lastdigiteven' referenced before assignment, line 9</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">local variable 'lastdigiteven' referenced before assignment, line 9</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">local variable 'lastdigiteven' referenced before assignment, line 9</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">local variable 'lastdigiteven' referenced before assignment, line 9</span><br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>86</code></span> <br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">local variable 'lastdigiteven' referenced before assignment, line 9</span><br /></div>	2019-08-02 19:07:48-07	2
69842	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    if n%2 == 0:\\n        lastdigiteven = max_k_odd_plus(n // 10, k)\\n    # drops last digit.\\n    a = max_k_odd_plus(lastdigiteven // 10, k-1) + n % 10\\n    # drops last digit and decrements k by 1, also adds last digit\\n    b = max_k_odd_plus(lastdigiteven // 100, k-1) + n % 100\\n    # drops last two digits, decrements by one, aand uses last two digits. \\n    return max(lastdigiteven, a, b)\\n    # Probably at the end.\\n    return max_k_odd_plus(n//10, k)"}	2019-08-02 19:07:56-07	2
69852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:09:09-07	282
72322	week2_resume		load		2019-08-05 21:50:43-07	2
69892	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:21:40-07	282
69902	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:21:53-07	282
69912	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 19:21:55-07	282
69922	multi	19sum_blank_pilots/start	load		2019-08-02 20:42:23-07	662
69932	multi	19sum_blank_pilots/start	submit	[]	2019-08-02 20:42:25-07	662
69942	multi	19sum_blank_pilots/start	backup_submit	[]	2019-08-02 20:42:25-07	662
69952	coding	19sum_blank_pilots/coin_game	load		2019-08-02 20:42:28-07	662
69962	coding	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n"}	2019-08-02 20:42:32-07	662
69972	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n"}	2019-08-02 20:42:33-07	662
69982	coding	19sum_blank_pilots/plusses	load		2019-08-02 20:42:33-07	662
69992	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-02 20:42:39-07	662
70002	multi	19sum_blank_pilots/start	load		2019-08-02 20:42:53-07	662
70012	multi	19sum_blank_pilots/start	submit	[]	2019-08-02 20:42:54-07	662
70022	multi	19sum_blank_pilots/start	backup_submit	[]	2019-08-02 20:42:54-07	662
70032	coding	19sum_blank_pilots/plusses	load		2019-08-02 20:42:57-07	662
70042	coding	19sum_blank_pilots/plusses	move_on	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-02 20:42:59-07	662
70052	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-02 20:43:00-07	662
70062	coding	19sum_blank_pilots/coin_game	load		2019-08-02 20:43:01-07	662
70072	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n"}	2019-08-02 20:43:01-07	662
70082	multi	19sum_blank_pilots/start	load		2019-08-02 20:43:07-07	662
70092	multi	19sum_blank_pilots/start	backup_submit	[]	2019-08-02 20:43:08-07	662
70102	multi	19sum_blank_pilots/start	submit	[]	2019-08-02 20:43:08-07	662
70112	coding	19sum_blank_pilots/coin_game	load		2019-08-02 20:43:11-07	662
70122	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n"}	2019-08-02 20:43:12-07	662
70132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:12:21-07	282
70142	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:16:49-07	282
70152	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 21:17:47-07	282
70162	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:17:48-07	282
70172	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 21:18:44-07	282
70182	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:18:46-07	282
70192	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:22:39-07	282
70202	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:23:14-07	282
70212	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:23:15-07	282
70222	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:23:35-07	282
70232	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:23:36-07	282
70242	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:24:50-07	282
70252	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:27:02-07	282
70262	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:27:51-07	282
70272	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 21:27:52-07	282
70282	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:14:33-07	282
70292	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 22:14:58-07	282
70302	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:15:00-07	282
70312	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:53:51-07	282
70322	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:54:11-07	282
70332	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:54:13-07	282
70342	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:56:04-07	282
70352	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:56:57-07	282
70362	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:56:58-07	282
70372	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:57:27-07	282
70382	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 22:57:28-07	282
70392	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:00:06-07	282
70402	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:00:32-07	282
70412	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:00:34-07	282
70422	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:06:56-07	282
70432	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:07:37-07	282
70442	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:07:38-07	282
70452	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:08:43-07	282
70462	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:09:11-07	282
70472	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:09:12-07	282
70482	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:10:03-07	282
70492	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:10:05-07	282
70502	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:10:36-07	282
70512	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:10:37-07	282
70522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:16:32-07	282
70532	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:16:54-07	282
70542	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:16:55-07	282
70552	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:17:30-07	282
70562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:17:31-07	282
70572	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:18:34-07	282
70582	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:20:40-07	282
70592	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:21:11-07	282
70602	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:21:13-07	282
70612	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:23:14-07	282
70622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:25:08-07	282
70632	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:25:52-07	282
70642	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:25:54-07	282
70652	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:31:32-07	282
70662	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:32:09-07	282
70672	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:32:11-07	282
70682	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:32:30-07	282
70692	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:32:32-07	282
70702	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:32:41-07	282
70712	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:32:43-07	282
70722	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:34:52-07	282
70732	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:35:03-07	282
70742	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:35:04-07	282
70752	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:35:15-07	282
70762	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:35:16-07	282
70772	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:35:44-07	282
70782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:35:45-07	282
70792	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 23:36:25-07	282
70802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:36:27-07	282
70812	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:39:20-07	282
70822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:44:12-07	282
70832	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:47:20-07	282
70842	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-02 23:47:45-07	282
70852	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:47:46-07	282
70862	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:49:10-07	282
70872	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:52:04-07	282
70882	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-02 23:52:08-07	282
70892	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 18:10:28-07	282
70902	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 18:14:53-07	282
70912	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 18:16:32-07	282
70922	coding	19sum_blank_pilots/plusses	unload	{"code":"  def max_k_odd_plus(n, k):\\n    # Base case 1: No digits left to consume\\n    if n == 0:\\n      return 0\\n    # Base case 2: All k components already part of sum.\\n    if k == 0:\\n      return 0\\n    \\n    # Exclude the current right-most digit from the sum.\\n    # Note: We don't need to consider excluding the right-most 2\\n    # digits, as that will be covered by excluding the right-most\\n    # digit twice in a row.\\n    skip = max_k_odd_plus(n // 10, k)\\n    \\n    # If n is even, the right-most digit can't be included, so this\\n    # is the only choice. That's because n%10 and n%100 will both be\\n    # even.\\n    if n%2 == 0:\\n      return skip\\n    \\n    # Take the right-most digit as a single-digit number in the sum.\\n    take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n    \\n    # Take the two right-most digits as a double-digit number in the sum.\\n    take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n    \\n    # Return the maximum of our 3 options.\\n    return max(skip, take_one, take_two)"}	2019-08-05 18:39:00-07	2
70932	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-05 18:44:45-07	2
72922	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-05 22:59:55-07	2
70942	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-05 18:44:45-07	2
70952	coding	19sum_blank_pilots/plusses	load		2019-08-05 18:44:46-07	2
70962	coding	19sum_blank_pilots/plusses	coding_keyup	{"code":""}	2019-08-05 18:44:54-07	2
70972	coding	19sum_blank_pilots/plusses	coding_keyup_backup	{"code":"  def max_k_odd_plus(n, k):\\n    # Base case 1: No digits left to consume\\n    if n == 0:\\n      return 0\\n    # Base case 2: All k components already part of sum.\\n    if k == 0:\\n      return 0\\n    # Exclude the current right-most digit from the sum.\\n    # Note: We don't need to consider excluding the right-most 2\\n    # digits, as that will be covered by excluding the right-most\\n    # digit twice in a row.\\n    skip = max_k_odd_plus(n // 10, k)\\n    # If n is even, the right-most digit can't be included, so this\\n    # is the only choice. That's because n%10 and n%100 will both be\\n    # even.\\n    if n%2 == 0:\\n      return skip\\n    # Take the right-most digit as a single-digit number in the sum.\\n    take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n    # Take the two right-most digits as a double-digit number in the sum.\\n    take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n    # Return the maximum of our 3 options.\\n    return max(skip, take_one, take_two)"}	2019-08-05 18:44:55-07	2
70982	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 18:48:37-07	282
70992	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 18:56:24-07	282
71002	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 18:56:49-07	282
71012	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 18:56:50-07	282
71022	coding	19sum_blank_pilots/coin_game	load		2019-08-05 18:57:25-07	2
71032	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n"}	2019-08-05 19:03:49-07	2
71042	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 19:03:52-07	2
71052	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 19:06:28-07	2
71062	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 19:06:55-07	2
71072	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 19:08:36-07	2
71082	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 19:09:49-07	282
71092	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 19:10:11-07	282
71102	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 19:10:13-07	282
71112	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-08-05 19:10:52-07	282
71122	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 19:10:54-07	282
71132	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 19:11:59-07	282
71142	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:24:08-07	2
71152	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:24:09-07	2
71162	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:27:55-07	2
71172	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:28:51-07	2
71182	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:28:52-07	2
71192	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:29:22-07	2
71202	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:29:23-07	2
71212	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:29:55-07	2
71222	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:29:57-07	2
71232	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:53:36-07	2
71242	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:53:39-07	2
71252	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:53:40-07	2
71262	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:53:56-07	2
71272	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:53:56-07	2
71282	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:54:01-07	2
71292	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:54:02-07	2
71302	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:56:01-07	2
71312	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:56:37-07	2
71322	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:56:38-07	2
71332	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:56:46-07	2
71342	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:56:46-07	2
71352	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:56:51-07	2
71362	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:56:53-07	2
71372	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:57:14-07	2
71382	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:57:14-07	2
71392	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:57:18-07	2
72932	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-05 23:00:00-07	2
71402	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:57:19-07	2
71412	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:57:22-07	2
71422	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-05 20:57:23-07	2
71432	week2_resume		load		2019-08-05 21:06:43-07	2
71442	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:08:41-07	2
71452	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello)\\n"}	2019-08-05 21:30:10-07	282
71462	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:30:11-07	282
71472	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:35:03-07	282
71482	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:36:16-07	2
71492	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:36:18-07	2
71502	week2_resume		load		2019-08-05 21:36:18-07	2
71512	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:36:19-07	2
71522	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:36:34-07	282
71532	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:37:01-07	2
71542	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:37:02-07	2
71552	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 21:37:02-07	282
71562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:37:04-07	282
71572	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 21:37:21-07	282
71582	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:37:22-07	282
71592	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:37:34-07	2
71602	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:37:34-07	2
71612	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:37:39-07	2
71622	week2_resume		load		2019-08-05 21:37:39-07	2
71632	coding	19sum_blank_pilots/plusses	load		2019-08-05 21:37:41-07	2
71642	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 21:37:43-07	2
71652	week2_resume		load		2019-08-05 21:37:43-07	2
71662	week2_resume		load		2019-08-05 21:37:59-07	2
71672	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:41:56-07	282
71682	week2_resume		load		2019-08-05 21:42:15-07	2
71692	week2_resume		load		2019-08-05 21:42:16-07	2
71702	solution	19sum_blank_pilots/plusses	load		2019-08-05 21:42:17-07	2
71712	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:44:12-07	282
71722	solution	19sum_blank_pilots/plusses	load		2019-08-05 21:45:41-07	2
71732	week2_resume		load		2019-08-05 21:45:44-07	2
71742	week2_resume		load		2019-08-05 21:45:47-07	2
71752	solution	19sum_blank_pilots/plusses	load		2019-08-05 21:47:19-07	2
71762	solution	19sum_blank_pilots/plusses	load		2019-08-05 21:47:47-07	2
71772	solution	19sum_blank_pilots/plusses	move_on		2019-08-05 21:48:15-07	2
71782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:48:29-07	282
71792	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 21:48:53-07	282
71802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:48:55-07	282
71812	solution	19sum_blank_pilots/plusses	load		2019-08-05 21:48:56-07	2
71822	week2_resume		load		2019-08-05 21:48:57-07	2
71832	week2_resume		load		2019-08-05 21:48:58-07	2
71842	solution	19sum_blank_pilots/plusses	load		2019-08-05 21:49:01-07	2
71852	solution	19sum_blank_pilots/plusses	move_on		2019-08-05 21:49:02-07	2
71862	week2_resume		load		2019-08-05 21:49:03-07	2
71872	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 21:49:23-07	282
71882	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:49:24-07	282
71892	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-05 21:49:26-07	2
71902	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n"}	2019-08-05 21:49:35-07	2
71912	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n  for i in range(row2):\\n"}	2019-08-05 21:49:37-07	2
71922	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n"}	2019-08-05 21:49:39-07	2
71932	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:49:40-07	2
71942	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:49:42-07	2
71952	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:49:44-07	2
72252	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n"}	2019-08-05 21:50:35-07	2
72262	week2_resume		load		2019-08-05 21:50:35-07	2
71962	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:49:46-07	2
71972	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n      return curr\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:49:48-07	2
71982	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n      return curr\\n    if coin_winner(row1, i, other, curr) == curr:\\n  return other\\n"}	2019-08-05 21:49:50-07	2
71992	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:49:51-07	2
72002	parsons	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:49:52-07	2
72012	parsons	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:49:52-07	2
72022	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:49:53-07	2
72032	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-05 21:49:56-07	2
72042	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-05 21:49:58-07	2
72052	week2_resume		load		2019-08-05 21:49:58-07	2
72062	week2_resume		load		2019-08-05 21:49:59-07	2
72072	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-05 21:50:01-07	2
72082	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\nfor i in range(row1):\\n"}	2019-08-05 21:50:03-07	2
72092	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n  for i in range(row2):\\n"}	2019-08-05 21:50:07-07	2
72102	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n"}	2019-08-05 21:50:09-07	2
72112	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:50:11-07	2
72122	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:50:13-07	2
72132	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n      return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:50:14-07	2
72142	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n      return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n"}	2019-08-05 21:50:17-07	2
72152	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n      return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n"}	2019-08-05 21:50:20-07	2
72162	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n      return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:50:22-07	2
72172	parsons	19sum_blank_pilots/coin_game	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n      return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:50:23-07	2
72182	parsons	19sum_blank_pilots/coin_game	move_on	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n      return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:50:23-07	2
72192	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n      return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-05 21:50:24-07	2
72202	week2_resume		load		2019-08-05 21:50:25-07	2
72212	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-05 21:50:26-07	2
72222	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-05 21:50:31-07	2
72232	week2_resume		load		2019-08-05 21:50:31-07	2
72242	coding	19sum_blank_pilots/coin_game	load		2019-08-05 21:50:33-07	2
72332	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-05 21:50:45-07	2
72342	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz(n):\\n"}	2019-08-05 21:50:45-07	2
72352	week2_resume		load		2019-08-05 21:50:46-07	2
72362	coding	19s_algo_study/fizz_buzz	load		2019-08-05 21:50:47-07	2
72372	coding	19s_algo_study/fizz_buzz	unload	{"code":"def fizz_buzz(n):\\n"}	2019-08-05 21:50:47-07	2
72382	week2_resume		load		2019-08-05 21:50:48-07	2
72392	solution	19s_algo_study/fizz_buzz	load		2019-08-05 21:50:49-07	2
72402	solution	19s_algo_study/fizz_buzz	move_on		2019-08-05 21:50:51-07	2
72412	week2_resume		load		2019-08-05 21:50:51-07	2
72422	solution	19sum_blank_pilots/coin_game	load		2019-08-05 21:51:24-07	2
72432	solution	19sum_blank_pilots/coin_game	load		2019-08-05 21:52:54-07	2
72442	solution	19sum_blank_pilots/coin_game	load		2019-08-05 21:53:05-07	2
72452	solution	19sum_blank_pilots/coin_game	move_on		2019-08-05 21:53:17-07	2
72462	week2_resume		load		2019-08-05 21:53:18-07	2
72472	solution	19s_algo_study/fizz_buzz	load		2019-08-05 21:53:19-07	2
72482	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:53:21-07	282
72492	week2_resume		load		2019-08-05 21:53:26-07	2
72502	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 21:54:01-07	282
72512	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:54:02-07	282
72522	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 21:54:47-07	282
72532	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 21:54:48-07	282
72542	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:02:39-07	282
72552	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 22:03:16-07	282
72562	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:03:18-07	282
72572	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 22:04:01-07	282
72582	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:04:03-07	282
72592	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:08:09-07	282
72602	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:22:32-07	282
72612	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 22:23:00-07	282
72622	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:23:01-07	282
72632	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 22:23:28-07	282
72642	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:23:30-07	282
72652	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 22:23:45-07	282
72662	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:23:47-07	282
72672	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:27:09-07	282
72682	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-08-05 22:28:07-07	282
72692	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:28:09-07	282
72702	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-08-05 22:28:33-07	282
72712	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:28:35-07	282
72722	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-08-05 22:28:59-07	282
72732	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:29:00-07	282
72742	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(hello) #!ORIGINALprint(!BLANK) #blankhello\\n"}	2019-08-05 22:29:30-07	282
72752	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:29:31-07	282
72762	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print(this) #!ORIGINALprint(!BLANK) #blankthis\\n"}	2019-08-05 22:30:24-07	282
72772	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:30:25-07	282
72782	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:33:56-07	282
72792	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\nprint(this) #!ORIGINALprint(!BLANK) #blankthis\\n"}	2019-08-05 22:34:36-07	282
72802	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:34:37-07	282
72812	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:47:17-07	282
72822	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 22:49:58-07	282
72832	multi	19sum_blank_pilots/plusses_multi	load		2019-08-05 22:55:21-07	2
72842	coding	19sum_blank_pilots/plusses	load		2019-08-05 22:55:55-07	2
72852	coding	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-05 22:56:17-07	2
72862	multi	19sum_blank_pilots/plusses_multi	load		2019-08-05 22:57:51-07	2
72872	multi	19sum_blank_pilots/plusses_multi	load		2019-08-05 22:58:17-07	2
72882	multi	19sum_blank_pilots/plusses_multi	load		2019-08-05 22:58:23-07	2
72892	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-05 22:59:37-07	2
72902	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-05 22:59:46-07	2
72912	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-05 22:59:49-07	2
72942	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-05 23:00:04-07	2
72952	multi	19sum_blank_pilots/plusses_multi	load		2019-08-05 23:01:41-07	2
72962	multi	19sum_blank_pilots/plusses_multi	submit	[{"id":"base_case","input":""},{"id":"recursive_calls","input":""},{"id":"augment_calls","input":""},{"id":"aggregate","input":""}]	2019-08-05 23:01:45-07	2
72972	multi	19sum_blank_pilots/plusses_multi	backup_submit	[{"id":"base_case","input":""},{"id":"recursive_calls","input":""},{"id":"augment_calls","input":""},{"id":"aggregate","input":""}]	2019-08-05 23:01:45-07	2
72982	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-05 23:01:47-07	2
72992	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 23:03:41-07	282
73002	parsons	19s_algo_study/binary_search_1	unload	{"code":"def binary_search(target, arr):\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-05 23:04:23-07	282
73012	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 23:04:42-07	282
73022	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 23:17:29-07	282
73032	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 23:19:07-07	282
73042	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 23:21:12-07	282
73052	parsons	19s_algo_study/binary_search_1	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-05 23:23:03-07	282
73062	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:24:11-07	282
73072	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:31:26-07	282
73082	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:46:07-07	282
73092	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:46:39-07	282
73102	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:46:41-07	282
73112	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:50:30-07	282
73122	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:50:52-07	282
73132	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:50:53-07	282
73142	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:51:29-07	282
73152	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:51:30-07	282
73162	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:53:58-07	282
73172	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:54:15-07	282
73182	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:54:17-07	282
73192	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:54:39-07	282
73202	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:54:54-07	282
73212	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:57:43-07	282
73222	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:58:54-07	282
73232	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:59:19-07	282
73242	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-05 23:59:21-07	282
73252	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:02:56-07	282
73262	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:04:15-07	282
73272	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-06 00:04:43-07	282
73282	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:04:45-07	282
73292	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:06:18-07	282
73302	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:06:51-07	282
73312	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:06:55-07	282
73322	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:10:15-07	282
73332	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:10:58-07	282
73342	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:10:59-07	282
73352	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:11:09-07	282
73362	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:11:10-07	282
73372	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:12:17-07	282
75052	parsons	demo_blanks	drag	{"code":"def return_three():\\n  num = 6\\n  return  // 2\\n"}	2019-08-23 23:16:33-07	2
73382	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:12:51-07	282
73392	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:12:53-07	282
73402	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:14:06-07	282
73412	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 00:19:36-07	282
73422	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:27:41-07	2
73432	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-06 17:31:51-07	2
73442	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-06 17:31:51-07	2
73452	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-06 17:31:55-07	2
73462	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-06 17:32:01-07	2
73472	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-06 17:32:10-07	2
73482	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:32:10-07	2
73492	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:35:02-07	2
73502	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:35:53-07	2
73512	multi	19sum_blank_pilots/fib_multi	backup_submit	[{"id":"recurse_1","input":"1"},{"id":"augment_1","input":"2"},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":"4"},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":"8"},{"id":"augment_4","input":"9"},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"box 1"},{"id":"aggregate","input":"Test"}]	2019-08-06 17:37:51-07	2
73522	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-06 17:37:53-07	2
73532	multi	19sum_blank_pilots/plusses_multi	load		2019-08-06 17:42:50-07	2
73542	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:44:10-07	2
73552	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:44:27-07	2
73562	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:45:10-07	2
73572	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:45:13-07	2
73582	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:46:01-07	2
73592	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:46:12-07	2
73602	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:48:05-07	2
73612	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:51:21-07	2
73622	multi	19sum_blank_pilots/fib_multi	submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:51:25-07	2
73632	multi	19sum_blank_pilots/fib_multi	backup_submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:51:25-07	2
73642	multi	19sum_blank_pilots/plusses_multi	load		2019-08-06 17:51:27-07	2
73652	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:52:38-07	2
73662	multi	19sum_blank_pilots/fib_multi	backup_submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:54:04-07	2
73672	multi	19sum_blank_pilots/plusses_multi	load		2019-08-06 17:54:06-07	2
73682	multi	19sum_blank_pilots/plusses_multi	submit	[{"id":"recurse_1","input":""},{"id":"augment_1","input":""},{"id":"recurse_2","input":""},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":""},{"id":"aggregate","input":""}]	2019-08-06 17:54:10-07	2
74322	parsons	19sum_blank_pilots/dfs_impl_blanks	drag	{"code":"def dfs():\\n  # graph is a list of Nodes\\n  .setExit()\\n"}	2019-08-07 00:21:03-07	2
73692	multi	19sum_blank_pilots/plusses_multi	backup_submit	[{"id":"recurse_1","input":""},{"id":"augment_1","input":""},{"id":"recurse_2","input":""},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":""},{"id":"aggregate","input":""}]	2019-08-06 17:54:10-07	2
73702	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-06 17:54:12-07	2
73712	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:54:18-07	2
73722	multi	19sum_blank_pilots/fib_multi	submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:54:19-07	2
73732	multi	19sum_blank_pilots/fib_multi	backup_submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:54:19-07	2
73742	multi	19sum_blank_pilots/plusses_multi	load		2019-08-06 17:54:21-07	2
73752	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:54:25-07	2
73762	multi	19sum_blank_pilots/fib_multi	submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:54:27-07	2
73772	multi	19sum_blank_pilots/fib_multi	backup_submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:54:27-07	2
73782	multi	19sum_blank_pilots/plusses_multi	load		2019-08-06 17:54:29-07	2
73792	multi	19sum_blank_pilots/fib_multi	load		2019-08-06 17:54:33-07	2
73802	multi	19sum_blank_pilots/fib_multi	submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:54:34-07	2
73812	multi	19sum_blank_pilots/fib_multi	backup_submit	[{"id":"recurse_1","input":"4"},{"id":"augment_1","input":""},{"id":"recurse_2","input":"3"},{"id":"augment_2","input":""},{"id":"recurse_3","input":""},{"id":"augment_3","input":""},{"id":"recurse_4","input":""},{"id":"augment_4","input":""},{"id":"recurse_5","input":""},{"id":"augment_5","input":""},{"id":"recurse_6","input":""},{"id":"augment_6","input":""},{"id":"recurse_7","input":""},{"id":"augment_7","input":""},{"id":"recurse_8","input":""},{"id":"augment_8","input":""},{"id":"recurse_9","input":""},{"id":"augment_9","input":""},{"id":"recurse_10","input":""},{"id":"augment_10","input":""},{"id":"base_case","input":"n == 0 # return 0\\nn == 1 # return 1\\n- OR -\\nn <= 1 # return n\\n- OR -\\nn <= 2 # return min(n, 1)\\n"},{"id":"aggregate","input":"Sum. You would add the two values from the previous calls.\\n"}]	2019-08-06 17:54:34-07	2
73822	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-06 17:54:36-07	2
73832	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 20:29:18-07	282
73842	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-06 20:32:16-07	2
73852	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-06 20:32:23-07	2
73862	coding	19sum_blank_pilots/plusses	load		2019-08-06 20:32:23-07	2
73872	coding	19sum_blank_pilots/plusses	coding_keyup	{"code":""}	2019-08-06 20:32:24-07	2
74332	parsons	19sum_blank_pilots/dfs_impl_blanks	drag	{"code":"def dfs():\\n  # graph is a list of Nodes\\n            continue\\n  .setExit()\\n"}	2019-08-07 00:21:04-07	2
73882	coding	19sum_blank_pilots/plusses	coding_keyup_backup	{"code":"def max_odd_plus(n, k):\\n    if k == 0:\\n        return 0 \\n    if n == 0:\\n        return 0\\n    if n < 10 and isodd(n):\\n        return n \\n    lasto = n % 10\\n    lastt = n % 100\\n    wo = 0 \\n    wt = 0 \\n    \\n    if isodd(lasto):\\n        wo = lasto + max_odd_plus(n // 10, k - 1)\\n    if isodd(lastt):\\n        wt = lastt + max_odd_plus(n // 100, k - 1)\\n    if not isodd(lasto) and not isodd(lastt):\\n        return max(max_odd_plus(n//10, k), max_odd_plus(n//100, k))\\n    \\n    return max(wo, wt)"}	2019-08-06 20:32:25-07	2
73892	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_odd_plus(n, k):\\n    if k == 0:\\n        return 0 \\n    if n == 0:\\n        return 0\\n    if n < 10 and isodd(n):\\n        return n \\n    lasto = n % 10\\n    lastt = n % 100\\n    wo = 0 \\n    wt = 0 \\n    \\n    if isodd(lasto):\\n        wo = lasto + max_odd_plus(n // 10, k - 1)\\n    if isodd(lastt):\\n        wt = lastt + max_odd_plus(n // 100, k - 1)\\n    if not isodd(lasto) and not isodd(lastt):\\n        return max(max_odd_plus(n//10, k), max_odd_plus(n//100, k))\\n    \\n    return max(wo, wt)"}	2019-08-06 20:32:26-07	2
73902	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">max_k_odd_plus not defined! Check for any typos</span><br /></div>	2019-08-06 20:32:26-07	2
73912	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if k == 0:\\n        return 0 \\n    if n == 0:\\n        return 0\\n    if n < 10 and isodd(n):\\n        return n \\n    lasto = n % 10\\n    lastt = n % 100\\n    wo = 0 \\n    wt = 0 \\n    \\n    if isodd(lasto):\\n        wo = lasto + max_k_odd_plus(n // 10, k - 1)\\n    if isodd(lastt):\\n        wt = lastt + max_k_odd_plus(n // 100, k - 1)\\n    if not isodd(lasto) and not isodd(lastt):\\n        return max(max_k_odd_plus(n//10, k), max_k_odd_plus(n//100, k))\\n    \\n    return max(wo, wt)"}	2019-08-06 20:32:41-07	2
73922	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'isodd' is not defined, line 13</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'isodd' is not defined, line 13</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'isodd' is not defined, line 13</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'isodd' is not defined, line 13</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'isodd' is not defined, line 13</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'isodd' is not defined, line 13</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">name 'isodd' is not defined, line 13</span><br /></div>	2019-08-06 20:32:41-07	2
73932	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if k == 0:\\n        return 0 \\n    if n == 0:\\n        return 0\\n    if n < 10 and isodd(n):\\n        return n \\n    lasto = n % 10\\n    lastt = n % 100\\n    wo = 0 \\n    wt = 0 \\n    \\n    if isodd(lasto):\\n        wo = lasto + max_k_odd_plus(n // 10, k - 1)\\n    if isodd(lastt):\\n        wt = lastt + max_k_odd_plus(n // 100, k - 1)\\n    if not isodd(lasto) and not isodd(lastt):\\n        return max(max_k_odd_plus(n//10, k), max_k_odd_plus(n//100, k))\\n    \\n    return max(wo, wt)\\n\\ndef isodd(n):\\n    return n % 2 == 1"}	2019-08-06 20:32:49-07	2
73942	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>53</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-08-06 20:32:49-07	2
73952	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if k == 0:\\n        return 0 \\n    if n == 0:\\n        return 0\\n    if n < 10 and isodd(n):\\n        return n \\n    lasto = n % 10\\n    lastt = n % 100\\n    wo = 0 \\n    wt = 0 \\n    \\n    if isodd(lasto):\\n        wo = lasto + max_k_odd_plus(n // 10, k - 1)\\n    if isodd(lastt):\\n        wt = lastt + max_k_odd_plus(n // 100, k - 1)\\n    if not isodd(lasto) and not isodd(lastt):\\n        return max(max_k_odd_plus(n//10, k), max_k_odd_plus(n//100, k))\\n    \\n    return max(wo, wt)\\n\\ndef isodd(n):\\n    return n % 2 == 1"}	2019-08-06 20:32:49-07	2
74342	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs():\\n  # graph is a list of Nodes\\n            continue\\n  .setExit()\\n"}	2019-08-07 00:21:06-07	2
74352	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs():\\n  # graph is a list of Nodes\\n            continue\\n  .setExit()\\n"}	2019-08-07 00:21:07-07	2
74362	parsons	19sum_blank_pilots/dfs_impl_blanks	drag	{"code":"def dfs():\\n  # graph is a list of Nodes\\n            continue\\n  .setExit()\\n  visit()\\n"}	2019-08-07 00:21:42-07	2
74372	parsons	19sum_blank_pilots/dfs_impl_blanks	drag	{"code":"def dfs():\\n  # graph is a list of Nodes\\n            continue\\n  .setExit()\\n  visit()\\nif .getEnter():\\n"}	2019-08-07 00:21:43-07	2
74382	parsons	19sum_blank_pilots/dfs_impl_blanks	drag	{"code":"def dfs():\\n  # graph is a list of Nodes\\n            continue\\n  .setExit()\\n  visit()\\nif .getEnter():\\n  for  in :\\n"}	2019-08-07 00:21:45-07	2
73962	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>53</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-08-06 20:32:49-07	2
73972	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0:\\n        return 0\\n    elif k == 0:\\n        return 0\\n    elif n % 2 == 0:\\n        return max_k_odd_plus(n, k-1)\\n    else:\\n        take_one = max_k_odd_plus(n // 10, k-1)\\n        take_two = max_k_odd_plus(n // 100, k-1)\\n        return max(take_one, take_two)"}	2019-08-06 20:33:17-07	2
73982	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>0</code></span> <br /></div>	2019-08-06 20:33:17-07	2
73992	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    sum = 0\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n\\n    take_one = max_k_odd_plus(n//10, k-1)\\n    take_two = max_k_odd_plus(n//100, k-2)\\n    \\n    if n%2 == 0:\\n        skip = max_k_odd_plus(n//10, k)\\n        return skip\\n    return max_k_odd_plus(take_one, k-1) + max_k_odd_plus(take_two, k-2)"}	2019-08-06 20:33:33-07	2
74002	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>0</code></span> <br /></div>	2019-08-06 20:33:33-07	2
74012	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    one_digit = n % 10\\n    two_digit = n % 100\\n    skip_one = n // 10\\n    skip_two = n // 100\\n    if k == 0 or (n < 10 and n % 2 == 0) or n == 0: #Base Case 1\\n        return 0 \\n    elif (n < 10 and n % 2 != 0): #Base Case 2\\n        return n\\n    else: #Recursive\\n        if one_digit % 2 == 0:\\n            return max_k_odd_plus(skip_one, k)\\n        else:\\n            use_one = max_k_odd_plus(skip_one, k - 1) * 10 + one_digit\\n            use_two = max_k_odd_plus(skip_two, k - 1) * 100 + two_digit\\n            dont_use_one = max_k_odd_plus(skip_one, k)\\n            dont_use_two = max_k_odd_plus(skip_two, k)\\n            return max(use_one, use_two, dont_use_one, dont_use_two)"}	2019-08-06 20:34:07-07	2
74392	parsons	19sum_blank_pilots/dfs_impl_blanks	submit	{"code":"def dfs():\\n  # graph is a list of Nodes\\n            continue\\n  .setExit()\\n  visit()\\nif .getEnter():\\n  for  in :\\n"}	2019-08-07 00:21:47-07	2
74402	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-07 00:25:58-07	2
74412	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-08-07 00:26:09-07	2
74422	multi	19sum_blank_pilots/fib_multi	load		2019-08-07 21:56:16-07	2
74432	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-08 19:29:25-07	2
74442	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-08 19:29:27-07	2
74452	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-08 19:29:28-07	2
74462	multi	19sum_blank_pilots/plusses_multi	load		2019-08-09 00:01:31-07	2
74472	multi	19sum_blank_pilots/coin_game_multi	load		2019-08-09 00:01:36-07	2
74482	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-08-15 17:39:42-07	2
74022	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1529</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1953</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>95</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-08-06 20:34:07-07	2
74032	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1529</code></span> <br /><span class="msg">Print Output: <pre>15 99 15 15 1 0\n15 99 15 15 1 0\n15 100 15 15 1 0\n15 100 15 15 1 0\n1529 100 159 1529 15 15\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /><span class="msg">Print Output: <pre>15 1 5 15 1 0\n15 1 5 15 1 0\n1529 1 9 29 15 15\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1953</code></span> <br /><span class="msg">Print Output: <pre>19 1 9 19 1 0\n19 2 19 19 1 0\n195 2 195 195 19 1\n19 2 19 19 1 0\n19 2 19 19 1 0\n19 3 19 19 1 0\n195 3 195 195 19 1\n19 3 19 19 1 0\n1953 3 1953 1953 195 19\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>95</code></span> <br /><span class="msg">Print Output: <pre>19 1 9 19 1 0\n195 1 5 95 19 1\n19 1 9 19 1 0\n1953 1 3 53 95 19\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>201 3 1 1 0 0\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /><span class="msg">Print Output: <pre>281 2 1 81 0 0\n</pre></span></div>	2019-08-06 20:35:11-07	2
74042	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0 or k == 0:\\n        return 0\\n    elif n % 2:\\n        a = max_k_odd_plus(n // 10 , k)\\n        b = max_k_odd_plus(n // 10, k -1) + n % 10\\n        c = max_k_odd_plus(n // 100, k -1) + n % 100\\n        return max(a, b, c)\\n    else:\\n        return max_k_odd_plus(n // 10, k)"}	2019-08-06 20:35:50-07	2
74052	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>95</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-08-06 20:35:50-07	2
74062	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    def helper(n,k,x):\\n        if n<10:\\n            if n%2 ==1:\\n                return sum(x)\\n            else:\\n                return 0\\n        if n%10 == 0:\\n            return helper(n//10,k,x)\\n        elif n%100>((n%1000)//10):\\n            x.append(n%100)\\n            return helper(n//100,k,x)\\n        elif n%100<((n%1000)//10):\\n            x.append(n%10)\\n            return helper(n//10,k,x)\\n    return helper(n,k,[])"}	2019-08-06 20:35:59-07	2
74072	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>61</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>61</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>98</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>98</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>0</code></span> <br /></div>	2019-08-06 20:35:59-07	2
74082	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n % 2 == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    if k == 1:\\n        pass\\n    #else, do some recursion that reduces k, number of numbers used\\n    a = max_k_odd_plus(n//10, k-1) + n%10\\n    b = max_k_odd_plus(n//100, k-1) + n%10\\n    c = max_k_odd_plus(n//10, k)\\n    return max(a,b,c)"}	2019-08-06 20:36:16-07	2
74492	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-15 23:34:33-07	282
74502	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-16 00:03:59-07	282
74512	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-16 00:05:19-07	282
74522	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-16 00:05:20-07	282
74532	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-16 00:13:25-07	282
74092	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>15</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>9</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>17</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>9</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>0</code></span> <br /></div>	2019-08-06 20:36:16-07	2
74102	coding	19sum_blank_pilots/plusses	submit	{"code":"total = 0 \\n    dummy_val = n \\n    two_digit_val = 0\\n    single_digit_val = 0 \\n    \\n    move_by_two = n%100\\n    move_by_one = n%10 \\n    \\n    while dummy_val != 0:\\n\\n        if n % 10 == 0 and n % 100 == 0:\\n           total += 0 \\n        \\n        #if odd, try to allocate the big odd value of two digit \\n        elif move_by_two > two_digit_val:\\n            two_digit_val = move_by_two\\n        \\n        \\n        \\n        \\n        \\n        \\n       \\n        \\n        \\n        \\n        \\n    \\n        total = total + two_digit_val\\n        \\n        dummy_val = dummy_val // 10 \\n        \\n    return total"}	2019-08-06 20:36:33-07	2
74112	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">unexpected indent (<string>, line 2)</span><br /></div>	2019-08-06 20:36:33-07	2
74122	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    \\n    # total = 0 # to keep track of the sum \\n    # dummy_val = n # make a copy of the original value\\n    \\n    # #incase we find the one digit or the two digit backwards are even, we dont count it. \\n    # if n % 10 == 0 and n % 100 == 0:\\n    #     return total \\n    \\n    # if n \\n    # else: \\n    #     total += max_k_odd_plus(dummy_val//10, k)\\n    \\n    \\n    #somehow gotta partition by k \\n    total = 0 \\n    dummy_val = n \\n    two_digit_val = 0\\n    single_digit_val = 0 \\n    \\n    move_by_two = n%100\\n    move_by_one = n%10 \\n    \\n    while dummy_val != 0:\\n\\n        if n % 10 == 0 and n % 100 == 0:\\n           total += 0 \\n        \\n        #if odd, try to allocate the big odd value of two digit \\n        elif move_by_two > two_digit_val:\\n            two_digit_val = move_by_two\\n        \\n        \\n        \\n        \\n        \\n        \\n       \\n        \\n        \\n        \\n        \\n    \\n        total = total + two_digit_val\\n        \\n        dummy_val = dummy_val // 10 \\n        \\n    return total\\n        "}	2019-08-06 20:36:43-07	2
74132	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>116</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>116</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>212</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>212</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>72</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>168</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>72</code></span> <br /></div>	2019-08-06 20:36:43-07	2
74142	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    print(\\"call\\", n, k)\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    \\n    sum_single = 0\\n    if (n%10)%2 == 1:\\n        sum_single = n%10 + max_k_odd_plus(n//10, k-1)\\n    else:\\n        sum_single = max_k_odd_plus(n//10, k)\\n        \\n    sum_double = 0\\n    doub = (n%100) * 10 + n%10\\n    if doub%2 == 1:\\n        sum_double = doub + max_k_odd_plus(n//100, k-1)\\n    else:\\n        sum_double = max_k_odd_plus(n//10, k)\\n    \\n    return max(sum_single, sum_double)"}	2019-08-06 20:37:00-07	2
74152	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>454</code></span> <br /><span class="msg">Print Output: <pre>call 1529 100\ncall 152 99\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>299</code></span> <br /><span class="msg">Print Output: <pre>call 1529 1\ncall 152 0\ncall 15 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>969</code></span> <br /><span class="msg">Print Output: <pre>call 1953 3\ncall 195 2\ncall 19 1\ncall 1 0\ncall 0 0\ncall 1 1\ncall 0 0\ncall 0 0\ncall 19 2\ncall 1 1\ncall 0 0\ncall 0 0\ncall 0 1\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>533</code></span> <br /><span class="msg">Print Output: <pre>call 1953 1\ncall 195 0\ncall 19 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>11</code></span> <br /><span class="msg">Print Output: <pre>call 2018 3\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>call 286428 3\ncall 28642 3\ncall 2864 3\ncall 286 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 286 3\ncall 28 3\n...\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>811</code></span> <br /><span class="msg">Print Output: <pre>call 2818 2\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\n</pre></span></div>	2019-08-06 20:37:00-07	2
74162	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n < 10:\\n        if n%2 == 0:\\n            return 0\\n    while n > 10:\\n        n, last = n//10, n%10\\n        if last%2 == 1:\\n            return last"}	2019-08-06 20:37:23-07	2
74542	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n  print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-16 00:23:57-07	282
74552	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-16 00:23:58-07	282
74562	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n    # #!ORIGINAL# !BLANK #blank\\n    print() #!ORIGINALprint(!BLANK) #blank\\n    print() #!ORIGINALprint(!BLANK) #blank\\n"}	2019-08-16 00:24:13-07	282
74572	coding	19s_algo_study/fizz_buzz	load		2019-08-16 22:48:13-07	2
74582	coding	19s_algo_study/fizz_buzz	coding_keyup	{"code":""}	2019-08-16 22:48:15-07	2
74172	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>9</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>9</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>3</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>3</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>None</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>1</code></span> <br /></div>	2019-08-06 20:37:23-07	2
74182	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0 or k == 0:\\n        return 0\\n    one_digit = n % 10 + max_k_odd_plus(n // 10, k - 1)\\n    two_digits = n % 100 + max_k_odd_plus(n // 100, k - 1)\\n    skip_digit = 0\\n    if n % 2 == 0:\\n        skip_digit = max_k_odd_plus(n // 10, k - 1)\\n    return max(one_digit, two_digits, skip_digit)"}	2019-08-06 20:37:32-07	2
74192	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>62</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>53</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>38</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>136</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>89</code></span> <br /></div>	2019-08-06 20:37:32-07	2
74202	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    if n == 0 or k == 0:\\n        return 0\\n    one_digit = n % 10 + max_k_odd_plus(n // 10, k - 1)\\n    two_digits = n % 100 + max_k_odd_plus(n // 100, k - 1)\\n    skip_digit = 0\\n    if n % 2 == 0:\\n        skip_digit = max_k_odd_plus(n // 10, k - 1)\\n    return max(one_digit, two_digits, skip_digit)"}	2019-08-06 20:37:58-07	2
74212	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>62</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>53</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>38</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>136</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>89</code></span> <br /></div>	2019-08-06 20:37:58-07	2
74222	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    go = lambda n: int(n) if int(n) % 2 == 1 else 0\\n    def helper(s, k):\\n        if k == 0:\\n            return 0\\n        if len(s) == 1:\\n            return go(s)\\n        else:\\n            return max(go(s), go(s[0]) + helper(s[1:], k - 1), )\\n    return helper(str(n), 0, k)\\n"}	2019-08-06 20:38:02-07	2
74232	coding	19sum_blank_pilots/plusses	results	<div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() takes 2 positional arguments but 3 were given, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() takes 2 positional arguments but 3 were given, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() takes 2 positional arguments but 3 were given, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() takes 2 positional arguments but 3 were given, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() takes 2 positional arguments but 3 were given, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() takes 2 positional arguments but 3 were given, line 10</span><br /></div><div class="testcase error"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Error in parsing/executing your program</span><br /><span class="errormsg">helper() takes 2 positional arguments but 3 were given, line 10</span><br /></div>	2019-08-06 20:38:02-07	2
74242	multi	19sum_blank_pilots/post_survey_pt_1	load		2019-08-06 21:12:59-07	2
74252	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n"}	2019-08-06 23:19:00-07	282
74262	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs(): #!ORIGINALdef dfs(!BLANK): #blank\\n  # graph is a list of Nodes\\n"}	2019-08-06 23:19:02-07	282
74272	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-06 23:33:15-07	2
74282	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-06 23:36:29-07	2
74292	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-07 00:20:52-07	2
74302	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-07 00:20:58-07	2
74312	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-07 00:20:59-07	2
75002	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n  return x\\n"}	2019-08-23 23:14:49-07	2
74592	coding	19s_algo_study/fizz_buzz	coding_keyup_backup	{"code":"num_lst = []\\\\ndef fizz_buzz(n):\\\\n    for i in range(1,n+1):\\\\n        if i%3 == 0:\\\\n            num_lst.append(\\\\\\"fizz\\\\\\")\\\\n        elif i%5 == 0:\\\\n            num_lst.append(\\\\\\"buzz\\\\\\")\\\\n        else:\\\\n            num_lst.append(i)\\\\n    return num_lst"}	2019-08-16 22:48:16-07	2
74602	coding	19s_algo_study/fizz_buzz	submit	{"code":"\\ndef fizz_buzz(n):\\n    num_lst = []\\n    for i in range(1,n+1):\\n        if i%3 == 0:\\n            num_lst.append(\\"fizz\\")\\n        elif i%5 == 0:\\n            num_lst.append(\\"buzz\\")\\n        else:\\n            num_lst.append(i)\\n    return num_lst"}	2019-08-16 22:48:59-07	2
74612	coding	19s_algo_study/fizz_buzz	results	<div class="testcase pass"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz']</code> , your code returned <code>[1, 2, 'fizz', 4, 'buzz']</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz']</code> , your code returned <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizz', 16, 17, 'fizz', 19, 'buzz']</code></span> <br /></div>	2019-08-16 22:48:59-07	2
74622	coding	19s_algo_study/fizz_buzz	submit	{"code":"\\ndef fizz_buzz(n):\\n    num_lst = []\\n    for i in range(1,n+1):\\n        if i%3 ==0 and i%5 == 0:\\n            num_lst.append('fizzbuzz')\\n        elif i%3 == 0:\\n            num_lst.append(\\"fizz\\")\\n        elif i%5 == 0:\\n            num_lst.append(\\"buzz\\")\\n        else:\\n            num_lst.append(i)\\n    return num_lst"}	2019-08-16 22:49:33-07	2
74632	coding	19s_algo_study/fizz_buzz	results	<div class="testcase pass"><span class="msg">Calling function <code>fizz_buzz(5)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz']</code> , your code returned <code>[1, 2, 'fizz', 4, 'buzz']</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>fizz_buzz(20)</code>.</span><br /><span class="msg">Expected result to be <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz']</code> , your code returned <code>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz']</code></span> <br /></div>	2019-08-16 22:49:33-07	2
74642	coding	19sum_blank_pilots/coin_game	load		2019-08-20 23:13:59-07	2
74652	coding	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, current_player, other_player):\\n"}	2019-08-20 23:14:01-07	2
74662	coding	19sum_blank_pilots/plusses	load		2019-08-20 23:14:02-07	2
74672	coding	19sum_blank_pilots/plusses	coding_keyup	{"code":""}	2019-08-20 23:14:03-07	2
74682	coding	19sum_blank_pilots/plusses	coding_keyup_backup	{"code":"def max_k_odd_plus(n, k):\\n    one_digit = n % 10\\n    two_digit = n % 100\\n    skip_one = n // 10\\n    skip_two = n // 100\\n    if k == 0 or (n < 10 and n % 2 == 0) or n == 0: #Base Case 1\\n        return 0 \\n    elif (n < 10 and n % 2 != 0): #Base Case 2\\n        return n\\n    else: #Recursive\\n        if one_digit % 2 == 0:\\n            return max_k_odd_plus(skip_one, k)\\n        else:\\n            use_one = max_k_odd_plus(skip_one, k - 1) * 10 + one_digit\\n            use_two = max_k_odd_plus(skip_two, k - 1) * 100 + two_digit\\n            dont_use_one = max_k_odd_plus(skip_one, k)\\n            dont_use_two = max_k_odd_plus(skip_two, k)\\n            return max(use_one, use_two, dont_use_one, dont_use_two)"}	2019-08-20 23:14:04-07	2
74692	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    one_digit = n % 10\\n    two_digit = n % 100\\n    skip_one = n // 10\\n    skip_two = n // 100\\n    if k == 0 or (n < 10 and n % 2 == 0) or n == 0: #Base Case 1\\n        return 0 \\n    elif (n < 10 and n % 2 != 0): #Base Case 2\\n        return n\\n    else: #Recursive\\n        if one_digit % 2 == 0:\\n            return max_k_odd_plus(skip_one, k)\\n        else:\\n            use_one = max_k_odd_plus(skip_one, k - 1) * 10 + one_digit\\n            use_two = max_k_odd_plus(skip_two, k - 1) * 100 + two_digit\\n            dont_use_one = max_k_odd_plus(skip_one, k)\\n            dont_use_two = max_k_odd_plus(skip_two, k)\\n            return max(use_one, use_two, dont_use_one, dont_use_two)"}	2019-08-20 23:14:05-07	2
74702	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>1529</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>1953</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>95</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-08-20 23:14:05-07	2
74712	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    one_digit = n % 10\\n    two_digit = n % 100\\n    skip_one = n // 10\\n    skip_two = n // 100\\n    if k == 0 or (n < 10 and n % 2 == 0) or n == 0: #Base Case 1\\n        return 0 \\n    elif (n < 10 and n % 2 != 0): #Base Case 2\\n        return n\\n    else: #Recursive\\n        if one_digit % 2 == 0:\\n            return max_k_odd_plus(skip_one, k)\\n        else:\\n            use_one = max_k_odd_plus(skip_one, k - 1) + one_digit\\n            use_two = max_k_odd_plus(skip_two, k - 1) + two_digit\\n            dont_use_one = max_k_odd_plus(skip_one, k)\\n            dont_use_two = max_k_odd_plus(skip_two, k)\\n            return max(use_one, use_two, dont_use_one, dont_use_two)"}	2019-08-20 23:14:11-07	2
75012	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\nx = x + 1\\n  return x\\n"}	2019-08-23 23:14:58-07	2
75022	parsons	demo_blanks	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-23 23:16:21-07	2
75032	parsons	demo_blanks	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n   = 6\\n"}	2019-08-23 23:16:23-07	2
75042	parsons	demo_blanks	drag	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n   = 6\\n  return  // 2\\n"}	2019-08-23 23:16:25-07	2
74722	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>95</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /></div>	2019-08-20 23:14:11-07	2
74732	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>454</code></span> <br /><span class="msg">Print Output: <pre>call 1529 100\ncall 152 99\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>299</code></span> <br /><span class="msg">Print Output: <pre>call 1529 1\ncall 152 0\ncall 15 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>969</code></span> <br /><span class="msg">Print Output: <pre>call 1953 3\ncall 195 2\ncall 19 1\ncall 1 0\ncall 0 0\ncall 1 1\ncall 0 0\ncall 0 0\ncall 19 2\ncall 1 1\ncall 0 0\ncall 0 0\ncall 0 1\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>533</code></span> <br /><span class="msg">Print Output: <pre>call 1953 1\ncall 195 0\ncall 19 0\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>11</code></span> <br /><span class="msg">Print Output: <pre>call 2018 3\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>call 286428 3\ncall 28642 3\ncall 2864 3\ncall 286 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 286 3\ncall 28 3\n...\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>811</code></span> <br /><span class="msg">Print Output: <pre>call 2818 2\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\n</pre></span></div>	2019-08-20 23:18:23-07	2
74742	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    print(\\"call\\", n, k)\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    \\n    sum_single = 0\\n    if (n%10)%2 == 1:\\n        sum_single = n%10 + max_k_odd_plus(n//10, k-1)\\n    else:\\n        sum_single = max_k_odd_plus(n//10, k)\\n        \\n    sum_double = 0\\n    doub = (n%100) + n%10\\n    if doub%2 == 1:\\n        sum_double = doub + max_k_odd_plus(n//100, k-1)\\n    else:\\n        sum_double = max_k_odd_plus(n//10, k)\\n    \\n    return max(sum_single, sum_double)"}	2019-08-20 23:18:50-07	2
74752	coding	19sum_blank_pilots/plusses	results	<div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>15</code></span> <br /><span class="msg">Print Output: <pre>call 1529 100\ncall 152 99\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 98\ncall 1 99\ncall 0 98\ncall 0 99\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 98\ncall 1 99\ncall 0 98\ncall 0 99\ncall 152 100\ncall 15 100\ncall 1 99\ncall 0 98\n...\ncall 0 99\ncall 0 100\ncall 15 100\ncall 1 99\ncall 0 98\ncall 0 99\ncall 1 100\ncall 0 99\ncall 0 100\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>9</code></span> <br /><span class="msg">Print Output: <pre>call 1529 1\ncall 152 0\ncall 152 1\ncall 15 1\ncall 1 0\ncall 1 1\ncall 0 0\ncall 0 1\ncall 15 1\ncall 1 0\ncall 1 1\ncall 0 0\ncall 0 1\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>17</code></span> <br /><span class="msg">Print Output: <pre>call 1953 3\ncall 195 2\ncall 19 1\ncall 1 0\ncall 1 1\ncall 0 0\ncall 0 1\ncall 19 2\ncall 1 1\ncall 0 0\ncall 0 1\ncall 1 2\ncall 0 1\ncall 0 2\ncall 195 3\ncall 19 2\ncall 1 1\ncall 0 0\ncall 0 1\ncall 1 2\n...\ncall 0 1\ncall 0 2\ncall 19 3\ncall 1 2\ncall 0 1\ncall 0 2\ncall 1 3\ncall 0 2\ncall 0 3\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>9</code></span> <br /><span class="msg">Print Output: <pre>call 1953 1\ncall 195 0\ncall 195 1\ncall 19 0\ncall 19 1\ncall 1 0\ncall 1 1\ncall 0 0\ncall 0 1\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>call 2018 3\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 20 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\n...\ncall 0 2\ncall 0 2\ncall 20 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>call 286428 3\ncall 28642 3\ncall 2864 3\ncall 286 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 286 3\ncall 28 3\n...\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>call 2818 2\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 28 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\n...\ncall 0 1\ncall 0 1\ncall 28 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\n</pre></span></div>	2019-08-20 23:18:50-07	2
74762	coding	19sum_blank_pilots/plusses	submit	{"code":"def max_k_odd_plus(n, k):\\n    print(\\"call\\", n, k)\\n    if n == 0:\\n        return 0\\n    if k == 0:\\n        return 0\\n    \\n    sum_single = 0\\n    if (n%10)%2 == 1:\\n        sum_single = n%10 + max_k_odd_plus(n//10, k-1)\\n    else:\\n        sum_single = max_k_odd_plus(n//10, k)\\n        \\n    sum_double = 0\\n    doub = (n%100) # + n%10\\n    if doub%2 == 1:\\n        sum_double = doub + max_k_odd_plus(n//100, k-1)\\n    else:\\n        sum_double = max_k_odd_plus(n//10, k)\\n    \\n    return max(sum_single, sum_double)"}	2019-08-20 23:19:04-07	2
74772	coding	19sum_blank_pilots/plusses	results	<div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 100)</code>.</span><br /><span class="msg">Expected result to be <code>44</code> , your code returned <code>44</code></span> <br /><span class="msg">Print Output: <pre>call 1529 100\ncall 152 99\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\ncall 15 99\ncall 1 98\ncall 0 97\ncall 0 97\ncall 0 98\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1529, 1)</code>.</span><br /><span class="msg">Expected result to be <code>29</code> , your code returned <code>29</code></span> <br /><span class="msg">Print Output: <pre>call 1529 1\ncall 152 0\ncall 15 0\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(1953, 3)</code>.</span><br /><span class="msg">Expected result to be <code>99</code> , your code returned <code>99</code></span> <br /><span class="msg">Print Output: <pre>call 1953 3\ncall 195 2\ncall 19 1\ncall 1 0\ncall 0 0\ncall 1 1\ncall 0 0\ncall 0 0\ncall 19 2\ncall 1 1\ncall 0 0\ncall 0 0\ncall 0 1\n</pre></span></div><div class="testcase fail"><span class="msg">Calling function <code>max_k_odd_plus(1953, 1)</code>.</span><br /><span class="msg">Expected result to be <code>95</code> , your code returned <code>53</code></span> <br /><span class="msg">Print Output: <pre>call 1953 1\ncall 195 0\ncall 19 0\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2018, 3)</code>.</span><br /><span class="msg">Expected result to be <code>1</code> , your code returned <code>1</code></span> <br /><span class="msg">Print Output: <pre>call 2018 3\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 201 3\ncall 20 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\ncall 2 2\ncall 0 2\ncall 0 2\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(286428, 3)</code>.</span><br /><span class="msg">Expected result to be <code>0</code> , your code returned <code>0</code></span> <br /><span class="msg">Print Output: <pre>call 286428 3\ncall 28642 3\ncall 2864 3\ncall 286 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 286 3\ncall 28 3\n...\ncall 0 3\ncall 0 3\ncall 28 3\ncall 2 3\ncall 0 3\ncall 0 3\ncall 2 3\ncall 0 3\ncall 0 3\n</pre></span></div><div class="testcase pass"><span class="msg">Calling function <code>max_k_odd_plus(2818, 2)</code>.</span><br /><span class="msg">Expected result to be <code>81</code> , your code returned <code>81</code></span> <br /><span class="msg">Print Output: <pre>call 2818 2\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 281 2\ncall 28 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\ncall 2 1\ncall 0 1\ncall 0 1\n</pre></span></div>	2019-08-20 23:19:04-07	2
74782	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-22 18:03:27-07	2
74792	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-22 18:03:51-07	2
74802	parsons	19s_algo_study/fizz_buzz	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-22 18:03:53-07	2
74812	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-22 18:03:56-07	2
74822	coding	19s_algo_study/fizz_buzz	load		2019-08-22 18:03:59-07	2
74832	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\nfor i in range(1, n+1):\\n"}	2019-08-22 18:04:32-07	2
74842	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  for i in range(1, n+1):\\n  if i % 15 == 0:\\n"}	2019-08-22 18:05:00-07	2
74852	parsons	19s_algo_study/fizz_buzz	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n"}	2019-08-22 18:05:04-07	2
74862	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for  in range(1, +1):\\n"}	2019-08-22 18:06:19-07	2
74872	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n  if  % 15 == 0:\\n"}	2019-08-22 18:06:30-07	2
74882	coding	19s_algo_study/fizz_buzz	coding_keyup_backup	{"code":"def fizz_buzz(n):\\n    re"}	2019-08-22 18:08:04-07	2
74892	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-23 23:13:28-07	2
74902	parsons	demo	drag	{"code":"def return_three():\\n"}	2019-08-23 23:13:32-07	2
74912	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n"}	2019-08-23 23:13:36-07	2
74922	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\n"}	2019-08-23 23:13:40-07	2
74932	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\nreturn x\\n"}	2019-08-23 23:14:13-07	2
74942	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\n"}	2019-08-23 23:14:19-07	2
74952	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n  x = x + 1\\n  return x\\n"}	2019-08-23 23:14:22-07	2
74962	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n  return x\\n"}	2019-08-23 23:14:23-07	2
74972	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\nx = x + 1\\n  return x\\n"}	2019-08-23 23:14:33-07	2
74982	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\n  return x\\n"}	2019-08-23 23:14:37-07	2
74992	parsons	demo	drag	{"code":"def return_three():\\n  x = 2\\nx = x + 1\\n  return x\\n"}	2019-08-23 23:14:46-07	2
75062	parsons	demo_blanks	unload	{"code":"def return_three():\\n  num = 6\\n  return nu // 2\\n"}	2019-08-23 23:17:20-07	2
75072	coding	demo	load		2019-08-23 23:17:22-07	2
75082	coding	demo	coding_keyup	{"code":"def return_three():\\n"}	2019-08-23 23:17:24-07	2
75092	coding	demo	coding_keyup_backup	{"code":"def return_three():\\n    re"}	2019-08-23 23:17:25-07	2
75102	coding	demo	results	<div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /></div><div class="testcase pass"><span class="msg">Calling function <code>return_three()</code>.</span><br /><span class="msg">Expected result to be <code>3</code> , your code returned <code>3</code></span> <br /></div>	2019-08-23 23:18:52-07	2
75112	coding	demo	unload	{"code":"def return_three():\\n    return 3"}	2019-08-24 03:53:51-07	2
75122	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-26 23:10:31-07	2
75132	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n   = []\\n"}	2019-08-26 23:10:36-07	2
75142	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  .append()\\n"}	2019-08-26 23:10:39-07	2
75152	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  if  % 15 == 0:\\n  .append()\\n"}	2019-08-26 23:10:45-07	2
75162	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for  in range(1, +1):\\n  if n % 15 == 0:\\n  .append()\\n"}	2019-08-26 23:10:56-07	2
75172	parsons	19s_algo_study/fizz_buzz_blanks	unload	{"code":"def fizz_buzz(n):\\n  result = []\\n  for  in range(1, +1):\\n  if n % 15 == 0:\\n  .append()\\n"}	2019-08-26 23:11:16-07	2
75182	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-26 23:11:18-07	2
75192	parsons	19sum_blank_pilots/plusses	unload	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-26 23:11:30-07	2
75202	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-26 23:11:31-07	2
75212	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n     = []\\n"}	2019-08-26 23:11:34-07	2
75222	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  .append()\\n"}	2019-08-26 23:11:38-07	2
75232	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n    if  % 15 == 0:\\n  .append()\\n"}	2019-08-26 23:11:41-07	2
75242	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n    for  in range(1, +1):\\n    if  % 15 == 0:\\n  .append()\\n"}	2019-08-26 23:11:44-07	2
75252	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n    for i in range(1, n+1):\\n    if i % 15 == 0:\\n      .append(\\"fizzbuzz\\")\\n      result.append()\\n"}	2019-08-26 23:11:59-07	2
75262	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n    for i in range(1, n+1):\\n    if i % 15 == 0:\\n      .append(\\"fizzbuzz\\")\\n    elif  % 5 == 0:\\n      result.append()\\n"}	2019-08-26 23:12:01-07	2
75272	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n    for i in range(1, n+1):\\n    if i % 15 == 0:\\n      .append(\\"fizzbuzz\\")\\n    elif  % 5 == 0:\\n      .append(\\"buzz\\")\\n      result.append()\\n"}	2019-08-26 23:12:03-07	2
75282	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n    for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    else:\\n    result.append()\\n"}	2019-08-26 23:12:14-07	2
75292	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n    for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    else:\\n      result.append(i)\\n  return \\n"}	2019-08-26 23:12:23-07	2
75302	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n    for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:12:26-07	2
75312	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:12:31-07	2
75322	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n  elif  % 3 == 0:\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:13:00-07	2
75332	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:13:03-07	2
75342	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:13:06-07	2
75352	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    print()\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:18:49-07	2
75362	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    print('i=', i)\\n    print()\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:19:23-07	2
75372	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    print('i=', i, ';', n%15 == 0)\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:19:37-07	2
75682	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for  in range():\\n    if coin_winner(, , , ) == :\\n  for  in range():\\n  if coin_winner(, , , ) == :\\n"}	2019-08-27 00:19:23-07	2
75382	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    print('i=', i, ';', n%15 == 0)\\n    if n % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-26 23:19:38-07	2
75392	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-27 00:09:27-07	2
75402	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-27 00:09:40-07	2
75412	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-27 00:09:43-07	2
75422	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n = []\\n"}	2019-08-27 00:09:55-07	2
75432	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  if  % 15 == 0:\\n"}	2019-08-27 00:10:00-07	2
75442	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for  in range(1, +1):\\n    if i % 15 == 0:\\n"}	2019-08-27 00:10:07-07	2
75452	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n  elif  % 3 == 0:\\n"}	2019-08-27 00:11:14-07	2
75462	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n"}	2019-08-27 00:11:18-07	2
75472	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n    elif  % 5 == 0:\\n"}	2019-08-27 00:11:20-07	2
75482	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      .append(\\"buzz\\")\\n"}	2019-08-27 00:11:23-07	2
75492	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      .append(\\"buzz\\")\\n    else:\\n"}	2019-08-27 00:11:25-07	2
75502	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      .append(\\"buzz\\")\\n    else:\\n      .append()\\n"}	2019-08-27 00:11:28-07	2
75512	parsons	19s_algo_study/fizz_buzz_blanks	drag	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    else:\\n      result.append(i)\\n  return \\n"}	2019-08-27 00:11:49-07	2
75522	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      .append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-27 00:11:55-07	2
75532	parsons	19s_algo_study/fizz_buzz_blanks	submit	{"code":"def fizz_buzz(n):\\n  result = []\\n  for i in range(1, n+1):\\n    if i % 15 == 0:\\n      result.append(\\"fizzbuzz\\")\\n    elif i % 3 == 0:\\n      result.append(\\"fizz\\")\\n    elif i % 5 == 0:\\n      result.append(\\"buzz\\")\\n    else:\\n      result.append(i)\\n  return result\\n"}	2019-08-27 00:12:03-07	2
75542	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-27 00:12:08-07	2
75552	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-27 00:12:10-07	2
75562	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n  if  == 0:\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-27 00:12:12-07	2
75572	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n      return 0\\n  if  == 0:\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-27 00:12:14-07	2
75582	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  if  == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-27 00:12:16-07	2
75592	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n"}	2019-08-27 00:13:38-07	2
75602	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n"}	2019-08-27 00:13:41-07	2
75612	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n  return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n"}	2019-08-27 00:13:43-07	2
75622	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-27 00:13:45-07	2
75632	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for  in range():\\n"}	2019-08-27 00:19:06-07	2
75642	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  for  in range():\\n  for  in range():\\n"}	2019-08-27 00:19:08-07	2
75652	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if  == 0 and  == 0:\\n  for  in range():\\n  for  in range():\\n"}	2019-08-27 00:19:10-07	2
75662	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return \\n  for  in range():\\n  for  in range():\\n"}	2019-08-27 00:19:14-07	2
75672	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for  in range():\\n    if coin_winner(, , , ) == :\\n  for  in range():\\n"}	2019-08-27 00:19:21-07	2
76702	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    return mid\\n    elif :\\n    else:\\n"}	2019-08-27 17:54:10-07	2
75692	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n"}	2019-08-27 00:19:25-07	2
75702	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n"}	2019-08-27 00:19:27-07	2
75712	parsons	19sum_blank_pilots/coin_game_blanks	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\n  for  in range():\\n    if coin_winner(, , , ) == :\\n      return \\nreturn \\n"}	2019-08-27 00:19:29-07	2
75722	parsons	19sum_blank_pilots/coin_game_blanks	submit	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n    return other\\n  for i in range(row1):\\n    if coin_winner(i, row2, other, curr) == curr:\\n      return curr\\n  for i in range(row2):\\n    if coin_winner(row1, i, other, curr) == curr:\\n      return curr\\n  return other\\n"}	2019-08-27 00:19:49-07	2
75732	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-27 00:43:19-07	2
75742	parsons	19sum_blank_pilots/dfs_impl_blanks	load	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-27 17:41:15-07	2
75752	parsons	19sum_blank_pilots/dfs_impl_blanks	unload	{"code":"def dfs():\\n  # graph is a list of Nodes\\n"}	2019-08-27 17:42:07-07	2
75762	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:42:08-07	2
75772	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:44:10-07	2
75782	parsons	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:44:34-07	2
75792	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:44:35-07	2
75802	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-08-27 17:44:44-07	2
75812	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n"}	2019-08-27 17:44:47-07	2
75822	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n"}	2019-08-27 17:44:52-07	2
75832	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n"}	2019-08-27 17:44:54-07	2
75842	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n"}	2019-08-27 17:44:56-07	2
75852	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:44:57-07	2
75862	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:45:03-07	2
75872	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:46:12-07	2
75882	parsons	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:46:18-07	2
75892	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:46:19-07	2
75902	parsons	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:46:25-07	2
75912	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:46:26-07	2
75922	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-08-27 17:46:34-07	2
75932	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n"}	2019-08-27 17:46:37-07	2
75942	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n"}	2019-08-27 17:46:41-07	2
75952	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n"}	2019-08-27 17:46:43-07	2
75962	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n    elif :\\n"}	2019-08-27 17:46:45-07	2
75972	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:46:47-07	2
75982	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:46:52-07	2
75992	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:47:08-07	2
76002	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:47:29-07	2
76012	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:47:31-07	2
76022	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      high = len(arr) - 1\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:47:39-07	2
76032	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      high = len(arr) - 1\\n    elif :\\n      low = mid + 1\\n    else:\\n  return -1\\n"}	2019-08-27 17:47:41-07	2
76042	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n      high = len(arr) - 1\\n    elif :\\n      low = mid + 1\\n    else:\\n  return -1\\n"}	2019-08-27 17:47:46-07	2
77102	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 00:53:16-07	2
76052	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n      low = mid + 1\\n    else:\\n      high = len(arr) - 1\\n  return -1\\n"}	2019-08-27 17:47:48-07	2
76062	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n      low = mid + 1\\n    else:\\n      high = len(arr) - 1\\n  return -1\\n"}	2019-08-27 17:48:00-07	2
76072	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n      high = len(arr) - 1\\n  return -1\\n"}	2019-08-27 17:48:01-07	2
76082	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:48:03-07	2
76092	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:48:07-07	2
76102	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:48:12-07	2
76112	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:48:18-07	2
76122	parsons	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:48:28-07	2
76132	parsons	19sum_blank_pilots/coin_game_blanks	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-27 17:48:42-07	2
76142	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:48:48-07	2
76152	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:48:51-07	2
76162	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:48:56-07	2
76172	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  high = len(arr) - 1\\n"}	2019-08-27 17:49:16-07	2
76182	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n"}	2019-08-27 17:49:20-07	2
76192	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n"}	2019-08-27 17:49:23-07	2
76202	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n  if :\\n"}	2019-08-27 17:49:25-07	2
76212	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\nelif :\\n    if :\\n"}	2019-08-27 17:49:27-07	2
76222	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n      elif :\\n"}	2019-08-27 17:49:31-07	2
76232	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:49:33-07	2
76242	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n"}	2019-08-27 17:49:53-07	2
76252	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n"}	2019-08-27 17:49:59-07	2
76262	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n"}	2019-08-27 17:50:02-07	2
76272	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n"}	2019-08-27 17:50:04-07	2
76282	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n"}	2019-08-27 17:50:06-07	2
76292	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:50:07-07	2
76302	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:10-07	2
76312	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:13-07	2
76322	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:19-07	2
76332	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:23-07	2
76342	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:27-07	2
76352	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:29-07	2
76362	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    low = mid + 1\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:35-07	2
76372	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:38-07	2
76382	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:39-07	2
77112	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 00:54:01-07	2
76392	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n    else:\\n      high = mid - 1\\n  return -1\\n"}	2019-08-27 17:50:41-07	2
76402	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n  return -1\\n"}	2019-08-27 17:50:43-07	2
76412	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:50:45-07	2
76422	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\nwhile :\\n"}	2019-08-27 17:51:25-07	2
76432	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  while :\\n"}	2019-08-27 17:51:28-07	2
76442	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  while :\\nhigh = mid - 1\\n"}	2019-08-27 17:51:30-07	2
76452	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  while :\\n"}	2019-08-27 17:51:33-07	2
76462	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n"}	2019-08-27 17:51:48-07	2
76472	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n  return -1\\n"}	2019-08-27 17:51:58-07	2
76482	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n  return -1\\n"}	2019-08-27 17:52:01-07	2
76492	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n  return -1\\n"}	2019-08-27 17:52:03-07	2
76502	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:52:05-07	2
76512	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n      return mid\\n    elif :\\n    else:\\n  return -1\\n"}	2019-08-27 17:52:08-07	2
76522	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n  return -1\\n"}	2019-08-27 17:52:10-07	2
76532	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n      low = mid + 1\\n    else:\\n  return -1\\n"}	2019-08-27 17:52:12-07	2
76542	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:52:15-07	2
76552	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:52:20-07	2
76562	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low < high:\\n    mid = (high+low) // 2\\n    if arr[mid] == target:\\n      return mid\\n    elif arr[mid] > target:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:52:45-07	2
76572	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (high+low) // 2\\n    if arr[mid] == target:\\n      return mid\\n    elif arr[mid] > target:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:52:52-07	2
76582	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low < high:\\n    mid = (high+low) // 2\\n    if arr[mid] == target:\\n      return mid\\n    elif arr[mid] > target:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:52:55-07	2
76592	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low < high:\\n    mid = (high+low) // 2\\n    if mid == target:\\n      return mid\\n    elif mid > target:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:53:14-07	2
76602	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low < high:\\n    mid = (high+low) // 2\\n    if arr[mid] == arr[target]:\\n      return mid\\n    elif arr[mid] > arr[target]:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:53:25-07	2
76612	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-27 17:53:39-07	2
76622	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  while :\\n"}	2019-08-27 17:53:45-07	2
76632	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  while :\\n  low = 0\\n"}	2019-08-27 17:53:47-07	2
76642	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  while :\\n"}	2019-08-27 17:53:49-07	2
76652	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n"}	2019-08-27 17:53:54-07	2
76662	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n"}	2019-08-27 17:54:02-07	2
76672	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n"}	2019-08-27 17:54:03-07	2
76682	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n"}	2019-08-27 17:54:05-07	2
76692	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:54:07-07	2
76712	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n    high = mid - 1\\n    else:\\n"}	2019-08-27 17:54:13-07	2
76722	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n"}	2019-08-27 17:54:17-07	2
76732	parsons	19s_early_pilots/binary_search_1_blanks	drag	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while :\\n    mid = (high+low) // 2\\n    if :\\n      return mid\\n    elif :\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:54:19-07	2
76742	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low < high:\\n    mid = (high+low) // 2\\n    if arr[mid] == target:\\n      return mid\\n    elif arr[mid] > arr[target]:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:54:41-07	2
76752	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low < high:\\n    mid = (high+low) // 2\\n    if arr[mid] == target:\\n      return mid\\n    elif arr[mid] > target:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:54:46-07	2
76762	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low <= high:\\n    mid = (high+low) // 2\\n    if arr[mid] == target:\\n      return mid\\n    elif arr[mid] > target:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:54:54-07	2
76772	parsons	19s_early_pilots/binary_search_1_blanks	submit	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = len(arr) - 1\\n  while low < high:\\n    mid = (high+low) // 2\\n    if arr[mid] == target:\\n      return mid\\n    elif arr[mid] > target:\\n      high = mid - 1\\n    else:\\n      low = mid + 1\\n  return -1\\n"}	2019-08-27 17:54:58-07	2
76782	parsons	19s_early_pilots/binary_search_1_blanks	unload	{"code":"def binary_search(target, arr):\\n  low = 0\\n  high = mid - 1\\n  while :\\n    if :\\n    elif :\\n    else:\\n"}	2019-08-27 17:57:49-07	2
76792	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:37:49-07	2
76802	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:38:06-07	2
76812	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:38:20-07	2
76822	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:38:59-07	2
76832	parsons	demo	submit	{"code":"def return_three():\\n  x = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:39:12-07	2
76842	parsons	demo	submit	{"code":"def return_three():\\n  x = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:39:15-07	2
76852	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:39:24-07	2
76862	parsons	demo	unload	{"code":"def return_three():\\n  x = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:01-07	2
76872	parsons	demo	submit	{"code":"def return_three():\\n  x = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:10-07	2
76882	parsons	demo	move_on	{"code":"def return_three():\\n  x = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:18-07	2
76892	parsons	demo	unload	{"code":"def return_three():\\n  x = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:18-07	2
76902	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:25-07	2
76912	parsons	demo	unload	{"code":"def return_three():\\n  x = 2\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:32-07	2
76922	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:33-07	2
76932	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:42:45-07	2
76942	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = x + 1\\n"}	2019-08-27 23:42:57-07	2
76952	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = x + 1\\n"}	2019-08-27 23:43:01-07	2
76962	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = x + 1\\n"}	2019-08-27 23:43:03-07	2
76972	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = x + 1\\n"}	2019-08-27 23:43:05-07	2
76982	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:44:45-07	2
76992	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:45:59-07	2
77002	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:46:00-07	2
77012	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:46:09-07	2
77022	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-27 23:46:10-07	2
77032	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 00:52:01-07	2
77042	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\nif  == 0:\\n"}	2019-08-28 00:52:24-07	2
77052	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n"}	2019-08-28 00:52:29-07	2
77062	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if  == 0:\\n"}	2019-08-28 00:52:31-07	2
77072	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n"}	2019-08-28 00:52:36-07	2
77082	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  if %2 == 0:\\n"}	2019-08-28 00:52:39-07	2
77092	\N	\N	\N	\N	2019-08-28 00:53:13-07	\N
77122	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 00:54:03-07	2
77132	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 00:54:06-07	2
77142	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if  == 0:\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 00:54:11-07	2
77152	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n  return 0\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 00:54:14-07	2
77162	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  print()\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 00:54:17-07	2
77172	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  print('Args:', n, k)\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n"}	2019-08-28 00:54:29-07	2
77182	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  print('Args:', n, k)\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return \\n"}	2019-08-28 00:54:43-07	2
77192	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  print('Args:', n, k)\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n   = max_k_odd_plus( // 10, -1) +  % 10\\n"}	2019-08-28 00:54:48-07	2
77202	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  print('Args:', n, k)\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n"}	2019-08-28 00:54:50-07	2
77212	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  print('Args:', n, k)\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 00:54:53-07	2
77222	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_k_odd_plus(n, k):\\n  print('Args:', n, k)\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:55:21-07	2
77232	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  print('Args:', n, k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:55:48-07	2
77242	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  if k == 0:\\n    return 0\\n  print('Args:', n, k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:55:49-07	2
77252	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n    return 0\\n  print('Args:', n, k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:56:19-07	2
77262	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  print('Args:', n, k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:56:21-07	2
77272	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  print('Args:', n, k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:56:23-07	2
77282	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  print('Args:', n, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:56:39-07	2
77292	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  print('Args:', n, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:56:43-07	2
77302	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  print('Args:', n, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:56:45-07	2
77312	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  print('Args:', n, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:56:46-07	2
77322	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 00:58:00-07	2
77332	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n"}	2019-08-28 00:58:05-07	2
77342	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n"}	2019-08-28 00:58:09-07	2
77352	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 00:58:17-07	2
77362	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n"}	2019-08-28 00:58:21-07	2
77372	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n"}	2019-08-28 00:58:23-07	2
77382	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\nreturn max(, , )\\n"}	2019-08-28 00:58:25-07	2
77392	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 00:58:32-07	2
77402	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 00:58:35-07	2
77412	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  print()\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(s // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 00:59:00-07	2
77422	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  print('k =', k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 00:59:31-07	2
77432	multi	19sum_blank_pilots/post_survey_pt_2	load		2019-08-28 01:25:32-07	2
77442	multi	19sum_blank_pilots/conf_cog_survey_3	load		2019-08-28 01:25:33-07	2
77452	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 01:25:34-07	2
77462	coding	19sum_blank_pilots/plusses	load		2019-08-28 01:28:32-07	2
77472	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  print()\\n"}	2019-08-28 01:29:14-07	2
77482	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n  print()\\n"}	2019-08-28 01:29:33-07	2
77492	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n"}	2019-08-28 01:29:35-07	2
77502	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n"}	2019-08-28 01:29:50-07	2
77512	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n"}	2019-08-28 01:29:51-07	2
77522	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n"}	2019-08-28 01:29:53-07	2
77532	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n"}	2019-08-28 01:30:00-07	2
77542	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n = max_k_odd_plus( // 100, -1) +  % 100\\n"}	2019-08-28 01:30:01-07	2
77552	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 01:30:05-07	2
77562	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  # \\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 01:30:16-07	2
77572	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  # TODO: Also stop on k\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 01:30:24-07	2
77582	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  # TODO: Also stop on k\\n  if  == 0:\\n    return 0\\n  print()\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n"}	2019-08-28 01:30:29-07	2
77592	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 01:31:56-07	2
77602	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n"}	2019-08-28 01:32:07-07	2
77612	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n  print()\\n"}	2019-08-28 01:32:15-07	2
77622	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  print()\\n"}	2019-08-28 01:32:21-07	2
77632	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  print()\\n"}	2019-08-28 01:32:24-07	2
77642	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n  print()\\n"}	2019-08-28 01:32:25-07	2
77652	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n  print()\\n"}	2019-08-28 01:32:28-07	2
77662	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n  return max(, , )\\n  print()\\n"}	2019-08-28 01:32:30-07	2
77672	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n  return max(, , )\\n  print()\\n"}	2019-08-28 01:32:33-07	2
77682	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n   = max_k_odd_plus( // 10, )\\n  if %2 == 0:\\n    return \\n   = max_k_odd_plus( // 10, -1) +  % 10\\n   = max_k_odd_plus( // 100, -1) +  % 100\\n  return max(, , )\\n  print()\\n"}	2019-08-28 01:32:35-07	2
77692	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  print('k=', k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 01:33:49-07	2
77702	parsons	19sum_blank_pilots/plusses_blanks	submit	{"code":"def max_k_odd_plus(n, k):\\n  if n == 0:\\n    return 0\\n  print('k=', k)\\n  skip = max_k_odd_plus(n // 10, k)\\n  if n%2 == 0:\\n    return skip\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 01:33:50-07	2
77712	parsons	19sum_blank_pilots/coin_game_blanks	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-28 01:34:22-07	2
77722	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-28 01:34:59-07	2
77732	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-28 01:35:02-07	2
77742	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-28 01:35:02-07	2
77752	parsons	19s_early_pilots/binary_search_1_blanks	load	{"code":"def binary_search(target, arr):\\n"}	2019-08-28 01:35:02-07	2
77762	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 17:55:55-07	2
77772	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n"}	2019-08-28 17:55:59-07	2
77782	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n"}	2019-08-28 17:56:00-07	2
77792	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n"}	2019-08-28 17:56:03-07	2
77802	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n"}	2019-08-28 17:56:04-07	2
77812	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 17:56:11-07	2
77822	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 17:56:14-07	2
77832	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 17:56:17-07	2
77842	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 17:56:18-07	2
77852	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k == 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 17:56:20-07	2
77862	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\nif  == 0:\\n"}	2019-08-28 17:56:35-07	2
77872	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n"}	2019-08-28 17:56:39-07	2
77882	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  if  <= 0:\\n"}	2019-08-28 17:56:42-07	2
77892	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  if  <= 0:\\n    return 0\\n"}	2019-08-28 17:56:43-07	2
77902	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n    return 0\\n"}	2019-08-28 17:57:04-07	2
77912	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  if  <= 0:\\n    return 0\\n"}	2019-08-28 17:57:11-07	2
77922	parsons	19sum_blank_pilots/plusses	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 18:03:21-07	2
77932	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n"}	2019-08-28 18:03:25-07	2
77942	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n"}	2019-08-28 18:03:26-07	2
77952	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n  if n == 0:\\n"}	2019-08-28 18:03:28-07	2
77962	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n"}	2019-08-28 18:03:30-07	2
77972	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n"}	2019-08-28 18:03:33-07	2
77982	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n"}	2019-08-28 18:03:34-07	2
77992	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n"}	2019-08-28 18:03:36-07	2
78002	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n  return max(skip, take_one, take_two)\\n"}	2019-08-28 18:03:54-07	2
78012	parsons	19sum_blank_pilots/plusses	drag	{"code":"def max_k_odd_plus(n, k):\\n  if k <= 0:\\n    return 0\\n  if n == 0:\\n    return 0\\n  skip = max_k_odd_plus(n // 10, k)\\n  take_one = max_k_odd_plus(n // 10, k-1) + n % 10\\n  take_two = max_k_odd_plus(n // 100, k-1) + n % 100\\n"}	2019-08-28 18:04:00-07	2
78022	parsons	19s_algo_study/fizz_buzz_blanks	load	{"code":"def fizz_buzz(n):\\n"}	2019-08-28 18:04:22-07	2
78032	parsons	19sum_blank_pilots/plusses_blanks	unload	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  if  <= 0:\\n    return 0\\n"}	2019-08-28 18:04:59-07	2
78042	parsons	19sum_blank_pilots/plusses_blanks	load	{"code":"def max_k_odd_plus(n, k):\\n"}	2019-08-28 18:05:00-07	2
78052	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n"}	2019-08-28 18:05:02-07	2
78062	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n"}	2019-08-28 18:05:05-07	2
78072	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  if  == 0:\\n"}	2019-08-28 18:05:07-07	2
78082	parsons	19sum_blank_pilots/plusses_blanks	drag	{"code":"def max_k_odd_plus(n, k):\\n  if  == 0:\\n    return 0\\n  if  == 0:\\n    return 0\\n"}	2019-08-28 18:05:08-07	2
78092	parsons	19sum_blank_pilots/coin_game	load	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-28 18:05:47-07	2
78102	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\nfor i in range(row1):\\n"}	2019-08-28 18:05:56-07	2
78112	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n"}	2019-08-28 18:06:02-07	2
78122	parsons	19sum_blank_pilots/coin_game	drag	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n"}	2019-08-28 18:06:04-07	2
78132	parsons	19sum_blank_pilots/coin_game	unload	{"code":"def coin_winner(row1, row2, curr, other):\\n  if row1 == 0 and row2 == 0:\\n"}	2019-08-28 18:06:12-07	2
78142	coding	19sum_blank_pilots/plusses_blanks	load		2019-08-28 22:49:27-07	2
78152	coding	19sum_blank_pilots/plusses_blanks	coding_keyup	{"code":"def max_k_odd_plus(n, k):\\n    "}	2019-08-28 22:49:29-07	2
78162	coding	19sum_blank_pilots/plusses_blanks	coding_keyup_backup	{"code":"def max_k_odd_plus(n, k):\\n    "}	2019-08-28 22:49:30-07	2
78172	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 01:14:19-07	2
78182	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  return x\\n"}	2019-08-29 01:14:34-07	2
78192	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = x + 1\\n  return x\\n"}	2019-08-29 01:14:42-07	2
78202	parsons	demo	move_on	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n  x = x + 1\\n  return x\\n"}	2019-08-29 01:14:46-07	2
78212	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 01:24:50-07	2
78222	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 01:52:29-07	2
78232	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 01:56:54-07	2
78242	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 01:56:57-07	2
78252	parsons	demo	submit	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\nprint(3)\\n"}	2019-08-29 01:57:05-07	2
78262	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 03:41:53-07	2
78272	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 03:42:20-07	2
78282	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 03:42:22-07	2
78292	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 03:42:22-07	2
78302	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 03:42:24-07	2
78312	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 03:42:42-07	2
78322	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 03:42:43-07	2
78332	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:51:37-07	2
78342	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:51:46-07	2
78352	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:51:50-07	2
78362	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:51:53-07	2
78372	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:51:56-07	2
78382	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:51:59-07	2
78392	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:02-07	2
78402	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:06-07	2
78412	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:09-07	2
78422	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:12-07	2
78432	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:15-07	2
78442	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:18-07	2
78452	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:21-07	2
78462	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:25-07	2
78472	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:28-07	2
78482	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:32-07	2
78492	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:35-07	2
78502	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:37-07	2
78512	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:37-07	2
78522	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:38-07	2
78532	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:38-07	2
78542	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:39-07	2
78552	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:39-07	2
78562	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:40-07	2
78572	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:40-07	2
78582	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:41-07	2
78592	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:41-07	2
78602	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:42-07	2
78612	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:43-07	2
78622	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:43-07	2
78632	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:44-07	2
78642	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:52:44-07	2
78652	parsons	demo	unload	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-29 04:57:24-07	2
78662	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-08-31 01:46:21-07	2
78672	parsons	demo	load	{"code":"def return_three():\\n  # You can insert tabbed lines as well (necessary to Python)\\n"}	2019-09-25 04:41:36-07	2
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: heroku_4161265f41f2412; Owner: srujay
--

COPY heroku_4161265f41f2412."user" (id, sid_hash, ts_created, consent, treatment) FROM stdin;
2	pbkdf2:sha256:150000$Pyd6FVCt$fad9a6077ee502149677121ad1ee4a4a949c8449a092526f1195d808a6a40452	2019-06-05 18:51:38-07	1	ps
12	pbkdf2:sha256:50000$h6emLvNZ$8cb31e61a68a141e9f9e8f22f58b481225be6f6159fb50f8bf60917b4d1b27d0	2019-06-05 18:53:16-07	1	\N
22	pbkdf2:sha256:50000$TJj8q2dz$398b90f162ecb8d85ce33bf7689030b9c0bed4ff22de067921c48b06bbf94ded	2019-06-06 22:45:04-07	1	\N
32	pbkdf2:sha256:50000$Od9M5p9J$e66bc485b0596bc8f9dc5bb6bfd7434ff63b4c4695469e439f1e8663f3150a6b	2019-06-07 21:18:20-07	1	\N
42	pbkdf2:sha256:50000$E0ugOH8s$6ce0a24fa033f8fb9cbf5f80c9b72fbb0e0c8b4e5f37d5cf35229d614bf0d082	2019-06-07 21:20:10-07	1	\N
52	pbkdf2:sha256:50000$ysbK2b2G$b5d79a51ec943ff867a9365de17f71e8ebe685d44c8f090ff7c3ef62a4facd94	2019-06-07 21:39:03-07	1	\N
62	pbkdf2:sha256:50000$lskzFEab$981d03c1624dc402fc260469e4f8717f815c8dd839d50ea0261d57cafa7cca8f	2019-06-11 08:03:08-07	1	\N
72	pbkdf2:sha256:50000$Ty9ebX8d$b260afab28c7e7e8a7d1242c6d259b062c0e2fd67606becfd4d12d029d6128d6	2019-06-11 08:18:47-07	1	\N
82	pbkdf2:sha256:50000$jH9zwubS$b9f1bc35c9d4a5c347f0ffcaebf019e9cfa0cfb7a7301c3163fd2b00d672013a	2019-06-11 08:20:16-07	1	\N
92	pbkdf2:sha256:50000$C743gPoV$1a6d791f6144f69d5ecd8f496c4a0e8854546948d5ff1f938178689afbbba18e	2019-06-11 08:20:34-07	1	\N
102	pbkdf2:sha256:50000$90xcyKPJ$878f8e4553db705b58e91dcc6677c569541e3d0ff87cfa82f7099a45e1c15029	2019-06-11 08:20:42-07	1	\N
112	pbkdf2:sha256:50000$qtPm2qLD$8b23b43c9ce3796d2baa96e468add5c86afa9d3afbfc8a9d49a62406c249103f	2019-06-18 07:56:13-07	1	\N
122	8e89c720629c38866a317988d81fb670	2019-06-19 01:33:56-07	1	\N
132	c20ad4d76fe97759aa27a0c99bff6710	2019-06-19 01:34:52-07	1	\N
142	pbkdf2:sha256:50000$6ePVveMr$f37c4a18d595f961f3a46899f42d1ac771ad5f4254a9141a1611e03c08ab23a9	2019-06-19 07:51:01-07	1	\N
152	pbkdf2:sha256:50000$iLG5MAeM$f0c00b5d65f79c969f0f78a7d1508848f01f5cb0e0b0cdee65eee0cdf360991a	2019-06-19 07:56:28-07	1	\N
162	pbkdf2:sha256:50000$JjVE9ckS$8b75eafcb1545bdfff19a60c73bae916c90908a88c0ba6f5fff3ce172953b202	2019-06-19 08:01:58-07	1	\N
172	pbkdf2:sha256:50000$zdFbMXYM$7255a268a6c5ed199017fd0ace1779ccd7d1d3b9fb42bc7f6391a29b24f668d6	2019-06-19 08:05:54-07	1	\N
182	pbkdf2:sha256:50000$JDQQIPeR$60b7a19626929c995fdbf7b9cb683b7f193ba77d44f5c5f5cd9d20e7de77f795	2019-06-19 08:09:14-07	1	\N
192	pbkdf2:sha256:50000$YG2TbNmS$ebb0d289224209ab4ade4324ad24c84691799acd840492c947a7b4a41ec56157	2019-06-19 08:17:26-07	1	\N
202	c11a678785091b7f1334c24a4123ee75	2019-06-19 17:14:17-07	0	\N
212	60f7473d119e2f59a43f9e1934a54822	2019-06-19 21:09:46-07	0	\N
222	289dff07669d7a23de0ef88d2f7129e7	2019-06-25 17:03:14-07	0	\N
232	c4ca4238a0b923820dcc509a6f75849b	2019-07-17 18:05:22-07	1	\N
242	202cb962ac59075b964b07152d234b70	2019-07-17 18:19:46-07	1	\N
252	86109d400f0ed29e840b47ed72777c84	2019-07-18 17:55:17-07	1	\N
262	6c8349cc7260ae62e3b1396831a8398f	2019-07-18 18:16:07-07	1	\N
272	45c48cce2e2d7fbdea1afc51c7c6ad26	2019-07-18 18:25:09-07	1	\N
282	e4da3b7fbbce2345d7772b0674a318d5	2019-07-18 18:26:20-07	1	\N
292	cfcd208495d565ef66e7dff9f98764da	2019-07-18 18:30:50-07	1	\N
302	eccbc87e4b5ce2fe28308fd9f2a7baf3	2019-07-18 18:33:14-07	1	\N
312	5d41402abc4b2a76b9719d911017c592	2019-07-18 19:26:13-07	1	\N
322	415290769594460e2e485922904f345d	2019-07-18 19:34:11-07	1	\N
332	0cc175b9c0f1b6a831c399e269772661	2019-07-18 20:59:20-07	1	\N
342	4a8a08f09d37b73795649038408b5f33	2019-07-18 21:01:45-07	1	\N
352	8277e0910d750195b448797616e091ad	2019-07-18 21:30:02-07	1	\N
362	8fa14cdd754f91cc6554c9e71929cce7	2019-07-18 21:31:41-07	1	\N
372	7694f4a66316e53c8cdd9d9954bd611d	2019-07-18 21:34:22-07	1	\N
382	e1671797c52e15f763380b45e841ec32	2019-07-18 21:36:14-07	1	\N
392	7b774effe4a349c6dd82ad4f4f21d34c	2019-07-18 21:41:51-07	1	\N
402	827ccb0eea8a706c4c34a16891f84e7b	2019-07-18 21:44:31-07	1	\N
412	e358efa489f58062f10dd7316b65649e	2019-07-18 21:48:32-07	1	\N
422	06bf4edc41659b46508b28289f9f795b	2019-07-18 23:45:31-07	1	\N
432	1eaaefde339cb59195862dfaa7097bbc	2019-07-18 23:50:28-07	1	\N
442	42853a61b26fef79e2ae788d97356799	2019-07-18 23:56:26-07	1	\N
452	fdb55ce855129e05da8374059cc82728	2019-07-19 00:04:10-07	1	\N
462	6c14da109e294d1e8155be8aa4b1ce8e	2019-07-19 00:19:15-07	1	\N
472	aab3238922bcc25a6f606eb525ffdc56	2019-07-19 23:31:29-07	1	\N
482	c51ce410c124a10e0db5e4b97fc2af39	2019-07-19 23:37:46-07	1	\N
492	5878a7ab84fb43402106c575658472fa	2019-07-22 17:58:58-07	1	\N
502	02522a2b2726fb0a03bb19f2d8d9524d	2019-07-22 18:14:00-07	1	\N
512	35f4a8d465e6e1edc05f3d8ab658c551	2019-07-22 18:16:13-07	1	\N
522	072b030ba126b2f4b2374f342be9ed44	2019-07-22 18:19:04-07	1	\N
532	a87ff679a2f3e71d9181a67b7542122c	2019-07-22 18:23:32-07	1	\N
542	3c59dc048e8850243be8079a5c74d079	2019-07-22 18:25:42-07	1	\N
552	818920751903b194b239fef141bd91ec	2019-07-23 16:16:06-07	1	\N
562	e2fc714c4727ee9395f324cd2e7f331f	2019-07-23 16:21:47-07	1	\N
572	db0290266d953e5739ce25f89f74c93a	2019-07-23 16:33:55-07	1	\N
582	e8dc4081b13434b45189a720b77b6818	2019-07-23 18:35:41-07	1	\N
592	2510c39011c5be704182423e3a695e91	2019-07-23 20:33:03-07	1	\N
602	b2f5ff47436671b6e533d8dc3614845d	2019-07-23 20:46:32-07	1	\N
612	7b064dad507c266a161ffc73c53dcdc5	2019-07-23 21:11:43-07	1	\N
622	f1d3e3681f49a2066bb73984866640fb	2019-07-23 22:08:22-07	1	\N
632	a5771bce93e200c36f7cd9dfd0e5deaa	2019-07-23 23:33:17-07	\N	\N
642	49f68a5c8493ec2c0bf489821c21fc3b	2019-07-23 23:34:04-07	1	\N
652	8613985ec49eb8f757ae6439e879bb2a	2019-07-23 23:34:50-07	1	\N
662	098f6bcd4621d373cade4e832627b4f6	2019-07-23 23:35:07-07	1	\N
672	ae2b1fca515949e5d54fb22b8ed95575	2019-07-23 23:35:32-07	\N	\N
682	3583e821ada469fe0b029c2f6a986d95	2019-07-26 01:30:44-07	1	\N
692	912ec803b2ce49e4a541068d495ab570	2019-07-26 01:33:54-07	1	\N
702	e6db1baa29d3df1eb307ff6a12c778da	2019-07-26 22:29:20-07	0	\N
712	fe57e5bdc4947792cb74e3401622bfa8	2019-07-26 22:30:24-07	0	\N
722	c4b96e1d4056a93cb182b9e0d9961927	2019-07-26 22:39:17-07	\N	\N
732	f899139df5e1059396431415e770c6dd	2019-08-27 23:38:37-07	1	cd
\.


--
-- Name: event_id_seq; Type: SEQUENCE SET; Schema: heroku_4161265f41f2412; Owner: srujay
--

SELECT pg_catalog.setval('heroku_4161265f41f2412.event_id_seq', 78672, true);


--
-- Name: user_id_seq; Type: SEQUENCE SET; Schema: heroku_4161265f41f2412; Owner: srujay
--

SELECT pg_catalog.setval('heroku_4161265f41f2412.user_id_seq', 732, true);


--
-- Name: alembic_version idx_32770_primary; Type: CONSTRAINT; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER TABLE ONLY heroku_4161265f41f2412.alembic_version
    ADD CONSTRAINT idx_32770_primary PRIMARY KEY (version_num);


--
-- Name: event idx_32775_primary; Type: CONSTRAINT; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER TABLE ONLY heroku_4161265f41f2412.event
    ADD CONSTRAINT idx_32775_primary PRIMARY KEY (id);


--
-- Name: user idx_32784_primary; Type: CONSTRAINT; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER TABLE ONLY heroku_4161265f41f2412."user"
    ADD CONSTRAINT idx_32784_primary PRIMARY KEY (id);


--
-- Name: idx_32775_ix_event_ts; Type: INDEX; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE INDEX idx_32775_ix_event_ts ON heroku_4161265f41f2412.event USING btree (ts);


--
-- Name: idx_32775_user_id; Type: INDEX; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE INDEX idx_32775_user_id ON heroku_4161265f41f2412.event USING btree (user_id);


--
-- Name: idx_32784_ix_user_sid_hash; Type: INDEX; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE UNIQUE INDEX idx_32784_ix_user_sid_hash ON heroku_4161265f41f2412."user" USING btree (sid_hash);


--
-- Name: idx_32784_ix_user_ts_created; Type: INDEX; Schema: heroku_4161265f41f2412; Owner: srujay
--

CREATE INDEX idx_32784_ix_user_ts_created ON heroku_4161265f41f2412."user" USING btree (ts_created);


--
-- Name: event event_ibfk_1; Type: FK CONSTRAINT; Schema: heroku_4161265f41f2412; Owner: srujay
--

ALTER TABLE ONLY heroku_4161265f41f2412.event
    ADD CONSTRAINT event_ibfk_1 FOREIGN KEY (user_id) REFERENCES heroku_4161265f41f2412."user"(id) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- PostgreSQL database dump complete
--

